// Generated by ReScript, PLEASE EDIT WITH CARE
'use strict';

var Js_exn = require("rescript/lib/js/js_exn.js");
var LetOps = require("../../test/library/LetOps.js");
var Globals = require("../../test/library/Globals.js");
var CONSTANTS = require("../../test/CONSTANTS.js");

function addGemsNfts(gemCollectorNFT, tokenUri, minGems) {
  return LetOps.AwaitThen.let_(ethers.getSigners(), (function (loadedAccounts) {
                var admin = loadedAccounts[1];
                console.log("deploying gems nft");
                return gemCollectorNFT.connect(admin).addToken(tokenUri, minGems);
              }));
}

function mintGemsNft(gemCollectorNFT, levelId, receiver) {
  console.log("minting a gems nft");
  return LetOps.AwaitThen.let_(ethers.getSigners(), (function (loadedAccounts) {
                var user1 = loadedAccounts[2];
                return gemCollectorNFT.connect(user1).mintNFT(levelId, receiver);
              }));
}

function deployFlipp3ningPolygon(longShortInstance, stakerInstance, treasuryInstance, admin, paymentToken, ethMarketCapOraclePriceFeedAddress, btcMarketCapOraclePriceFeedAddress, deployments, namedAccounts) {
  var syntheticName = "Flipp3ning";
  var syntheticSymbol = "F3";
  return LetOps.AwaitThen.let_(longShortInstance.latestMarket(), (function (latestMarket) {
                var newMarketIndex = latestMarket + 1 | 0;
                return LetOps.AwaitThen.let_(deployments.deploy("SSF3", {
                                contract: "SyntheticTokenUpgradeable",
                                from: namedAccounts.deployer,
                                log: true,
                                proxy: {
                                  proxyContract: "UUPSProxy",
                                  execute: {
                                    methodName: "initialize",
                                    args: [
                                      "Float Short Flipp3ning",
                                      "fsF3",
                                      longShortInstance.address,
                                      stakerInstance.address,
                                      newMarketIndex,
                                      false
                                    ]
                                  }
                                }
                              }), (function (syntheticTokenShort) {
                              return LetOps.AwaitThen.let_(deployments.deploy("SLF3", {
                                              from: namedAccounts.deployer,
                                              log: true,
                                              contract: "SyntheticTokenUpgradeable",
                                              proxy: {
                                                proxyContract: "UUPSProxy",
                                                execute: {
                                                  args: [
                                                    "Float Long Flipp3ning",
                                                    "flF3",
                                                    longShortInstance.address,
                                                    stakerInstance.address,
                                                    newMarketIndex,
                                                    true
                                                  ],
                                                  methodName: "initialize"
                                                }
                                              }
                                            }), (function (syntheticTokenLong) {
                                            return LetOps.AwaitThen.let_(deployments.deploy("OracleManagerF3", {
                                                            from: namedAccounts.deployer,
                                                            log: true,
                                                            contract: "OracleManagerFlipp3ning",
                                                            args: [
                                                              ethMarketCapOraclePriceFeedAddress,
                                                              btcMarketCapOraclePriceFeedAddress
                                                            ]
                                                          }), (function (oracleManager) {
                                                          console.log("a.1");
                                                          console.log("a.3");
                                                          return LetOps.AwaitThen.let_(deployments.deploy("YieldManagerF3", {
                                                                          from: namedAccounts.deployer,
                                                                          contract: "YieldManagerAave",
                                                                          log: true,
                                                                          proxy: {
                                                                            proxyContract: "UUPSProxy",
                                                                            execute: {
                                                                              methodName: "initialize",
                                                                              args: [
                                                                                longShortInstance.address,
                                                                                treasuryInstance.address,
                                                                                paymentToken.address,
                                                                                "0x27F8D03b3a2196956ED754baDc28D73be8830A6e",
                                                                                "0xd05e3E715d945B59290df0ae8eF85c1BdB684744",
                                                                                "0x357D51124f59836DeD84c8a1730D72B749d8BC23",
                                                                                0,
                                                                                admin.address
                                                                              ]
                                                                            }
                                                                          }
                                                                        }), (function (yieldManager) {
                                                                        console.log("a.4");
                                                                        console.log([
                                                                              yieldManager.address,
                                                                              syntheticTokenLong.address,
                                                                              syntheticTokenShort.address
                                                                            ]);
                                                                        return LetOps.AwaitThen.let_(longShortInstance.connect(admin).createNewSyntheticMarketExternalSyntheticTokens(syntheticName, syntheticSymbol, syntheticTokenLong.address, syntheticTokenShort.address, paymentToken.address, oracleManager.address, yieldManager.address), (function (param) {
                                                                                      console.log("a.5");
                                                                                      var kInitialMultiplier = Globals.bnFromString("2000000000000000000");
                                                                                      var kPeriod = Globals.bnFromInt(5184000);
                                                                                      console.log("a.6");
                                                                                      var unstakeFee_e18 = Globals.bnFromString("5000000000000000");
                                                                                      var initialMarketSeedForEachMarketSide = Globals.bnFromString("1000000000000000000");
                                                                                      return LetOps.AwaitThen.let_(paymentToken.connect(admin).approve(longShortInstance.address, Globals.mul(initialMarketSeedForEachMarketSide, Globals.bnFromInt(3))), (function (param) {
                                                                                                    console.log("a.7");
                                                                                                    return longShortInstance.connect(admin).initializeMarket(newMarketIndex, kInitialMultiplier, kPeriod, unstakeFee_e18, initialMarketSeedForEachMarketSide, Globals.bnFromInt(5), Globals.bnFromInt(0), CONSTANTS.tenToThe18, Globals.mul(Globals.bnFromInt(3), CONSTANTS.tenToThe18));
                                                                                                  }));
                                                                                    }));
                                                                      }));
                                                        }));
                                          }));
                            }));
              }));
}

function deploy3TH_Polygon(longShortInstance, stakerInstance, treasuryInstance, admin, paymentToken, ethUSDPriceFeedAddress, deployments, namedAccounts) {
  var syntheticName = "Ether 3x";
  var syntheticSymbol = "3TH";
  return LetOps.AwaitThen.let_(longShortInstance.latestMarket(), (function (latestMarket) {
                var newMarketIndex = latestMarket + 1 | 0;
                return LetOps.AwaitThen.let_(deployments.deploy("SS3TH", {
                                contract: "SyntheticTokenUpgradeable",
                                from: namedAccounts.deployer,
                                log: true,
                                proxy: {
                                  proxyContract: "UUPSProxy",
                                  execute: {
                                    methodName: "initialize",
                                    args: [
                                      "Float Short Ether 3x",
                                      "fs3TH",
                                      longShortInstance.address,
                                      stakerInstance.address,
                                      newMarketIndex,
                                      false
                                    ]
                                  }
                                }
                              }), (function (syntheticTokenShort) {
                              return LetOps.AwaitThen.let_(deployments.deploy("SL3TH", {
                                              from: namedAccounts.deployer,
                                              log: true,
                                              contract: "SyntheticTokenUpgradeable",
                                              proxy: {
                                                proxyContract: "UUPSProxy",
                                                execute: {
                                                  methodName: "initialize",
                                                  args: [
                                                    "Float Long Ether 3x",
                                                    "fl3TH",
                                                    longShortInstance.address,
                                                    stakerInstance.address,
                                                    newMarketIndex,
                                                    true
                                                  ]
                                                }
                                              }
                                            }), (function (syntheticTokenLong) {
                                            return LetOps.AwaitThen.let_(deployments.deploy("OracleManager3TH", {
                                                            from: namedAccounts.deployer,
                                                            log: true,
                                                            contract: "OracleManagerChainlink",
                                                            args: [
                                                              namedAccounts.admin,
                                                              ethUSDPriceFeedAddress
                                                            ]
                                                          }), (function (oracleManager) {
                                                          console.log("a.1");
                                                          console.log("a.3");
                                                          return LetOps.AwaitThen.let_(deployments.deploy("YieldManager3TH", {
                                                                          from: namedAccounts.deployer,
                                                                          contract: "YieldManagerAave",
                                                                          log: true,
                                                                          proxy: {
                                                                            proxyContract: "UUPSProxy",
                                                                            execute: {
                                                                              methodName: "initialize",
                                                                              args: [
                                                                                longShortInstance.address,
                                                                                treasuryInstance.address,
                                                                                paymentToken.address,
                                                                                "0x27F8D03b3a2196956ED754baDc28D73be8830A6e",
                                                                                "0xd05e3E715d945B59290df0ae8eF85c1BdB684744",
                                                                                "0x357D51124f59836DeD84c8a1730D72B749d8BC23",
                                                                                0,
                                                                                admin.address
                                                                              ]
                                                                            }
                                                                          }
                                                                        }), (function (yieldManager) {
                                                                        console.log("a.4");
                                                                        console.log([
                                                                              yieldManager.address,
                                                                              syntheticTokenLong.address,
                                                                              syntheticTokenShort.address
                                                                            ]);
                                                                        return LetOps.AwaitThen.let_(longShortInstance.connect(admin).createNewSyntheticMarketExternalSyntheticTokens(syntheticName, syntheticSymbol, syntheticTokenLong.address, syntheticTokenShort.address, paymentToken.address, oracleManager.address, yieldManager.address), (function (param) {
                                                                                      console.log("a.5");
                                                                                      var kInitialMultiplier = Globals.bnFromString("2000000000000000000");
                                                                                      var kPeriod = Globals.bnFromInt(5184000);
                                                                                      console.log("a.6");
                                                                                      var unstakeFee_e18 = Globals.bnFromString("5000000000000000");
                                                                                      var initialMarketSeedForEachMarketSide = Globals.bnFromString("1000000000000000000");
                                                                                      return LetOps.AwaitThen.let_(paymentToken.connect(admin).approve(longShortInstance.address, Globals.mul(initialMarketSeedForEachMarketSide, Globals.bnFromInt(3))), (function (param) {
                                                                                                    console.log("a.7");
                                                                                                    return longShortInstance.connect(admin).initializeMarket(newMarketIndex, kInitialMultiplier, kPeriod, unstakeFee_e18, initialMarketSeedForEachMarketSide, Globals.bnFromInt(5), Globals.bnFromInt(0), CONSTANTS.tenToThe18, Globals.mul(Globals.bnFromInt(3), CONSTANTS.tenToThe18));
                                                                                                  }));
                                                                                    }));
                                                                      }));
                                                        }));
                                          }));
                            }));
              }));
}

function deployMarketOnPolygon(longShortInstance, stakerInstance, treasuryInstance, admin, paymentToken, chainlinkOricleFeedAddress, deployments, namedAccounts, syntheticName, syntheticSymbol, leverageAmount, expectedMarketIndex, fundingRateMultiplier_e18) {
  return LetOps.AwaitThen.let_(longShortInstance.latestMarket(), (function (latestMarket) {
                var newMarketIndex = latestMarket + 1 | 0;
                if (newMarketIndex !== expectedMarketIndex) {
                  Js_exn.raiseError("Wrong market Index: " + (String(newMarketIndex) + ("(actuall index) != " + (String(expectedMarketIndex) + "(expected index)"))));
                }
                return LetOps.AwaitThen.let_(deployments.deploy("SS" + syntheticSymbol, {
                                contract: "SyntheticTokenUpgradeable",
                                from: namedAccounts.deployer,
                                log: true,
                                proxy: {
                                  proxyContract: "UUPSProxy",
                                  execute: {
                                    methodName: "initialize",
                                    args: [
                                      "Float Short " + syntheticName,
                                      "fs" + syntheticSymbol,
                                      longShortInstance.address,
                                      stakerInstance.address,
                                      newMarketIndex,
                                      false
                                    ]
                                  }
                                }
                              }), (function (syntheticTokenShort) {
                              return LetOps.AwaitThen.let_(deployments.deploy("SL" + syntheticSymbol, {
                                              from: namedAccounts.deployer,
                                              log: true,
                                              contract: "SyntheticTokenUpgradeable",
                                              proxy: {
                                                proxyContract: "UUPSProxy",
                                                execute: {
                                                  methodName: "initialize",
                                                  args: [
                                                    "Float Long " + syntheticName,
                                                    "fl" + syntheticSymbol,
                                                    longShortInstance.address,
                                                    stakerInstance.address,
                                                    newMarketIndex,
                                                    true
                                                  ]
                                                }
                                              }
                                            }), (function (syntheticTokenLong) {
                                            return LetOps.AwaitThen.let_(deployments.deploy("OracleManager" + syntheticSymbol, {
                                                            from: namedAccounts.deployer,
                                                            log: true,
                                                            contract: "OracleManagerChainlink",
                                                            args: [
                                                              namedAccounts.admin,
                                                              chainlinkOricleFeedAddress
                                                            ]
                                                          }), (function (oracleManager) {
                                                          console.log("a.1");
                                                          console.log("a.3");
                                                          return LetOps.AwaitThen.let_(deployments.deploy("YieldManager" + syntheticSymbol, {
                                                                          from: namedAccounts.deployer,
                                                                          contract: "YieldManagerAaveBasic",
                                                                          log: true,
                                                                          proxy: {
                                                                            proxyContract: "UUPSProxy",
                                                                            execute: {
                                                                              methodName: "initialize",
                                                                              args: [
                                                                                longShortInstance.address,
                                                                                treasuryInstance.address,
                                                                                paymentToken.address,
                                                                                "0x27F8D03b3a2196956ED754baDc28D73be8830A6e",
                                                                                "0xd05e3E715d945B59290df0ae8eF85c1BdB684744",
                                                                                "0x357D51124f59836DeD84c8a1730D72B749d8BC23",
                                                                                0,
                                                                                admin.address
                                                                              ]
                                                                            }
                                                                          }
                                                                        }), (function (yieldManager) {
                                                                        console.log("a.4");
                                                                        console.log([
                                                                              yieldManager.address,
                                                                              syntheticTokenLong.address,
                                                                              syntheticTokenShort.address
                                                                            ]);
                                                                        return LetOps.AwaitThen.let_(longShortInstance.connect(admin).createNewSyntheticMarketExternalSyntheticTokens(syntheticName, syntheticSymbol, syntheticTokenLong.address, syntheticTokenShort.address, paymentToken.address, oracleManager.address, yieldManager.address), (function (param) {
                                                                                      console.log("a.5");
                                                                                      var kInitialMultiplier = Globals.bnFromString("1000000000000000000");
                                                                                      var kPeriod = Globals.bnFromInt(0);
                                                                                      console.log("a.6");
                                                                                      var unstakeFee_e18 = Globals.bnFromString("5000000000000000");
                                                                                      var initialMarketSeedForEachMarketSide = Globals.bnFromString("1000000000000000000");
                                                                                      return LetOps.AwaitThen.let_(paymentToken.connect(admin).approve(longShortInstance.address, Globals.mul(initialMarketSeedForEachMarketSide, Globals.bnFromInt(3))), (function (param) {
                                                                                                    console.log("a.7 - seeding from", admin);
                                                                                                    return LetOps.AwaitThen.let_(longShortInstance.connect(admin).initializeMarket(newMarketIndex, kInitialMultiplier, kPeriod, unstakeFee_e18, initialMarketSeedForEachMarketSide, Globals.bnFromInt(5), Globals.bnFromInt(0), CONSTANTS.tenToThe18, Globals.mul(Globals.bnFromInt(leverageAmount), CONSTANTS.tenToThe18)), (function (param) {
                                                                                                                  console.log("market launched, setting funding rate");
                                                                                                                  return longShortInstance.connect(admin).changeMarketFundingRateMultiplier(newMarketIndex, fundingRateMultiplier_e18);
                                                                                                                }));
                                                                                                  }));
                                                                                    }));
                                                                      }));
                                                        }));
                                          }));
                            }));
              }));
}

function deployAaveDAIYieldManager(deployments, syntheticSymbol, deployer, longShortInstanceAddress, treasuryInstanceAddress, paymentTokenAddress, admin) {
  return deployments.deploy("YieldManager" + syntheticSymbol, {
              from: deployer,
              contract: "DefaultYieldManagerAave",
              log: true,
              proxy: {
                proxyContract: "UUPSProxy",
                execute: {
                  methodName: "initialize",
                  args: [
                    longShortInstanceAddress,
                    treasuryInstanceAddress,
                    paymentTokenAddress,
                    "0x47AFa96Cdc9fAb46904A55a6ad4bf6660B53c38a",
                    "0xb6A86025F0FE1862B372cb0ca18CE3EDe02A318f",
                    "0x01D83Fe6A10D2f2B7AF17034343746188272cAc9",
                    0,
                    admin.address
                  ]
                }
              }
            });
}

function deployCompoundDAIYieldManager(deployments, syntheticSymbol, deployer, longShortInstanceAddress, treasuryInstanceAddress, paymentTokenAddress, admin, cToken) {
  return deployments.deploy("YieldManager" + syntheticSymbol, {
              from: deployer,
              contract: "DefaultYieldManagerCompound",
              log: true,
              proxy: {
                proxyContract: "UUPSProxy",
                execute: {
                  methodName: "initialize",
                  args: [
                    longShortInstanceAddress,
                    treasuryInstanceAddress,
                    paymentTokenAddress,
                    cToken,
                    admin.address
                  ]
                }
              }
            });
}

function deployAvalancheMarket(longShortInstance, stakerInstance, treasuryInstance, admin, paymentToken, oraclePriceFeedAddress, deployments, namedAccounts, syntheticName, syntheticSymbol, fundingRateMultiplier, marketLeverage, expectedMarketIndex, yieldManagerVariant) {
  return LetOps.AwaitThen.let_(longShortInstance.latestMarket(), (function (latestMarket) {
                var newMarketIndex = latestMarket + 1 | 0;
                if (newMarketIndex !== expectedMarketIndex) {
                  Js_exn.raiseError("Wrong market Index: " + (String(newMarketIndex) + ("(actuall index) != " + (String(expectedMarketIndex) + "(expected index)"))));
                }
                return LetOps.AwaitThen.let_(deployments.deploy("SS" + syntheticSymbol, {
                                contract: "SyntheticTokenUpgradeable",
                                from: namedAccounts.deployer,
                                log: true,
                                proxy: {
                                  proxyContract: "UUPSProxy",
                                  execute: {
                                    methodName: "initialize",
                                    args: [
                                      "Float Short " + syntheticName,
                                      "fs" + syntheticSymbol,
                                      longShortInstance.address,
                                      stakerInstance.address,
                                      newMarketIndex,
                                      false
                                    ]
                                  }
                                }
                              }), (function (syntheticTokenShort) {
                              return LetOps.AwaitThen.let_(deployments.deploy("SL" + syntheticSymbol, {
                                              from: namedAccounts.deployer,
                                              log: true,
                                              contract: "SyntheticTokenUpgradeable",
                                              proxy: {
                                                proxyContract: "UUPSProxy",
                                                execute: {
                                                  methodName: "initialize",
                                                  args: [
                                                    "Float Long " + syntheticName,
                                                    "fl" + syntheticSymbol,
                                                    longShortInstance.address,
                                                    stakerInstance.address,
                                                    newMarketIndex,
                                                    true
                                                  ]
                                                }
                                              }
                                            }), (function (syntheticTokenLong) {
                                            console.log("Oracle manager!", oraclePriceFeedAddress);
                                            return LetOps.AwaitThen.let_(deployments.deploy("OracleManager" + syntheticSymbol, {
                                                            from: namedAccounts.deployer,
                                                            log: true,
                                                            contract: "OracleManagerChainlink",
                                                            args: [
                                                              namedAccounts.admin,
                                                              oraclePriceFeedAddress
                                                            ]
                                                          }), (function (oracleManager) {
                                                          console.log("a.1");
                                                          console.log("a.2");
                                                          console.log("a.3");
                                                          return LetOps.AwaitThen.let_(yieldManagerVariant ? deployCompoundDAIYieldManager(deployments, syntheticSymbol, namedAccounts.deployer, longShortInstance.address, treasuryInstance.address, paymentToken.address, admin, yieldManagerVariant._0) : deployAaveDAIYieldManager(deployments, syntheticSymbol, namedAccounts.deployer, longShortInstance.address, treasuryInstance.address, paymentToken.address, admin), (function (yieldManager) {
                                                                        console.log("a.4");
                                                                        console.log([
                                                                              yieldManager.address,
                                                                              syntheticTokenLong.address,
                                                                              syntheticTokenShort.address
                                                                            ]);
                                                                        return LetOps.AwaitThen.let_(longShortInstance.connect(admin).createNewSyntheticMarketExternalSyntheticTokens(syntheticName, syntheticSymbol, syntheticTokenLong.address, syntheticTokenShort.address, paymentToken.address, oracleManager.address, yieldManager.address), (function (param) {
                                                                                      console.log("a.5");
                                                                                      var kInitialMultiplier = Globals.bnFromString("2000000000000000000");
                                                                                      var kPeriod = Globals.bnFromInt(5184000);
                                                                                      console.log("a.6");
                                                                                      var unstakeFee_e18 = Globals.bnFromString("5000000000000000");
                                                                                      var initialMarketSeedForEachMarketSide = Globals.bnFromString("1000000000000000000");
                                                                                      return LetOps.AwaitThen.let_(paymentToken.connect(admin).approve(longShortInstance.address, Globals.mul(initialMarketSeedForEachMarketSide, Globals.bnFromInt(3))), (function (param) {
                                                                                                    console.log("a.7");
                                                                                                    return LetOps.AwaitThen.let_(longShortInstance.connect(admin).initializeMarket(newMarketIndex, kInitialMultiplier, kPeriod, unstakeFee_e18, initialMarketSeedForEachMarketSide, Globals.bnFromInt(5), Globals.bnFromInt(0), CONSTANTS.tenToThe18, Globals.mul(Globals.bnFromInt(marketLeverage), CONSTANTS.tenToThe18)), (function (param) {
                                                                                                                  console.log("market launched, setting the funding rate");
                                                                                                                  return longShortInstance.connect(admin).changeMarketFundingRateMultiplier(newMarketIndex, fundingRateMultiplier);
                                                                                                                }));
                                                                                                  }));
                                                                                    }));
                                                                      }));
                                                        }));
                                          }));
                            }));
              }));
}

exports.addGemsNfts = addGemsNfts;
exports.mintGemsNft = mintGemsNft;
exports.deployFlipp3ningPolygon = deployFlipp3ningPolygon;
exports.deploy3TH_Polygon = deploy3TH_Polygon;
exports.deployMarketOnPolygon = deployMarketOnPolygon;
exports.deployAaveDAIYieldManager = deployAaveDAIYieldManager;
exports.deployCompoundDAIYieldManager = deployCompoundDAIYieldManager;
exports.deployAvalancheMarket = deployAvalancheMarket;
/* Globals Not a pure module */
