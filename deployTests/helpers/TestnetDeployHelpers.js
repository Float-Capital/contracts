// Generated by ReScript, PLEASE EDIT WITH CARE
'use strict';

var LetOps = require("../../test/library/LetOps.js");
var Globals = require("../../test/library/Globals.js");
var Helpers = require("../../test/library/Helpers.js");
var CONSTANTS = require("../../test/CONSTANTS.js");
var YieldManagerMock = require("../../test/library/contracts/YieldManagerMock.js");
var OracleManagerMock = require("../../test/library/contracts/OracleManagerMock.js");
var ProtocolInteractionHelpers = require("./ProtocolInteractionHelpers.js");

function deployTestMarketCore(syntheticName, syntheticSymbol, longShortInstance, admin, paymentToken, oracleManagerAddress, yieldManagerAddress) {
  return LetOps.AwaitThen.let_(longShortInstance.connect(admin).createNewSyntheticMarket(syntheticName, syntheticSymbol, paymentToken.address, oracleManagerAddress, yieldManagerAddress), (function (param) {
                return LetOps.AwaitThen.let_(Helpers.increaseTime(2), (function (param) {
                              return LetOps.AwaitThen.let_(longShortInstance.latestMarket(), (function (latestMarket) {
                                            var kInitialMultiplier = Globals.bnFromString("1000000000000000000");
                                            var kPeriod = Globals.bnFromInt(0);
                                            return LetOps.AwaitThen.let_(ProtocolInteractionHelpers.mintAndApprove(paymentToken, Globals.bnFromString("2000000000000000000"), admin, longShortInstance.address), (function (param) {
                                                          var unstakeFee_e18 = Globals.bnFromString("5000000000000000");
                                                          var initialMarketSeedForEachMarketSide = Globals.bnFromString("1000000000000000000");
                                                          return longShortInstance.connect(admin).initializeMarket(latestMarket, kInitialMultiplier, kPeriod, unstakeFee_e18, initialMarketSeedForEachMarketSide, Globals.bnFromInt(5), Globals.bnFromInt(0), Globals.bnFromInt(1), CONSTANTS.tenToThe18);
                                                        }));
                                          }));
                            }));
              }));
}

function deployTestMarket(syntheticName, syntheticSymbol, longShortInstance, treasuryInstance, admin, paymentToken) {
  return LetOps.AwaitThen.let_(OracleManagerMock.make(admin.address, Globals.bnFromInt(2)), (function (oracleManager) {
                return LetOps.AwaitThen.let_(YieldManagerMock.make(longShortInstance.address, treasuryInstance.address, paymentToken.address), (function (yieldManager) {
                              return LetOps.AwaitThen.let_(paymentToken.MINTER_ROLE(), (function (mintRole) {
                                            return LetOps.AwaitThen.let_(paymentToken.grantRole(mintRole, yieldManager.address), (function (param) {
                                                          return deployTestMarketCore(syntheticName, syntheticSymbol, longShortInstance, admin, paymentToken, oracleManager.address, yieldManager.address);
                                                        }));
                                          }));
                            }));
              }));
}

function deployTestnetMarketUpgradeableCore(syntheticName, syntheticSymbol, longShortInstance, stakerInstance, admin, paymentToken, oracleManagerAddress, yieldManagerAddress, deployments, namedAccounts) {
  return LetOps.AwaitThen.let_(longShortInstance.latestMarket(), (function (latestMarket) {
                var newMarketIndex = latestMarket + 1 | 0;
                return LetOps.AwaitThen.let_(deployments.deploy("SS" + syntheticSymbol, {
                                contract: "SyntheticTokenUpgradeable",
                                from: namedAccounts.deployer,
                                log: true,
                                proxy: {
                                  proxyContract: "UUPSProxy",
                                  execute: {
                                    methodName: "initialize",
                                    args: [
                                      "Float Short " + syntheticName,
                                      "f\xe2\x86\x97\xef\xb8\x8f" + syntheticSymbol,
                                      longShortInstance.address,
                                      stakerInstance.address,
                                      newMarketIndex,
                                      false
                                    ]
                                  }
                                }
                              }), (function (syntheticTokenShort) {
                              return LetOps.AwaitThen.let_(deployments.deploy("SL" + syntheticSymbol, {
                                              from: namedAccounts.deployer,
                                              log: true,
                                              contract: "SyntheticTokenUpgradeable",
                                              proxy: {
                                                proxyContract: "UUPSProxy",
                                                execute: {
                                                  args: [
                                                    "Float Long " + syntheticName,
                                                    "f\xe2\x86\x98\xef\xb8\x8f" + syntheticSymbol,
                                                    longShortInstance.address,
                                                    stakerInstance.address,
                                                    newMarketIndex,
                                                    true
                                                  ],
                                                  methodName: "initialize"
                                                }
                                              }
                                            }), (function (syntheticTokenLong) {
                                            return LetOps.AwaitThen.let_(longShortInstance.connect(admin).createNewSyntheticMarketExternalSyntheticTokens(syntheticName, syntheticSymbol, syntheticTokenLong.address, syntheticTokenShort.address, paymentToken.address, oracleManagerAddress, yieldManagerAddress), (function (param) {
                                                          console.log("a.5");
                                                          var kInitialMultiplier = Globals.bnFromString("5000000000000000000");
                                                          var kPeriod = Globals.bnFromInt(864000);
                                                          console.log("a.6");
                                                          var unstakeFee_e18 = Globals.bnFromString("5000000000000000");
                                                          var initialMarketSeedForEachMarketSide = Globals.bnFromString("1000000000000000000");
                                                          return LetOps.AwaitThen.let_(paymentToken.connect(admin).approve(longShortInstance.address, Globals.mul(initialMarketSeedForEachMarketSide, Globals.bnFromInt(3))), (function (param) {
                                                                        console.log("a.7");
                                                                        return longShortInstance.connect(admin).initializeMarket(newMarketIndex, kInitialMultiplier, kPeriod, unstakeFee_e18, initialMarketSeedForEachMarketSide, Globals.bnFromInt(5), Globals.bnFromInt(0), Globals.bnFromInt(1), CONSTANTS.tenToThe18);
                                                                      }));
                                                        }));
                                          }));
                            }));
              }));
}

function deployMumbaiMarketUpgradeable(syntheticName, syntheticSymbol, longShortInstance, stakerInstance, treasuryInstance, admin, paymentToken, oraclePriceFeedAddress, deployments, namedAccounts) {
  return LetOps.AwaitThen.let_(deployments.deploy("OracleManager" + syntheticSymbol, {
                  from: namedAccounts.deployer,
                  log: true,
                  contract: "OracleManagerChainlinkTestnet",
                  args: [
                    admin.address,
                    oraclePriceFeedAddress,
                    Globals.bnFromInt(27)
                  ]
                }), (function (oracleManager) {
                console.log("a.1");
                console.log("a.3");
                return LetOps.AwaitThen.let_(deployments.deploy("YieldManager" + syntheticSymbol, {
                                from: namedAccounts.deployer,
                                contract: "YieldManagerAave",
                                log: true,
                                proxy: {
                                  proxyContract: "UUPSProxy",
                                  execute: {
                                    methodName: "initialize",
                                    args: [
                                      longShortInstance.address,
                                      treasuryInstance.address,
                                      paymentToken.address,
                                      "0x639cB7b21ee2161DF9c882483C9D55c90c20Ca3e",
                                      "0x178113104fEcbcD7fF8669a0150721e231F0FD4B",
                                      "0xd41aE58e803Edf4304334acCE4DC4Ec34a63C644",
                                      0,
                                      admin.address
                                    ]
                                  }
                                }
                              }), (function (yieldManager) {
                              console.log("a.4");
                              return deployTestnetMarketUpgradeableCore(syntheticName, syntheticSymbol, longShortInstance, stakerInstance, admin, paymentToken, oracleManager.address, yieldManager.address, deployments, namedAccounts);
                            }));
              }));
}

function deployFantomTestnetMarketUpgradeable(syntheticName, syntheticSymbol, longShortInstance, stakerInstance, treasuryInstance, admin, paymentToken, oraclePriceFeedAddress, deployments, namedAccounts) {
  return LetOps.AwaitThen.let_(deployments.deploy("OracleManager" + syntheticSymbol, {
                  from: namedAccounts.deployer,
                  log: true,
                  contract: "OracleManagerChainlinkTestnet",
                  args: [
                    admin.address,
                    oraclePriceFeedAddress,
                    Globals.bnFromInt(27)
                  ]
                }), (function (oracleManager) {
                console.log("a.1");
                console.log("a.3");
                return LetOps.AwaitThen.let_(deployments.deploy("YieldManager" + syntheticSymbol, {
                                from: namedAccounts.deployer,
                                contract: "DefaultYieldManagerAaveV3",
                                log: true,
                                proxy: {
                                  proxyContract: "UUPSProxy",
                                  execute: {
                                    methodName: "initialize",
                                    args: [
                                      longShortInstance.address,
                                      treasuryInstance.address,
                                      paymentToken.address,
                                      "0xbAA97949f28899Fc7E89ff67A033e9f46fbA0846",
                                      "0xD90db1ca5A6e9873BCD9B0279AE038272b656728",
                                      "0x509B2506FbA1BD41765F6A82C7B0Dd4229191768",
                                      0,
                                      admin.address
                                    ]
                                  }
                                }
                              }), (function (yieldManager) {
                              console.log("a.4");
                              return deployTestnetMarketUpgradeableCore(syntheticName, syntheticSymbol, longShortInstance, stakerInstance, admin, paymentToken, oracleManager.address, yieldManager.address, deployments, namedAccounts);
                            }));
              }));
}

exports.deployTestMarketCore = deployTestMarketCore;
exports.deployTestMarket = deployTestMarket;
exports.deployTestnetMarketUpgradeableCore = deployTestnetMarketUpgradeableCore;
exports.deployMumbaiMarketUpgradeable = deployMumbaiMarketUpgradeable;
exports.deployFantomTestnetMarketUpgradeable = deployFantomTestnetMarketUpgradeable;
/* Globals Not a pure module */
