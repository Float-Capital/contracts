// Generated by ReScript, PLEASE EDIT WITH CARE
'use strict';

var Curry = require("rescript/lib/js/curry.js");
var LetOps = require("../test/library/LetOps.js");
var CONSTANTS = require("../test/CONSTANTS.js");
var DeployHelpers = require("./DeployHelpers.js");

var ethMarketCapOraclePriceFeedAddress = ethers.utils.getAddress("0x67935f65D1577ced9f4929D3679A157E95C1c02c");

var btcMarketCapOraclePriceFeedAddress = ethers.utils.getAddress("0x18E4058491C3F58bC2f747A9E64cA256Ed6B318d");

var ethUSDPriceFeedAddress = ethers.utils.getAddress("0xF9680D99D6C9589e2a93a78A04A279e509205945");

var ohmUSDPriceFeedAddress = ethers.utils.getAddress("0xa8B05B6337040c0529919BDB51f6B40A684eb08C");

var axsUSDPriceFeedAddress = ethers.utils.getAddress("0x9c371aE34509590E10aB98205d2dF5936A1aD875");

var cviFeedAddress = ethers.utils.getAddress("0xB527769842f997d56dD1Ff73C34192141b69077e");

var linkFeedAddress = ethers.utils.getAddress("0xd9FFdb71EbE7496cC440152d43986Aae0AB76665");

var ohmV2FeedAddress = ethers.utils.getAddress("0x4cE90F28C6357A7d3F47D680723d18AF3684cD00");

function launchPolygonMarkets(param, deploymentArgs) {
  var treasury = param.treasury;
  var paymentToken = param.paymentToken;
  var longShort = param.longShort;
  var staker = param.staker;
  return LetOps.AwaitThen.let_(Curry._1(deploymentArgs.getNamedAccounts, undefined), (function (namedAccounts) {
                return LetOps.AwaitThen.let_(ethers.getSigners(), (function (loadedAccounts) {
                              var admin = loadedAccounts[1];
                              console.log("deploying markets");
                              return DeployHelpers.deployFlipp3ningPolygon(longShort, staker, treasury, admin, paymentToken, ethMarketCapOraclePriceFeedAddress, btcMarketCapOraclePriceFeedAddress, deploymentArgs.deployments, namedAccounts);
                            }));
              }));
}

function launch3thMarket(param, deploymentArgs) {
  var treasury = param.treasury;
  var paymentToken = param.paymentToken;
  var longShort = param.longShort;
  var staker = param.staker;
  return LetOps.AwaitThen.let_(Curry._1(deploymentArgs.getNamedAccounts, undefined), (function (namedAccounts) {
                return LetOps.AwaitThen.let_(ethers.getSigners(), (function (loadedAccounts) {
                              var admin = loadedAccounts[1];
                              console.log("deploying markets");
                              return DeployHelpers.deploy3TH_Polygon(longShort, staker, treasury, admin, paymentToken, ethUSDPriceFeedAddress, deploymentArgs.deployments, namedAccounts);
                            }));
              }));
}

function launchOhmMarket(param, deploymentArgs) {
  var treasury = param.treasury;
  var paymentToken = param.paymentToken;
  var longShort = param.longShort;
  var staker = param.staker;
  return LetOps.AwaitThen.let_(Curry._1(deploymentArgs.getNamedAccounts, undefined), (function (namedAccounts) {
                return LetOps.AwaitThen.let_(ethers.getSigners(), (function (loadedAccounts) {
                              var admin = loadedAccounts[1];
                              console.log("deploying markets");
                              return DeployHelpers.deployMarketOnPolygon(longShort, staker, treasury, admin, paymentToken, ohmUSDPriceFeedAddress, deploymentArgs.deployments, namedAccounts, "OHM 2x", "2OHM", 2, 3, ethers.BigNumber.from("3000000000000000000"));
                            }));
              }));
}

function launchAxsMarket(param, deploymentArgs) {
  var treasury = param.treasury;
  var paymentToken = param.paymentToken;
  var longShort = param.longShort;
  var staker = param.staker;
  return LetOps.AwaitThen.let_(Curry._1(deploymentArgs.getNamedAccounts, undefined), (function (namedAccounts) {
                return LetOps.AwaitThen.let_(ethers.getSigners(), (function (loadedAccounts) {
                              var admin = loadedAccounts[1];
                              console.log("deploying markets");
                              return DeployHelpers.deployMarketOnPolygon(longShort, staker, treasury, admin, paymentToken, axsUSDPriceFeedAddress, deploymentArgs.deployments, namedAccounts, "AXS 2x", "2AXS", 2, 4, CONSTANTS.tenToThe18);
                            }));
              }));
}

function launchGeneralMarket(syntheticName, syntheticSymbol, leverageAmount, oracleAddress, expectedMarketIndex, longShort, staker, treasury, paymentToken, fundingRateMultiplier, deploymentArgs) {
  return LetOps.AwaitThen.let_(Curry._1(deploymentArgs.getNamedAccounts, undefined), (function (namedAccounts) {
                return LetOps.AwaitThen.let_(ethers.getSigners(), (function (loadedAccounts) {
                              var admin = loadedAccounts[1];
                              return DeployHelpers.deployMarketOnPolygon(longShort, staker, treasury, admin, paymentToken, oracleAddress, deploymentArgs.deployments, namedAccounts, syntheticName, syntheticSymbol, leverageAmount, expectedMarketIndex, fundingRateMultiplier);
                            }));
              }));
}

function launchCviMarket(param, deploymentArgs) {
  return launchGeneralMarket("CVI 2x", "2CVI", 2, cviFeedAddress, 5, param.longShort, param.staker, param.treasury, param.paymentToken, CONSTANTS.tenToThe18, deploymentArgs);
}

function launchLinkMarket(param, deploymentArgs) {
  return launchGeneralMarket("LINK 2x", "2LINK", 2, linkFeedAddress, 6, param.longShort, param.staker, param.treasury, param.paymentToken, CONSTANTS.tenToThe18, deploymentArgs);
}

function launchOhmV2Market(param, deploymentArgs) {
  return launchGeneralMarket("OHMv2 2x", "2OHMv2", 2, ohmV2FeedAddress, 8, param.longShort, param.staker, param.treasury, param.paymentToken, ethers.BigNumber.from(8).mul(CONSTANTS.tenToThe18), deploymentArgs);
}

exports.ethMarketCapOraclePriceFeedAddress = ethMarketCapOraclePriceFeedAddress;
exports.btcMarketCapOraclePriceFeedAddress = btcMarketCapOraclePriceFeedAddress;
exports.ethUSDPriceFeedAddress = ethUSDPriceFeedAddress;
exports.ohmUSDPriceFeedAddress = ohmUSDPriceFeedAddress;
exports.axsUSDPriceFeedAddress = axsUSDPriceFeedAddress;
exports.cviFeedAddress = cviFeedAddress;
exports.linkFeedAddress = linkFeedAddress;
exports.ohmV2FeedAddress = ohmV2FeedAddress;
exports.launchPolygonMarkets = launchPolygonMarkets;
exports.launch3thMarket = launch3thMarket;
exports.launchOhmMarket = launchOhmMarket;
exports.launchAxsMarket = launchAxsMarket;
exports.launchGeneralMarket = launchGeneralMarket;
exports.launchCviMarket = launchCviMarket;
exports.launchLinkMarket = launchLinkMarket;
exports.launchOhmV2Market = launchOhmV2Market;
/* ethMarketCapOraclePriceFeedAddress Not a pure module */
