// Generated by ReScript, PLEASE EDIT WITH CARE
'use strict';

var Curry = require("rescript/lib/js/curry.js");
var Js_exn = require("rescript/lib/js/js_exn.js");
var LetOps = require("../test/library/LetOps.js");
var Globals = require("../test/library/Globals.js");
var Helpers = require("../test/library/Helpers.js");
var CONSTANTS = require("../test/CONSTANTS.js");
var Belt_Array = require("rescript/lib/js/belt_Array.js");
var SyntheticToken = require("../test/library/contracts/SyntheticToken.js");
var YieldManagerMock = require("../test/library/contracts/YieldManagerMock.js");
var OracleManagerMock = require("../test/library/contracts/OracleManagerMock.js");
var OracleManagerChainlink = require("../test/library/contracts/OracleManagerChainlink.js");

var minSenderBalance = Globals.bnFromString("50000000000000000");

var minRecieverBalance = Globals.bnFromString("20000000000000000");

function topupBalanceIfLow(from, to_) {
  return LetOps.AwaitThen.let_(from.getBalance(), (function (senderBalance) {
                if (Globals.bnLt(senderBalance, minSenderBalance)) {
                  Js_exn.raiseError("WARNING - Sender doesn't have enough eth - need at least 0.05 ETH! (top up to over 1 ETH to be safe)");
                }
                return LetOps.Await.let_(to_.getBalance(), (function (recieverBalance) {
                              if (Globals.bnLt(recieverBalance, minRecieverBalance)) {
                                from.sendTransaction({
                                      to_: to_.address,
                                      value: minRecieverBalance
                                    });
                                return ;
                              }
                              
                            }));
              }));
}

function setOracleManagerPrice(longShort, marketIndex, admin) {
  return LetOps.AwaitThen.let_(longShort.oracleManagers(marketIndex), (function (oracleManagerAddr) {
                return LetOps.AwaitThen.let_(OracleManagerMock.at(oracleManagerAddr), (function (oracleManager) {
                              return LetOps.AwaitThen.let_(oracleManager.getLatestPrice(), (function (currentPrice) {
                                            var nextPrice = Globals.div(Globals.mul(currentPrice, Globals.bnFromInt(101)), Globals.bnFromInt(100));
                                            return oracleManager.connect(admin).setPrice(nextPrice);
                                          }));
                            }));
              }));
}

function updateSystemState(longShort, admin, marketIndex) {
  return LetOps.AwaitThen.let_(setOracleManagerPrice(longShort, marketIndex, admin), (function (param) {
                return LetOps.AwaitThen.let_(Helpers.increaseTime(5), (function (param) {
                              return longShort.connect(admin).updateSystemState(marketIndex);
                            }));
              }));
}

function mintAndApprove(paymentToken, amount, user, approvedAddress) {
  return LetOps.AwaitThen.let_(paymentToken.mint(user.address, amount), (function (param) {
                return paymentToken.connect(user).approve(approvedAddress, amount);
              }));
}

function stakeSynthLong(amount, longShort, marketIndex, user) {
  return LetOps.AwaitThen.let_(longShort.syntheticTokens(marketIndex, true), (function (longAddress) {
                return LetOps.AwaitThen.let_(SyntheticToken.at(longAddress), (function (synth) {
                              return LetOps.Await.let_(synth.balanceOf(user.address), (function (usersSyntheticTokenBalance) {
                                            if (Globals.bnGt(usersSyntheticTokenBalance, Globals.bnFromString("0"))) {
                                              synth.connect(user).stake(amount);
                                              return ;
                                            }
                                            
                                          }));
                            }));
              }));
}

function withdrawStakeSynthLong(longShort, staker, marketIndex, user) {
  return LetOps.AwaitThen.let_(longShort.syntheticTokens(marketIndex, true), (function (longAddress) {
                return LetOps.Await.let_(staker.userAmountStaked(longAddress, user.address), (function (longStakeBalance) {
                              if (Globals.bnGt(longStakeBalance, Globals.bnFromString("0"))) {
                                staker.connect(user).withdraw(marketIndex, true, longStakeBalance);
                                return ;
                              }
                              
                            }));
              }));
}

function stakeSynthShort(amount, longShort, marketIndex, user) {
  return LetOps.AwaitThen.let_(longShort.syntheticTokens(marketIndex, false), (function (shortAddress) {
                return LetOps.AwaitThen.let_(SyntheticToken.at(shortAddress), (function (synth) {
                              return LetOps.Await.let_(synth.balanceOf(user.address), (function (usersSyntheticTokenBalance) {
                                            if (Globals.bnGt(usersSyntheticTokenBalance, Globals.bnFromString("0"))) {
                                              synth.connect(user).stake(amount);
                                              return ;
                                            }
                                            
                                          }));
                            }));
              }));
}

function executeOnMarkets(marketIndexes, functionToExecute) {
  return Belt_Array.reduce(marketIndexes, Promise.resolve(undefined), (function (previousPromise, marketIndex) {
                return LetOps.AwaitThen.let_(previousPromise, (function (param) {
                              return Curry._1(functionToExecute, marketIndex);
                            }));
              }));
}

function redeemShortNextPriceWithSystemUpdate(amount, marketIndex, longShort, user, admin) {
  return LetOps.AwaitThen.let_(longShort.connect(user).redeemShortNextPrice(marketIndex, amount), (function (param) {
                return updateSystemState(longShort, admin, marketIndex);
              }));
}

function redeemNextPrice(amount, marketIndex, longShort, user, isLong) {
  var redeemFunction = isLong ? (function (prim0, prim1, prim2) {
        return prim0.redeemLongNextPrice(prim1, prim2);
      }) : (function (prim0, prim1, prim2) {
        return prim0.redeemShortNextPrice(prim1, prim2);
      });
  return Curry._3(redeemFunction, longShort.connect(user), marketIndex, amount);
}

function shiftStakeNextPriceWithSystemUpdate(amount, isShiftFromLong, marketIndex, longShort, staker, user, admin) {
  console.log("Amount to shift is", Globals.bnToString(amount));
  return LetOps.AwaitThen.let_(staker.connect(user).shiftTokens(amount, marketIndex, isShiftFromLong), (function (param) {
                return updateSystemState(longShort, admin, marketIndex);
              }));
}

function shiftFromShortNextPriceWithSystemUpdate(amount, marketIndex, longShort, user, admin) {
  return LetOps.AwaitThen.let_(longShort.connect(user).shiftPositionFromShortNextPrice(marketIndex, amount), (function (param) {
                return updateSystemState(longShort, admin, marketIndex);
              }));
}

function shiftFromLongNextPriceWithSystemUpdate(amount, marketIndex, longShort, user, admin) {
  return LetOps.AwaitThen.let_(longShort.connect(user).shiftPositionFromLongNextPrice(marketIndex, amount), (function (param) {
                return updateSystemState(longShort, admin, marketIndex);
              }));
}

function mintLongNextPriceWithSystemUpdate(amount, marketIndex, paymentToken, longShort, user, admin) {
  return LetOps.AwaitThen.let_(mintAndApprove(paymentToken, amount, user, longShort.address), (function (param) {
                return LetOps.AwaitThen.let_(longShort.connect(user).mintLongNextPrice(marketIndex, amount), (function (param) {
                              return updateSystemState(longShort, admin, marketIndex);
                            }));
              }));
}

function mintNextPrice(amount, marketIndex, paymentToken, longShort, user, isLong) {
  return LetOps.AwaitThen.let_(paymentToken.connect(user).approve(longShort.address, amount), (function (param) {
                var mintFunction = isLong ? (function (prim0, prim1, prim2) {
                      return prim0.mintLongNextPrice(prim1, prim2);
                    }) : (function (prim0, prim1, prim2) {
                      return prim0.mintShortNextPrice(prim1, prim2);
                    });
                return Curry._3(mintFunction, longShort.connect(user), marketIndex, amount);
              }));
}

function claimFloatForUser(marketIndexes, staker, user) {
  return LetOps.Await.let_(staker.connect(user).claimFloatCustom(marketIndexes), (function (param) {
                
              }));
}

function updateFloatPercentage(staker, admin, newFloatPercentage) {
  return LetOps.Await.let_(staker.connect(admin).changeFloatPercentage(newFloatPercentage), (function (param) {
                
              }));
}

function updateBalanceIncentiveParameters(staker, admin, marketIndex, balanceIncentiveCurve_exponent, balanceIncentiveCurve_equilibriumOffset, safeExponentBitShifting) {
  return LetOps.Await.let_(staker.connect(admin).changeBalanceIncentiveParameters(marketIndex, balanceIncentiveCurve_exponent, balanceIncentiveCurve_equilibriumOffset, safeExponentBitShifting), (function (param) {
                
              }));
}

function updateStakeWithdrawalFee(staker, admin, marketIndex, newMarketUnstakeFee_e18) {
  return LetOps.Await.let_(staker.connect(admin).changeUnstakeFee(marketIndex, newMarketUnstakeFee_e18), (function (param) {
                
              }));
}

function mintShortNextPriceWithSystemUpdate(amount, marketIndex, paymentToken, longShort, user, admin) {
  return LetOps.AwaitThen.let_(mintAndApprove(paymentToken, amount, user, longShort.address), (function (param) {
                return LetOps.AwaitThen.let_(longShort.connect(user).mintShortNextPrice(marketIndex, amount), (function (param) {
                              return updateSystemState(longShort, admin, marketIndex);
                            }));
              }));
}

function deployTestMarket(syntheticName, syntheticSymbol, longShortInstance, treasuryInstance, admin, paymentToken) {
  return LetOps.AwaitThen.let_(OracleManagerMock.make(admin.address, Globals.bnFromInt(2)), (function (oracleManager) {
                return LetOps.AwaitThen.let_(YieldManagerMock.make(longShortInstance.address, treasuryInstance.address, paymentToken.address), (function (yieldManager) {
                              return LetOps.AwaitThen.let_(paymentToken.MINTER_ROLE(), (function (mintRole) {
                                            return LetOps.AwaitThen.let_(paymentToken.grantRole(mintRole, yieldManager.address), (function (param) {
                                                          return LetOps.AwaitThen.let_(longShortInstance.connect(admin).createNewSyntheticMarket(syntheticName, syntheticSymbol, paymentToken.address, oracleManager.address, yieldManager.address), (function (param) {
                                                                        return LetOps.AwaitThen.let_(Helpers.increaseTime(2), (function (param) {
                                                                                      return LetOps.AwaitThen.let_(longShortInstance.latestMarket(), (function (latestMarket) {
                                                                                                    var kInitialMultiplier = Globals.bnFromString("1000000000000000000");
                                                                                                    var kPeriod = Globals.bnFromInt(0);
                                                                                                    return LetOps.AwaitThen.let_(mintAndApprove(paymentToken, Globals.bnFromString("2000000000000000000"), admin, longShortInstance.address), (function (param) {
                                                                                                                  var unstakeFee_e18 = Globals.bnFromString("5000000000000000");
                                                                                                                  var initialMarketSeedForEachMarketSide = Globals.bnFromString("1000000000000000000");
                                                                                                                  return longShortInstance.connect(admin).initializeMarket(latestMarket, kInitialMultiplier, kPeriod, unstakeFee_e18, initialMarketSeedForEachMarketSide, Globals.bnFromInt(5), Globals.bnFromInt(0), Globals.bnFromInt(1), CONSTANTS.tenToThe18);
                                                                                                                }));
                                                                                                  }));
                                                                                    }));
                                                                      }));
                                                        }));
                                          }));
                            }));
              }));
}

function deployMumbaiMarket(syntheticName, syntheticSymbol, longShortInstance, treasuryInstance, admin, paymentToken, oraclePriceFeedAddress) {
  return LetOps.AwaitThen.let_(OracleManagerChainlink.make(admin.address, oraclePriceFeedAddress), (function (oracleManager) {
                return LetOps.AwaitThen.let_(YieldManagerMock.make(longShortInstance.address, treasuryInstance.address, paymentToken.address), (function (yieldManager) {
                              return LetOps.AwaitThen.let_(paymentToken.MINTER_ROLE(), (function (mintRole) {
                                            return LetOps.AwaitThen.let_(paymentToken.grantRole(mintRole, yieldManager.address), (function (param) {
                                                          return LetOps.AwaitThen.let_(longShortInstance.connect(admin).createNewSyntheticMarket(syntheticName, syntheticSymbol, paymentToken.address, oracleManager.address, yieldManager.address), (function (param) {
                                                                        return LetOps.AwaitThen.let_(longShortInstance.latestMarket(), (function (latestMarket) {
                                                                                      var kInitialMultiplier = Globals.bnFromString("5000000000000000000");
                                                                                      var kPeriod = Globals.bnFromInt(864000);
                                                                                      return LetOps.AwaitThen.let_(mintAndApprove(paymentToken, Globals.bnFromString("2000000000000000000"), admin, longShortInstance.address), (function (param) {
                                                                                                    var unstakeFee_e18 = Globals.bnFromString("5000000000000000");
                                                                                                    var initialMarketSeedForEachMarketSide = Globals.bnFromString("1000000000000000000");
                                                                                                    return longShortInstance.connect(admin).initializeMarket(latestMarket, kInitialMultiplier, kPeriod, unstakeFee_e18, initialMarketSeedForEachMarketSide, Globals.bnFromInt(5), Globals.bnFromInt(0), Globals.bnFromInt(1), CONSTANTS.tenToThe18);
                                                                                                  }));
                                                                                    }));
                                                                      }));
                                                        }));
                                          }));
                            }));
              }));
}

function deployMumbaiMarketUpgradeable(syntheticName, syntheticSymbol, longShortInstance, stakerInstance, treasuryInstance, admin, paymentToken, oraclePriceFeedAddress, deployments, namedAccounts) {
  return LetOps.AwaitThen.let_(longShortInstance.latestMarket(), (function (latestMarket) {
                var newMarketIndex = latestMarket + 1 | 0;
                return LetOps.AwaitThen.let_(deployments.deploy("SS" + syntheticSymbol, {
                                contract: "SyntheticTokenUpgradeable",
                                from: namedAccounts.deployer,
                                log: true,
                                proxy: {
                                  proxyContract: "UUPSProxy",
                                  execute: {
                                    methodName: "initialize",
                                    args: [
                                      "Float Short " + syntheticName,
                                      "f\xe2\x86\x97\xef\xb8\x8f" + syntheticSymbol,
                                      longShortInstance.address,
                                      stakerInstance.address,
                                      newMarketIndex,
                                      false
                                    ]
                                  }
                                }
                              }), (function (syntheticTokenShort) {
                              return LetOps.AwaitThen.let_(deployments.deploy("SL" + syntheticSymbol, {
                                              from: namedAccounts.deployer,
                                              log: true,
                                              contract: "SyntheticTokenUpgradeable",
                                              proxy: {
                                                proxyContract: "UUPSProxy",
                                                execute: {
                                                  args: [
                                                    "Float Long " + syntheticName,
                                                    "f\xe2\x86\x98\xef\xb8\x8f" + syntheticSymbol,
                                                    longShortInstance.address,
                                                    stakerInstance.address,
                                                    newMarketIndex,
                                                    true
                                                  ],
                                                  methodName: "initialize"
                                                }
                                              }
                                            }), (function (syntheticTokenLong) {
                                            return LetOps.AwaitThen.let_(deployments.deploy("OracleManager" + syntheticSymbol, {
                                                            from: namedAccounts.deployer,
                                                            log: true,
                                                            contract: "OracleManagerChainlinkTestnet",
                                                            args: [
                                                              admin.address,
                                                              oraclePriceFeedAddress,
                                                              Globals.bnFromInt(27)
                                                            ]
                                                          }), (function (oracleManager) {
                                                          console.log("a.1");
                                                          console.log("a.3");
                                                          return LetOps.AwaitThen.let_(deployments.deploy("YieldManager" + syntheticSymbol, {
                                                                          from: namedAccounts.deployer,
                                                                          contract: "YieldManagerAave",
                                                                          log: true,
                                                                          proxy: {
                                                                            proxyContract: "UUPSProxy",
                                                                            execute: {
                                                                              methodName: "initialize",
                                                                              args: [
                                                                                longShortInstance.address,
                                                                                treasuryInstance.address,
                                                                                paymentToken.address,
                                                                                "0x639cB7b21ee2161DF9c882483C9D55c90c20Ca3e",
                                                                                "0x178113104fEcbcD7fF8669a0150721e231F0FD4B",
                                                                                "0xd41aE58e803Edf4304334acCE4DC4Ec34a63C644",
                                                                                0,
                                                                                admin.address
                                                                              ]
                                                                            }
                                                                          }
                                                                        }), (function (yieldManager) {
                                                                        console.log("a.4");
                                                                        console.log([
                                                                              yieldManager.address,
                                                                              syntheticTokenLong.address,
                                                                              syntheticTokenShort.address
                                                                            ]);
                                                                        return LetOps.AwaitThen.let_(longShortInstance.connect(admin).createNewSyntheticMarketExternalSyntheticTokens(syntheticName, syntheticSymbol, syntheticTokenLong.address, syntheticTokenShort.address, paymentToken.address, oracleManager.address, yieldManager.address), (function (param) {
                                                                                      console.log("a.5");
                                                                                      var kInitialMultiplier = Globals.bnFromString("5000000000000000000");
                                                                                      var kPeriod = Globals.bnFromInt(864000);
                                                                                      console.log("a.6");
                                                                                      var unstakeFee_e18 = Globals.bnFromString("5000000000000000");
                                                                                      var initialMarketSeedForEachMarketSide = Globals.bnFromString("1000000000000000000");
                                                                                      return LetOps.AwaitThen.let_(paymentToken.connect(admin).approve(longShortInstance.address, Globals.mul(initialMarketSeedForEachMarketSide, Globals.bnFromInt(3))), (function (param) {
                                                                                                    console.log("a.7");
                                                                                                    return longShortInstance.connect(admin).initializeMarket(newMarketIndex, kInitialMultiplier, kPeriod, unstakeFee_e18, initialMarketSeedForEachMarketSide, Globals.bnFromInt(5), Globals.bnFromInt(0), Globals.bnFromInt(1), CONSTANTS.tenToThe18);
                                                                                                  }));
                                                                                    }));
                                                                      }));
                                                        }));
                                          }));
                            }));
              }));
}

function deployFlipp3ningPolygon(longShortInstance, stakerInstance, treasuryInstance, admin, paymentToken, ethMarketCapOraclePriceFeedAddress, btcMarketCapOraclePriceFeedAddress, deployments, namedAccounts) {
  var syntheticName = "Flipp3ning";
  var syntheticSymbol = "F3";
  return LetOps.AwaitThen.let_(longShortInstance.latestMarket(), (function (latestMarket) {
                var newMarketIndex = latestMarket + 1 | 0;
                return LetOps.AwaitThen.let_(deployments.deploy("SSF3", {
                                contract: "SyntheticTokenUpgradeable",
                                from: namedAccounts.deployer,
                                log: true,
                                proxy: {
                                  proxyContract: "UUPSProxy",
                                  execute: {
                                    methodName: "initialize",
                                    args: [
                                      "Float Short Flipp3ning",
                                      "fsF3",
                                      longShortInstance.address,
                                      stakerInstance.address,
                                      newMarketIndex,
                                      false
                                    ]
                                  }
                                }
                              }), (function (syntheticTokenShort) {
                              return LetOps.AwaitThen.let_(deployments.deploy("SLF3", {
                                              from: namedAccounts.deployer,
                                              log: true,
                                              contract: "SyntheticTokenUpgradeable",
                                              proxy: {
                                                proxyContract: "UUPSProxy",
                                                execute: {
                                                  args: [
                                                    "Float Long Flipp3ning",
                                                    "flF3",
                                                    longShortInstance.address,
                                                    stakerInstance.address,
                                                    newMarketIndex,
                                                    true
                                                  ],
                                                  methodName: "initialize"
                                                }
                                              }
                                            }), (function (syntheticTokenLong) {
                                            return LetOps.AwaitThen.let_(deployments.deploy("OracleManagerF3", {
                                                            from: namedAccounts.deployer,
                                                            log: true,
                                                            contract: "OracleManagerFlipp3ning",
                                                            args: [
                                                              ethMarketCapOraclePriceFeedAddress,
                                                              btcMarketCapOraclePriceFeedAddress
                                                            ]
                                                          }), (function (oracleManager) {
                                                          console.log("a.1");
                                                          console.log("a.3");
                                                          return LetOps.AwaitThen.let_(deployments.deploy("YieldManagerF3", {
                                                                          from: namedAccounts.deployer,
                                                                          contract: "YieldManagerAave",
                                                                          log: true,
                                                                          proxy: {
                                                                            proxyContract: "UUPSProxy",
                                                                            execute: {
                                                                              methodName: "initialize",
                                                                              args: [
                                                                                longShortInstance.address,
                                                                                treasuryInstance.address,
                                                                                paymentToken.address,
                                                                                "0x27F8D03b3a2196956ED754baDc28D73be8830A6e",
                                                                                "0xd05e3E715d945B59290df0ae8eF85c1BdB684744",
                                                                                "0x357D51124f59836DeD84c8a1730D72B749d8BC23",
                                                                                0,
                                                                                admin.address
                                                                              ]
                                                                            }
                                                                          }
                                                                        }), (function (yieldManager) {
                                                                        console.log("a.4");
                                                                        console.log([
                                                                              yieldManager.address,
                                                                              syntheticTokenLong.address,
                                                                              syntheticTokenShort.address
                                                                            ]);
                                                                        return LetOps.AwaitThen.let_(longShortInstance.connect(admin).createNewSyntheticMarketExternalSyntheticTokens(syntheticName, syntheticSymbol, syntheticTokenLong.address, syntheticTokenShort.address, paymentToken.address, oracleManager.address, yieldManager.address), (function (param) {
                                                                                      console.log("a.5");
                                                                                      var kInitialMultiplier = Globals.bnFromString("2000000000000000000");
                                                                                      var kPeriod = Globals.bnFromInt(5184000);
                                                                                      console.log("a.6");
                                                                                      var unstakeFee_e18 = Globals.bnFromString("5000000000000000");
                                                                                      var initialMarketSeedForEachMarketSide = Globals.bnFromString("1000000000000000000");
                                                                                      return LetOps.AwaitThen.let_(paymentToken.connect(admin).approve(longShortInstance.address, Globals.mul(initialMarketSeedForEachMarketSide, Globals.bnFromInt(3))), (function (param) {
                                                                                                    console.log("a.7");
                                                                                                    return longShortInstance.connect(admin).initializeMarket(newMarketIndex, kInitialMultiplier, kPeriod, unstakeFee_e18, initialMarketSeedForEachMarketSide, Globals.bnFromInt(5), Globals.bnFromInt(0), CONSTANTS.tenToThe18, Globals.mul(Globals.bnFromInt(3), CONSTANTS.tenToThe18));
                                                                                                  }));
                                                                                    }));
                                                                      }));
                                                        }));
                                          }));
                            }));
              }));
}

function deploy3TH_Polygon(longShortInstance, stakerInstance, treasuryInstance, admin, paymentToken, ethUSDPriceFeedAddress, deployments, namedAccounts) {
  var syntheticName = "Ether 3x";
  var syntheticSymbol = "3TH";
  return LetOps.AwaitThen.let_(longShortInstance.latestMarket(), (function (latestMarket) {
                var newMarketIndex = latestMarket + 1 | 0;
                return LetOps.AwaitThen.let_(deployments.deploy("SS3TH", {
                                contract: "SyntheticTokenUpgradeable",
                                from: namedAccounts.deployer,
                                log: true,
                                proxy: {
                                  proxyContract: "UUPSProxy",
                                  execute: {
                                    methodName: "initialize",
                                    args: [
                                      "Float Short Ether 3x",
                                      "fs3TH",
                                      longShortInstance.address,
                                      stakerInstance.address,
                                      newMarketIndex,
                                      false
                                    ]
                                  }
                                }
                              }), (function (syntheticTokenShort) {
                              return LetOps.AwaitThen.let_(deployments.deploy("SL3TH", {
                                              from: namedAccounts.deployer,
                                              log: true,
                                              contract: "SyntheticTokenUpgradeable",
                                              proxy: {
                                                proxyContract: "UUPSProxy",
                                                execute: {
                                                  methodName: "initialize",
                                                  args: [
                                                    "Float Long Ether 3x",
                                                    "fl3TH",
                                                    longShortInstance.address,
                                                    stakerInstance.address,
                                                    newMarketIndex,
                                                    true
                                                  ]
                                                }
                                              }
                                            }), (function (syntheticTokenLong) {
                                            return LetOps.AwaitThen.let_(deployments.deploy("OracleManager3TH", {
                                                            from: namedAccounts.deployer,
                                                            log: true,
                                                            contract: "OracleManagerChainlink",
                                                            args: [
                                                              namedAccounts.admin,
                                                              ethUSDPriceFeedAddress
                                                            ]
                                                          }), (function (oracleManager) {
                                                          console.log("a.1");
                                                          console.log("a.3");
                                                          return LetOps.AwaitThen.let_(deployments.deploy("YieldManager3TH", {
                                                                          from: namedAccounts.deployer,
                                                                          contract: "YieldManagerAave",
                                                                          log: true,
                                                                          proxy: {
                                                                            proxyContract: "UUPSProxy",
                                                                            execute: {
                                                                              methodName: "initialize",
                                                                              args: [
                                                                                longShortInstance.address,
                                                                                treasuryInstance.address,
                                                                                paymentToken.address,
                                                                                "0x27F8D03b3a2196956ED754baDc28D73be8830A6e",
                                                                                "0xd05e3E715d945B59290df0ae8eF85c1BdB684744",
                                                                                "0x357D51124f59836DeD84c8a1730D72B749d8BC23",
                                                                                0,
                                                                                admin.address
                                                                              ]
                                                                            }
                                                                          }
                                                                        }), (function (yieldManager) {
                                                                        console.log("a.4");
                                                                        console.log([
                                                                              yieldManager.address,
                                                                              syntheticTokenLong.address,
                                                                              syntheticTokenShort.address
                                                                            ]);
                                                                        return LetOps.AwaitThen.let_(longShortInstance.connect(admin).createNewSyntheticMarketExternalSyntheticTokens(syntheticName, syntheticSymbol, syntheticTokenLong.address, syntheticTokenShort.address, paymentToken.address, oracleManager.address, yieldManager.address), (function (param) {
                                                                                      console.log("a.5");
                                                                                      var kInitialMultiplier = Globals.bnFromString("2000000000000000000");
                                                                                      var kPeriod = Globals.bnFromInt(5184000);
                                                                                      console.log("a.6");
                                                                                      var unstakeFee_e18 = Globals.bnFromString("5000000000000000");
                                                                                      var initialMarketSeedForEachMarketSide = Globals.bnFromString("1000000000000000000");
                                                                                      return LetOps.AwaitThen.let_(paymentToken.connect(admin).approve(longShortInstance.address, Globals.mul(initialMarketSeedForEachMarketSide, Globals.bnFromInt(3))), (function (param) {
                                                                                                    console.log("a.7");
                                                                                                    return longShortInstance.connect(admin).initializeMarket(newMarketIndex, kInitialMultiplier, kPeriod, unstakeFee_e18, initialMarketSeedForEachMarketSide, Globals.bnFromInt(5), Globals.bnFromInt(0), CONSTANTS.tenToThe18, Globals.mul(Globals.bnFromInt(3), CONSTANTS.tenToThe18));
                                                                                                  }));
                                                                                    }));
                                                                      }));
                                                        }));
                                          }));
                            }));
              }));
}

function addGemsNfts(gemCollectorNFT, tokenUri, minGems) {
  return LetOps.AwaitThen.let_(ethers.getSigners(), (function (loadedAccounts) {
                var admin = loadedAccounts[1];
                console.log("deploying gems nft");
                return gemCollectorNFT.connect(admin).addToken(tokenUri, minGems);
              }));
}

function mintGemsNft(gemCollectorNFT, levelId, receiver) {
  console.log("minting a gems nft");
  return LetOps.AwaitThen.let_(ethers.getSigners(), (function (loadedAccounts) {
                var user1 = loadedAccounts[2];
                return gemCollectorNFT.connect(user1).mintNFT(levelId, receiver);
              }));
}

function deployMarketOnPolygon(longShortInstance, stakerInstance, treasuryInstance, admin, paymentToken, chainlinkOricleFeedAddress, deployments, namedAccounts, syntheticName, syntheticSymbol, leverageAmount, expectedMarketIndex, fundingRateMultiplier_e18) {
  return LetOps.AwaitThen.let_(longShortInstance.latestMarket(), (function (latestMarket) {
                var newMarketIndex = latestMarket + 1 | 0;
                if (newMarketIndex !== expectedMarketIndex) {
                  Js_exn.raiseError("Wrong market Index: " + (String(newMarketIndex) + ("(actuall index) != " + (String(expectedMarketIndex) + "(expected index)"))));
                }
                return LetOps.AwaitThen.let_(deployments.deploy("SS" + syntheticSymbol, {
                                contract: "SyntheticTokenUpgradeable",
                                from: namedAccounts.deployer,
                                log: true,
                                proxy: {
                                  proxyContract: "UUPSProxy",
                                  execute: {
                                    methodName: "initialize",
                                    args: [
                                      "Float Short " + syntheticName,
                                      "fs" + syntheticSymbol,
                                      longShortInstance.address,
                                      stakerInstance.address,
                                      newMarketIndex,
                                      false
                                    ]
                                  }
                                }
                              }), (function (syntheticTokenShort) {
                              return LetOps.AwaitThen.let_(deployments.deploy("SL" + syntheticSymbol, {
                                              from: namedAccounts.deployer,
                                              log: true,
                                              contract: "SyntheticTokenUpgradeable",
                                              proxy: {
                                                proxyContract: "UUPSProxy",
                                                execute: {
                                                  methodName: "initialize",
                                                  args: [
                                                    "Float Long " + syntheticName,
                                                    "fl" + syntheticSymbol,
                                                    longShortInstance.address,
                                                    stakerInstance.address,
                                                    newMarketIndex,
                                                    true
                                                  ]
                                                }
                                              }
                                            }), (function (syntheticTokenLong) {
                                            return LetOps.AwaitThen.let_(deployments.deploy("OracleManager" + syntheticSymbol, {
                                                            from: namedAccounts.deployer,
                                                            log: true,
                                                            contract: "OracleManagerChainlink",
                                                            args: [
                                                              namedAccounts.admin,
                                                              chainlinkOricleFeedAddress
                                                            ]
                                                          }), (function (oracleManager) {
                                                          console.log("a.1");
                                                          console.log("a.3");
                                                          return LetOps.AwaitThen.let_(deployments.deploy("YieldManager" + syntheticSymbol, {
                                                                          from: namedAccounts.deployer,
                                                                          contract: "YieldManagerAaveBasic",
                                                                          log: true,
                                                                          proxy: {
                                                                            proxyContract: "UUPSProxy",
                                                                            execute: {
                                                                              methodName: "initialize",
                                                                              args: [
                                                                                longShortInstance.address,
                                                                                treasuryInstance.address,
                                                                                paymentToken.address,
                                                                                "0x27F8D03b3a2196956ED754baDc28D73be8830A6e",
                                                                                "0xd05e3E715d945B59290df0ae8eF85c1BdB684744",
                                                                                "0x357D51124f59836DeD84c8a1730D72B749d8BC23",
                                                                                0,
                                                                                admin.address
                                                                              ]
                                                                            }
                                                                          }
                                                                        }), (function (yieldManager) {
                                                                        console.log("a.4");
                                                                        console.log([
                                                                              yieldManager.address,
                                                                              syntheticTokenLong.address,
                                                                              syntheticTokenShort.address
                                                                            ]);
                                                                        return LetOps.AwaitThen.let_(longShortInstance.connect(admin).createNewSyntheticMarketExternalSyntheticTokens(syntheticName, syntheticSymbol, syntheticTokenLong.address, syntheticTokenShort.address, paymentToken.address, oracleManager.address, yieldManager.address), (function (param) {
                                                                                      console.log("a.5");
                                                                                      var kInitialMultiplier = Globals.bnFromString("1000000000000000000");
                                                                                      var kPeriod = Globals.bnFromInt(0);
                                                                                      console.log("a.6");
                                                                                      var unstakeFee_e18 = Globals.bnFromString("5000000000000000");
                                                                                      var initialMarketSeedForEachMarketSide = Globals.bnFromString("1000000000000000000");
                                                                                      return LetOps.AwaitThen.let_(paymentToken.connect(admin).approve(longShortInstance.address, Globals.mul(initialMarketSeedForEachMarketSide, Globals.bnFromInt(3))), (function (param) {
                                                                                                    console.log("a.7 - seeding from", admin);
                                                                                                    return LetOps.AwaitThen.let_(longShortInstance.connect(admin).initializeMarket(newMarketIndex, kInitialMultiplier, kPeriod, unstakeFee_e18, initialMarketSeedForEachMarketSide, Globals.bnFromInt(5), Globals.bnFromInt(0), CONSTANTS.tenToThe18, Globals.mul(Globals.bnFromInt(leverageAmount), CONSTANTS.tenToThe18)), (function (param) {
                                                                                                                  console.log("market launched, setting funding rate");
                                                                                                                  return longShortInstance.connect(admin).changeMarketFundingRateMultiplier(newMarketIndex, fundingRateMultiplier_e18);
                                                                                                                }));
                                                                                                  }));
                                                                                    }));
                                                                      }));
                                                        }));
                                          }));
                            }));
              }));
}

function deployAaveDAIYieldManager(deployments, syntheticSymbol, deployer, longShortInstanceAddress, treasuryInstanceAddress, paymentTokenAddress, admin) {
  return deployments.deploy("YieldManager" + syntheticSymbol, {
              from: deployer,
              contract: "DefaultYieldManagerAave",
              log: true,
              proxy: {
                proxyContract: "UUPSProxy",
                execute: {
                  methodName: "initialize",
                  args: [
                    longShortInstanceAddress,
                    treasuryInstanceAddress,
                    paymentTokenAddress,
                    "0x47AFa96Cdc9fAb46904A55a6ad4bf6660B53c38a",
                    "0xb6A86025F0FE1862B372cb0ca18CE3EDe02A318f",
                    "0x01D83Fe6A10D2f2B7AF17034343746188272cAc9",
                    0,
                    admin.address
                  ]
                }
              }
            });
}

function deployBenqiDAIYieldManager(deployments, syntheticSymbol, deployer, longShortInstanceAddress, treasuryInstanceAddress, paymentTokenAddress, admin) {
  return deployments.deploy("YieldManager" + syntheticSymbol, {
              from: deployer,
              contract: "DefaultYieldManagerCompound",
              log: true,
              proxy: {
                proxyContract: "UUPSProxy",
                execute: {
                  methodName: "initialize",
                  args: [
                    longShortInstanceAddress,
                    treasuryInstanceAddress,
                    paymentTokenAddress,
                    "0x835866d37AFB8CB8F8334dCCdaf66cf01832Ff5D",
                    admin.address
                  ]
                }
              }
            });
}

function deployAvalancheMarket(longShortInstance, stakerInstance, treasuryInstance, admin, paymentToken, oraclePriceFeedAddress, deployments, namedAccounts, syntheticName, syntheticSymbol, fundingRateMultiplier, marketLeverage, expectedMarketIndex, yieldManagerVariant) {
  return LetOps.AwaitThen.let_(longShortInstance.latestMarket(), (function (latestMarket) {
                var newMarketIndex = latestMarket + 1 | 0;
                if (newMarketIndex !== expectedMarketIndex) {
                  Js_exn.raiseError("Wrong market Index: " + (String(newMarketIndex) + ("(actuall index) != " + (String(expectedMarketIndex) + "(expected index)"))));
                }
                return LetOps.AwaitThen.let_(deployments.deploy("SS" + syntheticSymbol, {
                                contract: "SyntheticTokenUpgradeable",
                                from: namedAccounts.deployer,
                                log: true,
                                proxy: {
                                  proxyContract: "UUPSProxy",
                                  execute: {
                                    methodName: "initialize",
                                    args: [
                                      "Float Short " + syntheticName,
                                      "fs" + syntheticSymbol,
                                      longShortInstance.address,
                                      stakerInstance.address,
                                      newMarketIndex,
                                      false
                                    ]
                                  }
                                }
                              }), (function (syntheticTokenShort) {
                              return LetOps.AwaitThen.let_(deployments.deploy("SL" + syntheticSymbol, {
                                              from: namedAccounts.deployer,
                                              log: true,
                                              contract: "SyntheticTokenUpgradeable",
                                              proxy: {
                                                proxyContract: "UUPSProxy",
                                                execute: {
                                                  methodName: "initialize",
                                                  args: [
                                                    "Float Long " + syntheticName,
                                                    "fl" + syntheticSymbol,
                                                    longShortInstance.address,
                                                    stakerInstance.address,
                                                    newMarketIndex,
                                                    true
                                                  ]
                                                }
                                              }
                                            }), (function (syntheticTokenLong) {
                                            console.log("Oracle manager!", oraclePriceFeedAddress);
                                            return LetOps.AwaitThen.let_(deployments.deploy("OracleManager" + syntheticSymbol, {
                                                            from: namedAccounts.deployer,
                                                            log: true,
                                                            contract: "OracleManagerChainlink",
                                                            args: [
                                                              namedAccounts.admin,
                                                              oraclePriceFeedAddress
                                                            ]
                                                          }), (function (oracleManager) {
                                                          console.log("a.1");
                                                          console.log("a.2");
                                                          console.log("a.3");
                                                          return LetOps.AwaitThen.let_(yieldManagerVariant ? deployBenqiDAIYieldManager(deployments, syntheticSymbol, namedAccounts.deployer, longShortInstance.address, treasuryInstance.address, paymentToken.address, admin) : deployAaveDAIYieldManager(deployments, syntheticSymbol, namedAccounts.deployer, longShortInstance.address, treasuryInstance.address, paymentToken.address, admin), (function (yieldManager) {
                                                                        console.log("a.4");
                                                                        console.log([
                                                                              yieldManager.address,
                                                                              syntheticTokenLong.address,
                                                                              syntheticTokenShort.address
                                                                            ]);
                                                                        return LetOps.AwaitThen.let_(longShortInstance.connect(admin).createNewSyntheticMarketExternalSyntheticTokens(syntheticName, syntheticSymbol, syntheticTokenLong.address, syntheticTokenShort.address, paymentToken.address, oracleManager.address, yieldManager.address), (function (param) {
                                                                                      console.log("a.5");
                                                                                      var kInitialMultiplier = Globals.bnFromString("2000000000000000000");
                                                                                      var kPeriod = Globals.bnFromInt(5184000);
                                                                                      console.log("a.6");
                                                                                      var unstakeFee_e18 = Globals.bnFromString("5000000000000000");
                                                                                      var initialMarketSeedForEachMarketSide = Globals.bnFromString("1000000000000000000");
                                                                                      return LetOps.AwaitThen.let_(paymentToken.connect(admin).approve(longShortInstance.address, Globals.mul(initialMarketSeedForEachMarketSide, Globals.bnFromInt(3))), (function (param) {
                                                                                                    console.log("a.7");
                                                                                                    return LetOps.AwaitThen.let_(longShortInstance.connect(admin).initializeMarket(newMarketIndex, kInitialMultiplier, kPeriod, unstakeFee_e18, initialMarketSeedForEachMarketSide, Globals.bnFromInt(5), Globals.bnFromInt(0), CONSTANTS.tenToThe18, Globals.mul(Globals.bnFromInt(marketLeverage), CONSTANTS.tenToThe18)), (function (param) {
                                                                                                                  console.log("market launched, setting the funding rate");
                                                                                                                  return longShortInstance.connect(admin).changeMarketFundingRateMultiplier(newMarketIndex, fundingRateMultiplier);
                                                                                                                }));
                                                                                                  }));
                                                                                    }));
                                                                      }));
                                                        }));
                                          }));
                            }));
              }));
}

exports.minSenderBalance = minSenderBalance;
exports.minRecieverBalance = minRecieverBalance;
exports.topupBalanceIfLow = topupBalanceIfLow;
exports.setOracleManagerPrice = setOracleManagerPrice;
exports.updateSystemState = updateSystemState;
exports.mintAndApprove = mintAndApprove;
exports.stakeSynthLong = stakeSynthLong;
exports.withdrawStakeSynthLong = withdrawStakeSynthLong;
exports.stakeSynthShort = stakeSynthShort;
exports.executeOnMarkets = executeOnMarkets;
exports.redeemShortNextPriceWithSystemUpdate = redeemShortNextPriceWithSystemUpdate;
exports.redeemNextPrice = redeemNextPrice;
exports.shiftStakeNextPriceWithSystemUpdate = shiftStakeNextPriceWithSystemUpdate;
exports.shiftFromShortNextPriceWithSystemUpdate = shiftFromShortNextPriceWithSystemUpdate;
exports.shiftFromLongNextPriceWithSystemUpdate = shiftFromLongNextPriceWithSystemUpdate;
exports.mintLongNextPriceWithSystemUpdate = mintLongNextPriceWithSystemUpdate;
exports.mintNextPrice = mintNextPrice;
exports.claimFloatForUser = claimFloatForUser;
exports.updateFloatPercentage = updateFloatPercentage;
exports.updateBalanceIncentiveParameters = updateBalanceIncentiveParameters;
exports.updateStakeWithdrawalFee = updateStakeWithdrawalFee;
exports.mintShortNextPriceWithSystemUpdate = mintShortNextPriceWithSystemUpdate;
exports.deployTestMarket = deployTestMarket;
exports.deployMumbaiMarket = deployMumbaiMarket;
exports.deployMumbaiMarketUpgradeable = deployMumbaiMarketUpgradeable;
exports.deployFlipp3ningPolygon = deployFlipp3ningPolygon;
exports.deploy3TH_Polygon = deploy3TH_Polygon;
exports.addGemsNfts = addGemsNfts;
exports.mintGemsNft = mintGemsNft;
exports.deployMarketOnPolygon = deployMarketOnPolygon;
exports.deployAaveDAIYieldManager = deployAaveDAIYieldManager;
exports.deployBenqiDAIYieldManager = deployBenqiDAIYieldManager;
exports.deployAvalancheMarket = deployAvalancheMarket;
/* minSenderBalance Not a pure module */
