// Generated by ReScript, PLEASE EDIT WITH CARE
'use strict';

var Curry = require("rescript/lib/js/curry.js");
var LetOps = require("../test/library/LetOps.js");
var Globals = require("../test/library/Globals.js");
var TestnetDeployHelpers = require("./helpers/TestnetDeployHelpers.js");
var ProtocolInteractionHelpers = require("./helpers/ProtocolInteractionHelpers.js");

var btcUSDPriceFeedAddress = ethers.utils.getAddress("0x65E8d79f3e8e36fE48eC31A2ae935e92F5bBF529");

var ethUSDPriceFeedAddress = ethers.utils.getAddress("0xB8C458C957a6e6ca7Cc53eD95bEA548c52AFaA24");

var fantomUsdPriceFeedAddress = ethers.utils.getAddress("0xe04676B9A9A2973BCb0D1478b5E1E9098BBB7f3D");

function runFantomTestnetTransactions(param, deploymentArgs) {
  var treasury = param.treasury;
  var paymentToken = param.paymentToken;
  var longShort = param.longShort;
  var staker = param.staker;
  return LetOps.AwaitThen.let_(Curry._1(deploymentArgs.getNamedAccounts, undefined), (function (namedAccounts) {
                return LetOps.AwaitThen.let_(ethers.getSigners(), (function (loadedAccounts) {
                              var admin = loadedAccounts[1];
                              var user1 = loadedAccounts[2];
                              console.log("deploying markets");
                              return LetOps.AwaitThen.let_(TestnetDeployHelpers.deployFantomTestnetMarketUpgradeable("ETH Market", "ETH", longShort, staker, treasury, admin, paymentToken, ethUSDPriceFeedAddress, deploymentArgs.deployments, namedAccounts), (function (param) {
                                            return LetOps.AwaitThen.let_(TestnetDeployHelpers.deployFantomTestnetMarketUpgradeable("FANTOM Market", "FTM", longShort, staker, treasury, admin, paymentToken, fantomUsdPriceFeedAddress, deploymentArgs.deployments, namedAccounts), (function (param) {
                                                          return LetOps.AwaitThen.let_(TestnetDeployHelpers.deployFantomTestnetMarketUpgradeable("BTC Market", "BTC", longShort, staker, treasury, admin, paymentToken, btcUSDPriceFeedAddress, deploymentArgs.deployments, namedAccounts), (function (param) {
                                                                        var initialMarkets = [
                                                                          1,
                                                                          2,
                                                                          3
                                                                        ];
                                                                        var longMintAmount = Globals.bnFromString("10000000000000000000");
                                                                        var shortMintAmount = Globals.div(longMintAmount, Globals.bnFromInt(2));
                                                                        var redeemShortAmount = Globals.div(shortMintAmount, Globals.bnFromInt(2));
                                                                        var longStakeAmount = Globals.div(longMintAmount, Globals.twoBn);
                                                                        console.log("Executing Long Mints");
                                                                        return LetOps.AwaitThen.let_(ProtocolInteractionHelpers.executeOnMarkets(initialMarkets, (function (__x) {
                                                                                          return ProtocolInteractionHelpers.mintNextPrice(longMintAmount, __x, paymentToken, longShort, user1, true);
                                                                                        })), (function (param) {
                                                                                      console.log("Executing Short Mints");
                                                                                      return LetOps.AwaitThen.let_(ProtocolInteractionHelpers.executeOnMarkets(initialMarkets, (function (__x) {
                                                                                                        return ProtocolInteractionHelpers.mintNextPrice(longMintAmount, __x, paymentToken, longShort, user1, false);
                                                                                                      })), (function (param) {
                                                                                                    return LetOps.AwaitThen.let_(Globals.sleep(27000), (function (param) {
                                                                                                                  console.log("Executing Short Position Redeem");
                                                                                                                  return LetOps.AwaitThen.let_(ProtocolInteractionHelpers.executeOnMarkets(initialMarkets, (function (__x) {
                                                                                                                                    return ProtocolInteractionHelpers.redeemNextPrice(redeemShortAmount, __x, longShort, user1, false);
                                                                                                                                  })), (function (param) {
                                                                                                                                return LetOps.AwaitThen.let_(Globals.sleep(27000), (function (param) {
                                                                                                                                              console.log("Staking long position");
                                                                                                                                              return ProtocolInteractionHelpers.executeOnMarkets(initialMarkets, (function (__x) {
                                                                                                                                                            return ProtocolInteractionHelpers.stakeSynthLong(longStakeAmount, longShort, __x, user1);
                                                                                                                                                          }));
                                                                                                                                            }));
                                                                                                                              }));
                                                                                                                }));
                                                                                                  }));
                                                                                    }));
                                                                      }));
                                                        }));
                                          }));
                            }));
              }));
}

exports.btcUSDPriceFeedAddress = btcUSDPriceFeedAddress;
exports.ethUSDPriceFeedAddress = ethUSDPriceFeedAddress;
exports.fantomUsdPriceFeedAddress = fantomUsdPriceFeedAddress;
exports.runFantomTestnetTransactions = runFantomTestnetTransactions;
/* btcUSDPriceFeedAddress Not a pure module */
