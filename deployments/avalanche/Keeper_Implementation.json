{
  "address": "0x661c9A1aD0DC7C7F1D8DA87239C952479FC56dF2",
  "abi": [
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "previousAdmin",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "newAdmin",
          "type": "address"
        }
      ],
      "name": "AdminChanged",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "beacon",
          "type": "address"
        }
      ],
      "name": "BeaconUpgraded",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "previousAdminRole",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "newAdminRole",
          "type": "bytes32"
        }
      ],
      "name": "RoleAdminChanged",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "sender",
          "type": "address"
        }
      ],
      "name": "RoleGranted",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "sender",
          "type": "address"
        }
      ],
      "name": "RoleRevoked",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "implementation",
          "type": "address"
        }
      ],
      "name": "Upgraded",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "ADMIN_ROLE",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "DEFAULT_ADMIN_ROLE",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "UPGRADER_ROLE",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint32",
          "name": "marketIndex",
          "type": "uint32"
        }
      ],
      "name": "areTherePendingNextPriceActions",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        }
      ],
      "name": "getRoleAdmin",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "grantRole",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "hasRole",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_admin",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_longShort",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_staker",
          "type": "address"
        }
      ],
      "name": "initialize",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint32",
          "name": "marketIndex",
          "type": "uint32"
        }
      ],
      "name": "isPriceChangeOverThreshold",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint32",
          "name": "marketIndex",
          "type": "uint32"
        }
      ],
      "name": "isPriceChangeOverThresholdNotView",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        },
        {
          "internalType": "int256",
          "name": "",
          "type": "int256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "longShortAddress",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint32",
          "name": "marketIndex",
          "type": "uint32"
        }
      ],
      "name": "pendingNextPriceActionsBreakdown",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint32",
          "name": "marketIndex",
          "type": "uint32"
        }
      ],
      "name": "pendingNextPriceActionsBreakdownCall",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint32",
          "name": "",
          "type": "uint32"
        }
      ],
      "name": "percentChangeThreshold",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "renounceRole",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "revokeRole",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint32",
          "name": "marketIndex",
          "type": "uint32"
        }
      ],
      "name": "shouldUpdateOracle",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint32",
          "name": "marketIndex",
          "type": "uint32"
        }
      ],
      "name": "shouldUpdateOracleNotView",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint32",
          "name": "marketIndex",
          "type": "uint32"
        }
      ],
      "name": "shouldUpdateOracleNotViewBreakdown",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        },
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        },
        {
          "internalType": "int256",
          "name": "",
          "type": "int256"
        },
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint32",
          "name": "marketIndex",
          "type": "uint32"
        }
      ],
      "name": "shouldUpdateOracleNotViewBreakdownWithUpdateIndex",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        },
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        },
        {
          "internalType": "int256",
          "name": "",
          "type": "int256"
        },
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "stakerAddress",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes4",
          "name": "interfaceId",
          "type": "bytes4"
        }
      ],
      "name": "supportsInterface",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint32",
          "name": "marketIndex",
          "type": "uint32"
        },
        {
          "internalType": "uint256",
          "name": "heartbeatInSeconds",
          "type": "uint256"
        }
      ],
      "name": "updateHeartbeatThresholdForMarket",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint32",
          "name": "marketIndex",
          "type": "uint32"
        },
        {
          "internalType": "uint256",
          "name": "_percentChangeThreshold",
          "type": "uint256"
        }
      ],
      "name": "updatePercentChangeThresholdForMarket",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint32",
          "name": "",
          "type": "uint32"
        }
      ],
      "name": "updateTimeThresholdInSeconds",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newImplementation",
          "type": "address"
        }
      ],
      "name": "upgradeTo",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newImplementation",
          "type": "address"
        },
        {
          "internalType": "bytes",
          "name": "data",
          "type": "bytes"
        }
      ],
      "name": "upgradeToAndCall",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint32",
          "name": "marketIndex",
          "type": "uint32"
        }
      ],
      "name": "wasLastUpdateOlderThanThreshold",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    }
  ],
  "transactionHash": "0xf60350159c55454552bc3be83a22c271d87c53e7a364153c0443bc209b5b8360",
  "receipt": {
    "to": null,
    "from": "0xc3B5E35EE12b139C64e95b1e846BDB217A7806BF",
    "contractAddress": "0x661c9A1aD0DC7C7F1D8DA87239C952479FC56dF2",
    "transactionIndex": 0,
    "gasUsed": "2137496",
    "logsBloom": "0x
    "blockHash": "0x6aba8b6c71b418ef5befc21534791672ecb2bfa0815e48f01eabeb1c64c822b9",
    "transactionHash": "0xf60350159c55454552bc3be83a22c271d87c53e7a364153c0443bc209b5b8360",
    "logs": [],
    "blockNumber": 7888465,
    "cumulativeGasUsed": "2137496",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "solcInputHash": "8eb3db1ebad73600fe854988a31b02ce",
  "metadata": "{\"compiler\":{\"version\":\"0.8.10+commit.fc410830\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"previousAdmin\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"newAdmin\",\"type\":\"address\"}],\"name\":\"AdminChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"beacon\",\"type\":\"address\"}],\"name\":\"BeaconUpgraded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"previousAdminRole\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"newAdminRole\",\"type\":\"bytes32\"}],\"name\":\"RoleAdminChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"RoleGranted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"RoleRevoked\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"implementation\",\"type\":\"address\"}],\"name\":\"Upgraded\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"ADMIN_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"DEFAULT_ADMIN_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"UPGRADER_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint32\",\"name\":\"marketIndex\",\"type\":\"uint32\"}],\"name\":\"areTherePendingNextPriceActions\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"}],\"name\":\"getRoleAdmin\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"grantRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"hasRole\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_admin\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_longShort\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_staker\",\"type\":\"address\"}],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint32\",\"name\":\"marketIndex\",\"type\":\"uint32\"}],\"name\":\"isPriceChangeOverThreshold\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint32\",\"name\":\"marketIndex\",\"type\":\"uint32\"}],\"name\":\"isPriceChangeOverThresholdNotView\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"},{\"internalType\":\"int256\",\"name\":\"\",\"type\":\"int256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"longShortAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint32\",\"name\":\"marketIndex\",\"type\":\"uint32\"}],\"name\":\"pendingNextPriceActionsBreakdown\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint32\",\"name\":\"marketIndex\",\"type\":\"uint32\"}],\"name\":\"pendingNextPriceActionsBreakdownCall\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint32\",\"name\":\"\",\"type\":\"uint32\"}],\"name\":\"percentChangeThreshold\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"renounceRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"revokeRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint32\",\"name\":\"marketIndex\",\"type\":\"uint32\"}],\"name\":\"shouldUpdateOracle\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint32\",\"name\":\"marketIndex\",\"type\":\"uint32\"}],\"name\":\"shouldUpdateOracleNotView\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint32\",\"name\":\"marketIndex\",\"type\":\"uint32\"}],\"name\":\"shouldUpdateOracleNotViewBreakdown\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"},{\"internalType\":\"int256\",\"name\":\"\",\"type\":\"int256\"},{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint32\",\"name\":\"marketIndex\",\"type\":\"uint32\"}],\"name\":\"shouldUpdateOracleNotViewBreakdownWithUpdateIndex\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"},{\"internalType\":\"int256\",\"name\":\"\",\"type\":\"int256\"},{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"stakerAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint32\",\"name\":\"marketIndex\",\"type\":\"uint32\"},{\"internalType\":\"uint256\",\"name\":\"heartbeatInSeconds\",\"type\":\"uint256\"}],\"name\":\"updateHeartbeatThresholdForMarket\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint32\",\"name\":\"marketIndex\",\"type\":\"uint32\"},{\"internalType\":\"uint256\",\"name\":\"_percentChangeThreshold\",\"type\":\"uint256\"}],\"name\":\"updatePercentChangeThresholdForMarket\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint32\",\"name\":\"\",\"type\":\"uint32\"}],\"name\":\"updateTimeThresholdInSeconds\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newImplementation\",\"type\":\"address\"}],\"name\":\"upgradeTo\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newImplementation\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"upgradeToAndCall\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint32\",\"name\":\"marketIndex\",\"type\":\"uint32\"}],\"name\":\"wasLastUpdateOlderThanThreshold\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"getRoleAdmin(bytes32)\":{\"details\":\"Returns the admin role that controls `role`. See {grantRole} and {revokeRole}. To change a role's admin, use {_setRoleAdmin}.\"},\"grantRole(bytes32,address)\":{\"details\":\"Grants `role` to `account`. If `account` had not been already granted `role`, emits a {RoleGranted} event. Requirements: - the caller must have ``role``'s admin role.\"},\"hasRole(bytes32,address)\":{\"details\":\"Returns `true` if `account` has been granted `role`.\"},\"renounceRole(bytes32,address)\":{\"details\":\"Revokes `role` from the calling account. Roles are often managed via {grantRole} and {revokeRole}: this function's purpose is to provide a mechanism for accounts to lose their privileges if they are compromised (such as when a trusted device is misplaced). If the calling account had been revoked `role`, emits a {RoleRevoked} event. Requirements: - the caller must be `account`.\"},\"revokeRole(bytes32,address)\":{\"details\":\"Revokes `role` from `account`. If `account` had been granted `role`, emits a {RoleRevoked} event. Requirements: - the caller must have ``role``'s admin role.\"},\"supportsInterface(bytes4)\":{\"details\":\"See {IERC165-supportsInterface}.\"},\"upgradeTo(address)\":{\"details\":\"Upgrade the implementation of the proxy to `newImplementation`. Calls {_authorizeUpgrade}. Emits an {Upgraded} event.\"},\"upgradeToAndCall(address,bytes)\":{\"details\":\"Upgrade the implementation of the proxy to `newImplementation`, and subsequently execute the function call encoded in `data`. Calls {_authorizeUpgrade}. Emits an {Upgraded} event.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/KeeperExperiment.sol\":\"KeeperExperiment\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.0 (access/AccessControl.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IAccessControlUpgradeable.sol\\\";\\nimport \\\"../utils/ContextUpgradeable.sol\\\";\\nimport \\\"../utils/StringsUpgradeable.sol\\\";\\nimport \\\"../utils/introspection/ERC165Upgradeable.sol\\\";\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Contract module that allows children to implement role-based access\\n * control mechanisms. This is a lightweight version that doesn't allow enumerating role\\n * members except through off-chain means by accessing the contract event logs. Some\\n * applications may benefit from on-chain enumerability, for those cases see\\n * {AccessControlEnumerable}.\\n *\\n * Roles are referred to by their `bytes32` identifier. These should be exposed\\n * in the external API and be unique. The best way to achieve this is by\\n * using `public constant` hash digests:\\n *\\n * ```\\n * bytes32 public constant MY_ROLE = keccak256(\\\"MY_ROLE\\\");\\n * ```\\n *\\n * Roles can be used to represent a set of permissions. To restrict access to a\\n * function call, use {hasRole}:\\n *\\n * ```\\n * function foo() public {\\n *     require(hasRole(MY_ROLE, msg.sender));\\n *     ...\\n * }\\n * ```\\n *\\n * Roles can be granted and revoked dynamically via the {grantRole} and\\n * {revokeRole} functions. Each role has an associated admin role, and only\\n * accounts that have a role's admin role can call {grantRole} and {revokeRole}.\\n *\\n * By default, the admin role for all roles is `DEFAULT_ADMIN_ROLE`, which means\\n * that only accounts with this role will be able to grant or revoke other\\n * roles. More complex role relationships can be created by using\\n * {_setRoleAdmin}.\\n *\\n * WARNING: The `DEFAULT_ADMIN_ROLE` is also its own admin: it has permission to\\n * grant and revoke this role. Extra precautions should be taken to secure\\n * accounts that have been granted it.\\n */\\nabstract contract AccessControlUpgradeable is Initializable, ContextUpgradeable, IAccessControlUpgradeable, ERC165Upgradeable {\\n    function __AccessControl_init() internal initializer {\\n        __Context_init_unchained();\\n        __ERC165_init_unchained();\\n        __AccessControl_init_unchained();\\n    }\\n\\n    function __AccessControl_init_unchained() internal initializer {\\n    }\\n    struct RoleData {\\n        mapping(address => bool) members;\\n        bytes32 adminRole;\\n    }\\n\\n    mapping(bytes32 => RoleData) private _roles;\\n\\n    bytes32 public constant DEFAULT_ADMIN_ROLE = 0x00;\\n\\n    /**\\n     * @dev Modifier that checks that an account has a specific role. Reverts\\n     * with a standardized message including the required role.\\n     *\\n     * The format of the revert reason is given by the following regular expression:\\n     *\\n     *  /^AccessControl: account (0x[0-9a-f]{40}) is missing role (0x[0-9a-f]{64})$/\\n     *\\n     * _Available since v4.1._\\n     */\\n    modifier onlyRole(bytes32 role) {\\n        _checkRole(role, _msgSender());\\n        _;\\n    }\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IAccessControlUpgradeable).interfaceId || super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @dev Returns `true` if `account` has been granted `role`.\\n     */\\n    function hasRole(bytes32 role, address account) public view override returns (bool) {\\n        return _roles[role].members[account];\\n    }\\n\\n    /**\\n     * @dev Revert with a standard message if `account` is missing `role`.\\n     *\\n     * The format of the revert reason is given by the following regular expression:\\n     *\\n     *  /^AccessControl: account (0x[0-9a-f]{40}) is missing role (0x[0-9a-f]{64})$/\\n     */\\n    function _checkRole(bytes32 role, address account) internal view {\\n        if (!hasRole(role, account)) {\\n            revert(\\n                string(\\n                    abi.encodePacked(\\n                        \\\"AccessControl: account \\\",\\n                        StringsUpgradeable.toHexString(uint160(account), 20),\\n                        \\\" is missing role \\\",\\n                        StringsUpgradeable.toHexString(uint256(role), 32)\\n                    )\\n                )\\n            );\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\\n     * {revokeRole}.\\n     *\\n     * To change a role's admin, use {_setRoleAdmin}.\\n     */\\n    function getRoleAdmin(bytes32 role) public view override returns (bytes32) {\\n        return _roles[role].adminRole;\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function grantRole(bytes32 role, address account) public virtual override onlyRole(getRoleAdmin(role)) {\\n        _grantRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function revokeRole(bytes32 role, address account) public virtual override onlyRole(getRoleAdmin(role)) {\\n        _revokeRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from the calling account.\\n     *\\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\\n     * purpose is to provide a mechanism for accounts to lose their privileges\\n     * if they are compromised (such as when a trusted device is misplaced).\\n     *\\n     * If the calling account had been revoked `role`, emits a {RoleRevoked}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must be `account`.\\n     */\\n    function renounceRole(bytes32 role, address account) public virtual override {\\n        require(account == _msgSender(), \\\"AccessControl: can only renounce roles for self\\\");\\n\\n        _revokeRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event. Note that unlike {grantRole}, this function doesn't perform any\\n     * checks on the calling account.\\n     *\\n     * [WARNING]\\n     * ====\\n     * This function should only be called from the constructor when setting\\n     * up the initial roles for the system.\\n     *\\n     * Using this function in any other way is effectively circumventing the admin\\n     * system imposed by {AccessControl}.\\n     * ====\\n     *\\n     * NOTE: This function is deprecated in favor of {_grantRole}.\\n     */\\n    function _setupRole(bytes32 role, address account) internal virtual {\\n        _grantRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Sets `adminRole` as ``role``'s admin role.\\n     *\\n     * Emits a {RoleAdminChanged} event.\\n     */\\n    function _setRoleAdmin(bytes32 role, bytes32 adminRole) internal virtual {\\n        bytes32 previousAdminRole = getRoleAdmin(role);\\n        _roles[role].adminRole = adminRole;\\n        emit RoleAdminChanged(role, previousAdminRole, adminRole);\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * Internal function without access restriction.\\n     */\\n    function _grantRole(bytes32 role, address account) internal virtual {\\n        if (!hasRole(role, account)) {\\n            _roles[role].members[account] = true;\\n            emit RoleGranted(role, account, _msgSender());\\n        }\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * Internal function without access restriction.\\n     */\\n    function _revokeRole(bytes32 role, address account) internal virtual {\\n        if (hasRole(role, account)) {\\n            _roles[role].members[account] = false;\\n            emit RoleRevoked(role, account, _msgSender());\\n        }\\n    }\\n    uint256[49] private __gap;\\n}\\n\",\"keccak256\":\"0xdfe5444167c3b8cb94bb80044f56148151466d62a86b950c4b57c1ab8bdced7b\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/access/IAccessControlUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.0 (access/IAccessControl.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev External interface of AccessControl declared to support ERC165 detection.\\n */\\ninterface IAccessControlUpgradeable {\\n    /**\\n     * @dev Emitted when `newAdminRole` is set as ``role``'s admin role, replacing `previousAdminRole`\\n     *\\n     * `DEFAULT_ADMIN_ROLE` is the starting admin for all roles, despite\\n     * {RoleAdminChanged} not being emitted signaling this.\\n     *\\n     * _Available since v3.1._\\n     */\\n    event RoleAdminChanged(bytes32 indexed role, bytes32 indexed previousAdminRole, bytes32 indexed newAdminRole);\\n\\n    /**\\n     * @dev Emitted when `account` is granted `role`.\\n     *\\n     * `sender` is the account that originated the contract call, an admin role\\n     * bearer except when using {AccessControl-_setupRole}.\\n     */\\n    event RoleGranted(bytes32 indexed role, address indexed account, address indexed sender);\\n\\n    /**\\n     * @dev Emitted when `account` is revoked `role`.\\n     *\\n     * `sender` is the account that originated the contract call:\\n     *   - if using `revokeRole`, it is the admin role bearer\\n     *   - if using `renounceRole`, it is the role bearer (i.e. `account`)\\n     */\\n    event RoleRevoked(bytes32 indexed role, address indexed account, address indexed sender);\\n\\n    /**\\n     * @dev Returns `true` if `account` has been granted `role`.\\n     */\\n    function hasRole(bytes32 role, address account) external view returns (bool);\\n\\n    /**\\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\\n     * {revokeRole}.\\n     *\\n     * To change a role's admin, use {AccessControl-_setRoleAdmin}.\\n     */\\n    function getRoleAdmin(bytes32 role) external view returns (bytes32);\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function grantRole(bytes32 role, address account) external;\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function revokeRole(bytes32 role, address account) external;\\n\\n    /**\\n     * @dev Revokes `role` from the calling account.\\n     *\\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\\n     * purpose is to provide a mechanism for accounts to lose their privileges\\n     * if they are compromised (such as when a trusted device is misplaced).\\n     *\\n     * If the calling account had been granted `role`, emits a {RoleRevoked}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must be `account`.\\n     */\\n    function renounceRole(bytes32 role, address account) external;\\n}\\n\",\"keccak256\":\"0xb1503d6ad7d4251970bfc4fa2d7e6fa2c7716010a0b3d642bdc078cdbef5ecc0\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/proxy/ERC1967/ERC1967UpgradeUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.0 (proxy/ERC1967/ERC1967Upgrade.sol)\\n\\npragma solidity ^0.8.2;\\n\\nimport \\\"../beacon/IBeaconUpgradeable.sol\\\";\\nimport \\\"../../utils/AddressUpgradeable.sol\\\";\\nimport \\\"../../utils/StorageSlotUpgradeable.sol\\\";\\nimport \\\"../utils/Initializable.sol\\\";\\n\\n/**\\n * @dev This abstract contract provides getters and event emitting update functions for\\n * https://eips.ethereum.org/EIPS/eip-1967[EIP1967] slots.\\n *\\n * _Available since v4.1._\\n *\\n * @custom:oz-upgrades-unsafe-allow delegatecall\\n */\\nabstract contract ERC1967UpgradeUpgradeable is Initializable {\\n    function __ERC1967Upgrade_init() internal initializer {\\n        __ERC1967Upgrade_init_unchained();\\n    }\\n\\n    function __ERC1967Upgrade_init_unchained() internal initializer {\\n    }\\n    // This is the keccak-256 hash of \\\"eip1967.proxy.rollback\\\" subtracted by 1\\n    bytes32 private constant _ROLLBACK_SLOT = 0x4910fdfa16fed3260ed0e7147f7cc6da11a60208b5b9406d12a635614ffd9143;\\n\\n    /**\\n     * @dev Storage slot with the address of the current implementation.\\n     * This is the keccak-256 hash of \\\"eip1967.proxy.implementation\\\" subtracted by 1, and is\\n     * validated in the constructor.\\n     */\\n    bytes32 internal constant _IMPLEMENTATION_SLOT = 0x360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc;\\n\\n    /**\\n     * @dev Emitted when the implementation is upgraded.\\n     */\\n    event Upgraded(address indexed implementation);\\n\\n    /**\\n     * @dev Returns the current implementation address.\\n     */\\n    function _getImplementation() internal view returns (address) {\\n        return StorageSlotUpgradeable.getAddressSlot(_IMPLEMENTATION_SLOT).value;\\n    }\\n\\n    /**\\n     * @dev Stores a new address in the EIP1967 implementation slot.\\n     */\\n    function _setImplementation(address newImplementation) private {\\n        require(AddressUpgradeable.isContract(newImplementation), \\\"ERC1967: new implementation is not a contract\\\");\\n        StorageSlotUpgradeable.getAddressSlot(_IMPLEMENTATION_SLOT).value = newImplementation;\\n    }\\n\\n    /**\\n     * @dev Perform implementation upgrade\\n     *\\n     * Emits an {Upgraded} event.\\n     */\\n    function _upgradeTo(address newImplementation) internal {\\n        _setImplementation(newImplementation);\\n        emit Upgraded(newImplementation);\\n    }\\n\\n    /**\\n     * @dev Perform implementation upgrade with additional setup call.\\n     *\\n     * Emits an {Upgraded} event.\\n     */\\n    function _upgradeToAndCall(\\n        address newImplementation,\\n        bytes memory data,\\n        bool forceCall\\n    ) internal {\\n        _upgradeTo(newImplementation);\\n        if (data.length > 0 || forceCall) {\\n            _functionDelegateCall(newImplementation, data);\\n        }\\n    }\\n\\n    /**\\n     * @dev Perform implementation upgrade with security checks for UUPS proxies, and additional setup call.\\n     *\\n     * Emits an {Upgraded} event.\\n     */\\n    function _upgradeToAndCallSecure(\\n        address newImplementation,\\n        bytes memory data,\\n        bool forceCall\\n    ) internal {\\n        address oldImplementation = _getImplementation();\\n\\n        // Initial upgrade and setup call\\n        _setImplementation(newImplementation);\\n        if (data.length > 0 || forceCall) {\\n            _functionDelegateCall(newImplementation, data);\\n        }\\n\\n        // Perform rollback test if not already in progress\\n        StorageSlotUpgradeable.BooleanSlot storage rollbackTesting = StorageSlotUpgradeable.getBooleanSlot(_ROLLBACK_SLOT);\\n        if (!rollbackTesting.value) {\\n            // Trigger rollback using upgradeTo from the new implementation\\n            rollbackTesting.value = true;\\n            _functionDelegateCall(\\n                newImplementation,\\n                abi.encodeWithSignature(\\\"upgradeTo(address)\\\", oldImplementation)\\n            );\\n            rollbackTesting.value = false;\\n            // Check rollback was effective\\n            require(oldImplementation == _getImplementation(), \\\"ERC1967Upgrade: upgrade breaks further upgrades\\\");\\n            // Finally reset to the new implementation and log the upgrade\\n            _upgradeTo(newImplementation);\\n        }\\n    }\\n\\n    /**\\n     * @dev Storage slot with the admin of the contract.\\n     * This is the keccak-256 hash of \\\"eip1967.proxy.admin\\\" subtracted by 1, and is\\n     * validated in the constructor.\\n     */\\n    bytes32 internal constant _ADMIN_SLOT = 0xb53127684a568b3173ae13b9f8a6016e243e63b6e8ee1178d6a717850b5d6103;\\n\\n    /**\\n     * @dev Emitted when the admin account has changed.\\n     */\\n    event AdminChanged(address previousAdmin, address newAdmin);\\n\\n    /**\\n     * @dev Returns the current admin.\\n     */\\n    function _getAdmin() internal view returns (address) {\\n        return StorageSlotUpgradeable.getAddressSlot(_ADMIN_SLOT).value;\\n    }\\n\\n    /**\\n     * @dev Stores a new address in the EIP1967 admin slot.\\n     */\\n    function _setAdmin(address newAdmin) private {\\n        require(newAdmin != address(0), \\\"ERC1967: new admin is the zero address\\\");\\n        StorageSlotUpgradeable.getAddressSlot(_ADMIN_SLOT).value = newAdmin;\\n    }\\n\\n    /**\\n     * @dev Changes the admin of the proxy.\\n     *\\n     * Emits an {AdminChanged} event.\\n     */\\n    function _changeAdmin(address newAdmin) internal {\\n        emit AdminChanged(_getAdmin(), newAdmin);\\n        _setAdmin(newAdmin);\\n    }\\n\\n    /**\\n     * @dev The storage slot of the UpgradeableBeacon contract which defines the implementation for this proxy.\\n     * This is bytes32(uint256(keccak256('eip1967.proxy.beacon')) - 1)) and is validated in the constructor.\\n     */\\n    bytes32 internal constant _BEACON_SLOT = 0xa3f0ad74e5423aebfd80d3ef4346578335a9a72aeaee59ff6cb3582b35133d50;\\n\\n    /**\\n     * @dev Emitted when the beacon is upgraded.\\n     */\\n    event BeaconUpgraded(address indexed beacon);\\n\\n    /**\\n     * @dev Returns the current beacon.\\n     */\\n    function _getBeacon() internal view returns (address) {\\n        return StorageSlotUpgradeable.getAddressSlot(_BEACON_SLOT).value;\\n    }\\n\\n    /**\\n     * @dev Stores a new beacon in the EIP1967 beacon slot.\\n     */\\n    function _setBeacon(address newBeacon) private {\\n        require(AddressUpgradeable.isContract(newBeacon), \\\"ERC1967: new beacon is not a contract\\\");\\n        require(\\n            AddressUpgradeable.isContract(IBeaconUpgradeable(newBeacon).implementation()),\\n            \\\"ERC1967: beacon implementation is not a contract\\\"\\n        );\\n        StorageSlotUpgradeable.getAddressSlot(_BEACON_SLOT).value = newBeacon;\\n    }\\n\\n    /**\\n     * @dev Perform beacon upgrade with additional setup call. Note: This upgrades the address of the beacon, it does\\n     * not upgrade the implementation contained in the beacon (see {UpgradeableBeacon-_setImplementation} for that).\\n     *\\n     * Emits a {BeaconUpgraded} event.\\n     */\\n    function _upgradeBeaconToAndCall(\\n        address newBeacon,\\n        bytes memory data,\\n        bool forceCall\\n    ) internal {\\n        _setBeacon(newBeacon);\\n        emit BeaconUpgraded(newBeacon);\\n        if (data.length > 0 || forceCall) {\\n            _functionDelegateCall(IBeaconUpgradeable(newBeacon).implementation(), data);\\n        }\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function _functionDelegateCall(address target, bytes memory data) private returns (bytes memory) {\\n        require(AddressUpgradeable.isContract(target), \\\"Address: delegate call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return AddressUpgradeable.verifyCallResult(success, returndata, \\\"Address: low-level delegate call failed\\\");\\n    }\\n    uint256[50] private __gap;\\n}\\n\",\"keccak256\":\"0xb0fba7a209e01ef5a75bd082cd31b46b417f8572ca87a08475aa60afa01b4801\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/proxy/beacon/IBeaconUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.0 (proxy/beacon/IBeacon.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev This is the interface that {BeaconProxy} expects of its beacon.\\n */\\ninterface IBeaconUpgradeable {\\n    /**\\n     * @dev Must return an address that can be used as a delegate call target.\\n     *\\n     * {BeaconProxy} will check that this address is a contract.\\n     */\\n    function implementation() external view returns (address);\\n}\\n\",\"keccak256\":\"0xc28ec209735cd77cebec87be0ec4586d4cba9002011adf4346e374e60c367756\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.0 (proxy/utils/Initializable.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\\n * behind a proxy. Since a proxied contract can't have a constructor, it's common to move constructor logic to an\\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\\n *\\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\\n * possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\\n *\\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\\n *\\n * [CAUTION]\\n * ====\\n * Avoid leaving a contract uninitialized.\\n *\\n * An uninitialized contract can be taken over by an attacker. This applies to both a proxy and its implementation\\n * contract, which may impact the proxy. To initialize the implementation contract, you can either invoke the\\n * initializer manually, or you can include a constructor to automatically mark it as initialized when it is deployed:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```\\n * /// @custom:oz-upgrades-unsafe-allow constructor\\n * constructor() initializer {}\\n * ```\\n * ====\\n */\\nabstract contract Initializable {\\n    /**\\n     * @dev Indicates that the contract has been initialized.\\n     */\\n    bool private _initialized;\\n\\n    /**\\n     * @dev Indicates that the contract is in the process of being initialized.\\n     */\\n    bool private _initializing;\\n\\n    /**\\n     * @dev Modifier to protect an initializer function from being invoked twice.\\n     */\\n    modifier initializer() {\\n        require(_initializing || !_initialized, \\\"Initializable: contract is already initialized\\\");\\n\\n        bool isTopLevelCall = !_initializing;\\n        if (isTopLevelCall) {\\n            _initializing = true;\\n            _initialized = true;\\n        }\\n\\n        _;\\n\\n        if (isTopLevelCall) {\\n            _initializing = false;\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x6287586f5e4a103c89d4dda41406136cdf283cc625bd1ebfdf1468aae5bfe449\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/proxy/utils/UUPSUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.0 (proxy/utils/UUPSUpgradeable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../ERC1967/ERC1967UpgradeUpgradeable.sol\\\";\\nimport \\\"./Initializable.sol\\\";\\n\\n/**\\n * @dev An upgradeability mechanism designed for UUPS proxies. The functions included here can perform an upgrade of an\\n * {ERC1967Proxy}, when this contract is set as the implementation behind such a proxy.\\n *\\n * A security mechanism ensures that an upgrade does not turn off upgradeability accidentally, although this risk is\\n * reinstated if the upgrade retains upgradeability but removes the security mechanism, e.g. by replacing\\n * `UUPSUpgradeable` with a custom implementation of upgrades.\\n *\\n * The {_authorizeUpgrade} function must be overridden to include access restriction to the upgrade mechanism.\\n *\\n * _Available since v4.1._\\n */\\nabstract contract UUPSUpgradeable is Initializable, ERC1967UpgradeUpgradeable {\\n    function __UUPSUpgradeable_init() internal initializer {\\n        __ERC1967Upgrade_init_unchained();\\n        __UUPSUpgradeable_init_unchained();\\n    }\\n\\n    function __UUPSUpgradeable_init_unchained() internal initializer {\\n    }\\n    /// @custom:oz-upgrades-unsafe-allow state-variable-immutable state-variable-assignment\\n    address private immutable __self = address(this);\\n\\n    /**\\n     * @dev Check that the execution is being performed through a delegatecall call and that the execution context is\\n     * a proxy contract with an implementation (as defined in ERC1967) pointing to self. This should only be the case\\n     * for UUPS and transparent proxies that are using the current contract as their implementation. Execution of a\\n     * function through ERC1167 minimal proxies (clones) would not normally pass this test, but is not guaranteed to\\n     * fail.\\n     */\\n    modifier onlyProxy() {\\n        require(address(this) != __self, \\\"Function must be called through delegatecall\\\");\\n        require(_getImplementation() == __self, \\\"Function must be called through active proxy\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Upgrade the implementation of the proxy to `newImplementation`.\\n     *\\n     * Calls {_authorizeUpgrade}.\\n     *\\n     * Emits an {Upgraded} event.\\n     */\\n    function upgradeTo(address newImplementation) external virtual onlyProxy {\\n        _authorizeUpgrade(newImplementation);\\n        _upgradeToAndCallSecure(newImplementation, new bytes(0), false);\\n    }\\n\\n    /**\\n     * @dev Upgrade the implementation of the proxy to `newImplementation`, and subsequently execute the function call\\n     * encoded in `data`.\\n     *\\n     * Calls {_authorizeUpgrade}.\\n     *\\n     * Emits an {Upgraded} event.\\n     */\\n    function upgradeToAndCall(address newImplementation, bytes memory data) external payable virtual onlyProxy {\\n        _authorizeUpgrade(newImplementation);\\n        _upgradeToAndCallSecure(newImplementation, data, true);\\n    }\\n\\n    /**\\n     * @dev Function that should revert when `msg.sender` is not authorized to upgrade the contract. Called by\\n     * {upgradeTo} and {upgradeToAndCall}.\\n     *\\n     * Normally, this function will use an xref:access.adoc[access control] modifier such as {Ownable-onlyOwner}.\\n     *\\n     * ```solidity\\n     * function _authorizeUpgrade(address) internal override onlyOwner {}\\n     * ```\\n     */\\n    function _authorizeUpgrade(address newImplementation) internal virtual;\\n    uint256[50] private __gap;\\n}\\n\",\"keccak256\":\"0x611d1f2720036646366a613a7b6bb85d1527ed3b4fb5ba2db8cfc34f80a37be6\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.0 (utils/Address.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary AddressUpgradeable {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize, which returns 0 for contracts in\\n        // construction, since the code is only stored at the end of the\\n        // constructor execution.\\n\\n        uint256 size;\\n        assembly {\\n            size := extcodesize(account)\\n        }\\n        return size > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xf308459c5ea0cde035b8c3b3d9144086a2c777c46dbe401f634e75dea1aba1b8\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.0 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract ContextUpgradeable is Initializable {\\n    function __Context_init() internal initializer {\\n        __Context_init_unchained();\\n    }\\n\\n    function __Context_init_unchained() internal initializer {\\n    }\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n    uint256[50] private __gap;\\n}\\n\",\"keccak256\":\"0x0c34de2f75ee9ab06bf9151824be575885d0a9b460c292476a260578fb5a4e1c\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/StorageSlotUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.0 (utils/StorageSlot.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Library for reading and writing primitive types to specific storage slots.\\n *\\n * Storage slots are often used to avoid storage conflict when dealing with upgradeable contracts.\\n * This library helps with reading and writing to such slots without the need for inline assembly.\\n *\\n * The functions in this library return Slot structs that contain a `value` member that can be used to read or write.\\n *\\n * Example usage to set ERC1967 implementation slot:\\n * ```\\n * contract ERC1967 {\\n *     bytes32 internal constant _IMPLEMENTATION_SLOT = 0x360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc;\\n *\\n *     function _getImplementation() internal view returns (address) {\\n *         return StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value;\\n *     }\\n *\\n *     function _setImplementation(address newImplementation) internal {\\n *         require(Address.isContract(newImplementation), \\\"ERC1967: new implementation is not a contract\\\");\\n *         StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value = newImplementation;\\n *     }\\n * }\\n * ```\\n *\\n * _Available since v4.1 for `address`, `bool`, `bytes32`, and `uint256`._\\n */\\nlibrary StorageSlotUpgradeable {\\n    struct AddressSlot {\\n        address value;\\n    }\\n\\n    struct BooleanSlot {\\n        bool value;\\n    }\\n\\n    struct Bytes32Slot {\\n        bytes32 value;\\n    }\\n\\n    struct Uint256Slot {\\n        uint256 value;\\n    }\\n\\n    /**\\n     * @dev Returns an `AddressSlot` with member `value` located at `slot`.\\n     */\\n    function getAddressSlot(bytes32 slot) internal pure returns (AddressSlot storage r) {\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `BooleanSlot` with member `value` located at `slot`.\\n     */\\n    function getBooleanSlot(bytes32 slot) internal pure returns (BooleanSlot storage r) {\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `Bytes32Slot` with member `value` located at `slot`.\\n     */\\n    function getBytes32Slot(bytes32 slot) internal pure returns (Bytes32Slot storage r) {\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `Uint256Slot` with member `value` located at `slot`.\\n     */\\n    function getUint256Slot(bytes32 slot) internal pure returns (Uint256Slot storage r) {\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x8cd74cdb9a9b704bfd99b4c677f49a170f1b16235f59b4ede98db93ff92f702a\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/StringsUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.0 (utils/Strings.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev String operations.\\n */\\nlibrary StringsUpgradeable {\\n    bytes16 private constant _HEX_SYMBOLS = \\\"0123456789abcdef\\\";\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(uint256 value) internal pure returns (string memory) {\\n        // Inspired by OraclizeAPI's implementation - MIT licence\\n        // https://github.com/oraclize/ethereum-api/blob/b42146b063c7d6ee1358846c198246239e9360e8/oraclizeAPI_0.4.25.sol\\n\\n        if (value == 0) {\\n            return \\\"0\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 digits;\\n        while (temp != 0) {\\n            digits++;\\n            temp /= 10;\\n        }\\n        bytes memory buffer = new bytes(digits);\\n        while (value != 0) {\\n            digits -= 1;\\n            buffer[digits] = bytes1(uint8(48 + uint256(value % 10)));\\n            value /= 10;\\n        }\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(uint256 value) internal pure returns (string memory) {\\n        if (value == 0) {\\n            return \\\"0x00\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 length = 0;\\n        while (temp != 0) {\\n            length++;\\n            temp >>= 8;\\n        }\\n        return toHexString(value, length);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\\n     */\\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\\n        bytes memory buffer = new bytes(2 * length + 2);\\n        buffer[0] = \\\"0\\\";\\n        buffer[1] = \\\"x\\\";\\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\\n            buffer[i] = _HEX_SYMBOLS[value & 0xf];\\n            value >>= 4;\\n        }\\n        require(value == 0, \\\"Strings: hex length insufficient\\\");\\n        return string(buffer);\\n    }\\n}\\n\",\"keccak256\":\"0xed12e1c10c09054954b16a1b1f4250c4bbc0c7140d720777626fb5886a1a0e25\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/introspection/ERC165Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.0 (utils/introspection/ERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC165Upgradeable.sol\\\";\\nimport \\\"../../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC165} interface.\\n *\\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\\n * for the additional interface id that will be supported. For example:\\n *\\n * ```solidity\\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\\n * }\\n * ```\\n *\\n * Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.\\n */\\nabstract contract ERC165Upgradeable is Initializable, IERC165Upgradeable {\\n    function __ERC165_init() internal initializer {\\n        __ERC165_init_unchained();\\n    }\\n\\n    function __ERC165_init_unchained() internal initializer {\\n    }\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IERC165Upgradeable).interfaceId;\\n    }\\n    uint256[50] private __gap;\\n}\\n\",\"keccak256\":\"0x8c5737e80521ac5e76c0d9d2cdb67647906fdadeb296644910eeecb31042e1da\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/introspection/IERC165Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.0 (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165Upgradeable {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x650712f855228b7cdeb90738d99dd33ff3a7c9770914ff03eb93f90218fe164b\",\"license\":\"MIT\"},\"contracts/KeeperExperiment.sol\":{\"content\":\"/*\\nbackground: This is an experimental, quickly hashed together contract.\\nIt will never hold value of any kind.\\n\\nThe goal is that a future version of this contract becomes a proper keeper contract.\\n\\nFor now no effort has been put into making it conform to the proper keeper interface etc.\\n*/\\n\\n// SPDX-License-Identifier: BUSL-1.1\\n\\npragma solidity 0.8.10;\\n\\nimport \\\"./abstract/AccessControlledAndUpgradeable.sol\\\";\\nimport \\\"./interfaces/ILongShort.sol\\\";\\nimport \\\"./interfaces/IStaker.sol\\\";\\nimport \\\"./interfaces/IOracleManager.sol\\\";\\n\\ncontract KeeperExperiment is AccessControlledAndUpgradeable {\\n  address public longShortAddress;\\n  address public stakerAddress;\\n\\n  mapping(uint32 => uint256) public updateTimeThresholdInSeconds;\\n  mapping(uint32 => uint256) public percentChangeThreshold;\\n\\n  function initialize(\\n    address _admin,\\n    address _longShort,\\n    address _staker\\n  ) external virtual initializer {\\n    longShortAddress = _longShort;\\n    stakerAddress = _staker;\\n\\n    _AccessControlledAndUpgradeable_init(_admin);\\n  }\\n\\n  function updateHeartbeatThresholdForMarket(uint32 marketIndex, uint256 heartbeatInSeconds)\\n    external\\n    onlyRole(ADMIN_ROLE)\\n  {\\n    // No validation - we are admin ;)\\n    updateTimeThresholdInSeconds[marketIndex] = heartbeatInSeconds;\\n  }\\n\\n  function updatePercentChangeThresholdForMarket(\\n    uint32 marketIndex,\\n    uint256 _percentChangeThreshold\\n  ) external onlyRole(ADMIN_ROLE) {\\n    // No validation - we are admin ;)\\n    percentChangeThreshold[marketIndex] = _percentChangeThreshold;\\n  }\\n\\n  function wasLastUpdateOlderThanThreshold(uint32 marketIndex) public view returns (bool) {\\n    uint256 latestRewardIndex = IStaker(stakerAddress).latestRewardIndex(marketIndex);\\n    uint256 lastUpdateTimestamp = IStaker(stakerAddress).safe_getUpdateTimestamp(\\n      marketIndex,\\n      latestRewardIndex\\n    );\\n\\n    return lastUpdateTimestamp + updateTimeThresholdInSeconds[marketIndex] < block.timestamp;\\n  }\\n\\n  function isPriceChangeOverThreshold(uint32 marketIndex) public view returns (bool) {\\n    int256 currentAssetPrice = ILongShort(longShortAddress).assetPrice(marketIndex);\\n    IOracleManager oracle = IOracleManager(\\n      ILongShort(longShortAddress).oracleManagers(marketIndex)\\n    );\\n    // TODO: for some markets (eg flippening) this needs to be `updatePrice()` which isn't a view function!\\n    int256 latestAssetPrice = oracle.getLatestPrice();\\n\\n    int256 percentChange = ((currentAssetPrice - latestAssetPrice) * 1e18) / currentAssetPrice;\\n    int256 percentChangeThresholdUnsigned = int256(percentChangeThreshold[marketIndex]);\\n    return\\n      percentChange > percentChangeThresholdUnsigned ||\\n      -percentChange > percentChangeThresholdUnsigned;\\n  }\\n\\n  // This function is the same as the `isPriceChangeOverThreshold` but it isn't a view function, so it can simulate on oracle that requires an update\\n  function isPriceChangeOverThresholdNotView(uint32 marketIndex) public returns (bool, int256) {\\n    int256 currentAssetPrice = ILongShort(longShortAddress).assetPrice(marketIndex);\\n    IOracleManager oracle = IOracleManager(\\n      ILongShort(longShortAddress).oracleManagers(marketIndex)\\n    );\\n    int256 latestAssetPrice = oracle.updatePrice();\\n\\n    int256 percentChange = ((currentAssetPrice - latestAssetPrice) * 1e18) / currentAssetPrice;\\n    int256 percentChangeThresholdUnsigned = int256(percentChangeThreshold[marketIndex]);\\n\\n    return (\\n      percentChange > percentChangeThresholdUnsigned ||\\n        -percentChange > percentChangeThresholdUnsigned,\\n      percentChange\\n    );\\n  }\\n\\n  function areTherePendingNextPriceActions(uint32 marketIndex) public view returns (bool) {\\n    return\\n      ILongShort(longShortAddress).batched_amountPaymentToken_deposit(marketIndex, true) > 0 ||\\n      ILongShort(longShortAddress).batched_amountSyntheticToken_redeem(marketIndex, true) > 0 ||\\n      ILongShort(longShortAddress).batched_amountSyntheticToken_toShiftAwayFrom_marketSide(\\n        marketIndex,\\n        true\\n      ) >\\n      0 ||\\n      ILongShort(longShortAddress).batched_amountPaymentToken_deposit(marketIndex, false) > 0 ||\\n      ILongShort(longShortAddress).batched_amountSyntheticToken_redeem(marketIndex, false) > 0 ||\\n      ILongShort(longShortAddress).batched_amountSyntheticToken_toShiftAwayFrom_marketSide(\\n        marketIndex,\\n        false\\n      ) >\\n      0;\\n  }\\n\\n  function pendingNextPriceActionsBreakdown(uint32 marketIndex)\\n    public\\n    view\\n    returns (\\n      uint256,\\n      uint256,\\n      uint256,\\n      uint256,\\n      uint256,\\n      uint256\\n    )\\n  {\\n    return (\\n      ILongShort(longShortAddress).batched_amountPaymentToken_deposit(marketIndex, true),\\n      ILongShort(longShortAddress).batched_amountSyntheticToken_redeem(marketIndex, true),\\n      ILongShort(longShortAddress).batched_amountSyntheticToken_toShiftAwayFrom_marketSide(\\n        marketIndex,\\n        true\\n      ),\\n      ILongShort(longShortAddress).batched_amountPaymentToken_deposit(marketIndex, false),\\n      ILongShort(longShortAddress).batched_amountSyntheticToken_redeem(marketIndex, false),\\n      ILongShort(longShortAddress).batched_amountSyntheticToken_toShiftAwayFrom_marketSide(\\n        marketIndex,\\n        false\\n      )\\n    );\\n  }\\n\\n  function pendingNextPriceActionsBreakdownCall(uint32 marketIndex) public {\\n    pendingNextPriceActionsBreakdown(marketIndex);\\n  }\\n\\n  // TODO: make this conform to the 'keeper' standard\\n  function shouldUpdateOracle(uint32 marketIndex) external view returns (bool) {\\n    // was the last update longer than (update threshold ago)\\n    if (wasLastUpdateOlderThanThreshold(marketIndex)) {\\n      return true;\\n    }\\n    // is the current price greater than a certain threshold?\\n    if (isPriceChangeOverThreshold(marketIndex)) {\\n      return true;\\n    }\\n    // are there pending nextPriceActions?\\n    if (areTherePendingNextPriceActions(marketIndex)) {\\n      return true;\\n    }\\n  }\\n\\n  // This function is the same as the `shouldUpdateOracle` but it isn't a view function, so it can simulate on oracle that requires an update\\n  function shouldUpdateOracleNotView(uint32 marketIndex) external returns (bool) {\\n    // was the last update longer than (update threshold ago)\\n    if (wasLastUpdateOlderThanThreshold(marketIndex)) {\\n      return true;\\n    }\\n    // is the current price greater than a certain threshold?\\n    (bool priceChangeIsOverThreshold, ) = isPriceChangeOverThresholdNotView(marketIndex);\\n    if (priceChangeIsOverThreshold) {\\n      return true;\\n    }\\n    // are there pending nextPriceActions?\\n    if (areTherePendingNextPriceActions(marketIndex)) {\\n      return true;\\n    }\\n  }\\n\\n  function shouldUpdateOracleNotViewBreakdown(uint32 marketIndex)\\n    public\\n    returns (\\n      bool,\\n      bool,\\n      int256,\\n      bool\\n    )\\n  {\\n    (\\n      bool priceChangeIsOverThreshold,\\n      int256 priceChangePercent_1e18\\n    ) = isPriceChangeOverThresholdNotView(marketIndex);\\n    return (\\n      wasLastUpdateOlderThanThreshold(marketIndex),\\n      priceChangeIsOverThreshold,\\n      priceChangePercent_1e18,\\n      areTherePendingNextPriceActions(marketIndex)\\n    );\\n  }\\n\\n  function shouldUpdateOracleNotViewBreakdownWithUpdateIndex(uint32 marketIndex)\\n    external\\n    returns (\\n      bool,\\n      bool,\\n      int256,\\n      bool,\\n      uint256\\n    )\\n  {\\n    (\\n      bool wasLastUpdateOlderThanThreshold,\\n      bool priceChangeIsOverThreshold,\\n      int256 priceChangePercent_1e18,\\n      bool areTherePendingNextPriceActions\\n    ) = shouldUpdateOracleNotViewBreakdown(marketIndex);\\n    return (\\n      wasLastUpdateOlderThanThreshold,\\n      priceChangeIsOverThreshold,\\n      priceChangePercent_1e18,\\n      areTherePendingNextPriceActions,\\n      ILongShort(longShortAddress).marketUpdateIndex(marketIndex)\\n    );\\n  }\\n}\\n\",\"keccak256\":\"0x55518cbc76f6fe691247fa9537d5eb4469e56749e95ceb61f4397dcd4f87ff5e\",\"license\":\"BUSL-1.1\"},\"contracts/abstract/AccessControlledAndUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\n\\nimport \\\"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/proxy/utils/UUPSUpgradeable.sol\\\";\\n\\nabstract contract AccessControlledAndUpgradeable is\\n  Initializable,\\n  AccessControlUpgradeable,\\n  UUPSUpgradeable\\n{\\n  bytes32 public constant UPGRADER_ROLE = keccak256(\\\"UPGRADER_ROLE\\\");\\n  bytes32 public constant ADMIN_ROLE = keccak256(\\\"ADMIN_ROLE\\\");\\n\\n  /// @notice Initializes the contract when called by parent initializers.\\n  /// @param initialAdmin The initial admin who will hold all roles.\\n  function _AccessControlledAndUpgradeable_init(address initialAdmin) internal initializer {\\n    __AccessControl_init();\\n    __UUPSUpgradeable_init();\\n    _AccessControlledAndUpgradeable_init_unchained(initialAdmin);\\n  }\\n\\n  /// @notice Initializes the contract for contracts that already call both __AccessControl_init\\n  ///         and _UUPSUpgradeable_init when initializing.\\n  /// @param initialAdmin The initial admin who will hold all roles.\\n  function _AccessControlledAndUpgradeable_init_unchained(address initialAdmin)\\n    internal\\n    initializer\\n  {\\n    require(initialAdmin != address(0));\\n    _setupRole(DEFAULT_ADMIN_ROLE, initialAdmin);\\n    _setupRole(ADMIN_ROLE, initialAdmin);\\n    _setupRole(UPGRADER_ROLE, initialAdmin);\\n  }\\n\\n  /// @notice Authorizes an upgrade to a new address.\\n  /// @dev Can only be called by addresses wih UPGRADER_ROLE\\n  function _authorizeUpgrade(address) internal override onlyRole(UPGRADER_ROLE) {}\\n}\\n\",\"keccak256\":\"0x1e82a4f784ef106965824647b8498fd8a93bdb75ea46d0cdefd27d08af0b75fe\",\"license\":\"BUSL-1.1\"},\"contracts/interfaces/ILongShort.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\n\\npragma solidity 0.8.10;\\n\\ninterface ILongShort {\\n  /*\\u2554\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2557\\n    \\u2551           EVENTS           \\u2551\\n    \\u255a\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u255d*/\\n\\n  event LongShortV1(address admin, address tokenFactory, address staker);\\n\\n  event SystemStateUpdated(\\n    uint32 marketIndex,\\n    uint256 updateIndex,\\n    int256 underlyingAssetPrice,\\n    uint256 longValue,\\n    uint256 shortValue,\\n    uint256 longPrice,\\n    uint256 shortPrice\\n  );\\n\\n  event SyntheticMarketCreated(\\n    uint32 marketIndex,\\n    address longTokenAddress,\\n    address shortTokenAddress,\\n    address paymentToken,\\n    int256 initialAssetPrice,\\n    string name,\\n    string symbol,\\n    address oracleAddress,\\n    address yieldManagerAddress\\n  );\\n\\n  event NextPriceRedeem(\\n    uint32 marketIndex,\\n    bool isLong,\\n    uint256 synthRedeemed,\\n    address user,\\n    uint256 oracleUpdateIndex\\n  );\\n\\n  event NextPriceSyntheticPositionShift(\\n    uint32 marketIndex,\\n    bool isShiftFromLong,\\n    uint256 synthShifted,\\n    address user,\\n    uint256 oracleUpdateIndex\\n  );\\n\\n  event NextPriceDeposit(\\n    uint32 marketIndex,\\n    bool isLong,\\n    uint256 depositAdded,\\n    address user,\\n    uint256 oracleUpdateIndex\\n  );\\n\\n  event NextPriceDepositAndStake(\\n    uint32 marketIndex,\\n    bool isLong,\\n    uint256 amountToStake,\\n    address user,\\n    uint256 oracleUpdateIndex\\n  );\\n\\n  event OracleUpdated(uint32 marketIndex, address oldOracleAddress, address newOracleAddress);\\n\\n  event NewMarketLaunchedAndSeeded(uint32 marketIndex, uint256 initialSeed, uint256 marketLeverage);\\n\\n  event ExecuteNextPriceSettlementsUser(address user, uint32 marketIndex);\\n\\n  event MarketFundingRateMultiplerChanged(uint32 marketIndex, uint256 fundingRateMultiplier_e18);\\n\\n  function syntheticTokens(uint32, bool) external view returns (address);\\n\\n  function assetPrice(uint32) external view returns (int256);\\n\\n  function oracleManagers(uint32) external view returns (address);\\n\\n  function latestMarket() external view returns (uint32);\\n\\n  function marketUpdateIndex(uint32) external view returns (uint256);\\n\\n  function batched_amountPaymentToken_deposit(uint32, bool) external view returns (uint256);\\n\\n  function batched_amountSyntheticToken_redeem(uint32, bool) external view returns (uint256);\\n\\n  function batched_amountSyntheticToken_toShiftAwayFrom_marketSide(uint32, bool)\\n    external\\n    view\\n    returns (uint256);\\n\\n  function get_syntheticToken_priceSnapshot(uint32, uint256)\\n    external\\n    view\\n    returns (uint256, uint256);\\n\\n  function get_syntheticToken_priceSnapshot_side(\\n    uint32,\\n    bool,\\n    uint256\\n  ) external view returns (uint256);\\n\\n  function marketSideValueInPaymentToken(uint32 marketIndex)\\n    external\\n    view\\n    returns (uint128 marketSideValueInPaymentTokenLong, uint128 marketSideValueInPaymentTokenShort);\\n\\n  function updateSystemState(uint32 marketIndex) external;\\n\\n  function updateSystemStateMulti(uint32[] calldata marketIndex) external;\\n\\n  function getUsersConfirmedButNotSettledSynthBalance(\\n    address user,\\n    uint32 marketIndex,\\n    bool isLong\\n  ) external view returns (uint256 confirmedButNotSettledBalance);\\n\\n  function executeOutstandingNextPriceSettlementsUser(address user, uint32 marketIndex) external;\\n\\n  function shiftPositionNextPrice(\\n    uint32 marketIndex,\\n    uint256 amountSyntheticTokensToShift,\\n    bool isShiftFromLong\\n  ) external;\\n\\n  function shiftPositionFromLongNextPrice(uint32 marketIndex, uint256 amountSyntheticTokensToShift)\\n    external;\\n\\n  function shiftPositionFromShortNextPrice(uint32 marketIndex, uint256 amountSyntheticTokensToShift)\\n    external;\\n\\n  function getAmountSyntheticTokenToMintOnTargetSide(\\n    uint32 marketIndex,\\n    uint256 amountSyntheticTokenShiftedFromOneSide,\\n    bool isShiftFromLong,\\n    uint256 priceSnapshotIndex\\n  ) external view returns (uint256 amountSynthShiftedToOtherSide);\\n\\n  function mintLongNextPrice(uint32 marketIndex, uint256 amount) external;\\n\\n  function mintShortNextPrice(uint32 marketIndex, uint256 amount) external;\\n\\n  function mintAndStakeNextPrice(\\n    uint32 marketIndex,\\n    uint256 amount,\\n    bool isLong\\n  ) external;\\n\\n  function redeemLongNextPrice(uint32 marketIndex, uint256 amount) external;\\n\\n  function redeemShortNextPrice(uint32 marketIndex, uint256 amount) external;\\n}\\n\",\"keccak256\":\"0xc6650f8cd52daffa1b24ca164b57e0953e06f8e678cb949f07eb0631c7d1eb61\",\"license\":\"BUSL-1.1\"},\"contracts/interfaces/IOracleManager.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\n\\npragma solidity 0.8.10;\\n\\n/*\\n * Manages price feeds from different oracle implementations.\\n */\\ninterface IOracleManager {\\n  function updatePrice() external returns (int256);\\n\\n  /*\\n   *Returns the latest price from the oracle feed.\\n   */\\n  function getLatestPrice() external view returns (int256);\\n}\\n\",\"keccak256\":\"0xb63c1794b7f637c55b84fbcbf80f15ef52d913a936fe8478b16b56c2dd5c4213\",\"license\":\"BUSL-1.1\"},\"contracts/interfaces/IStaker.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\n\\npragma solidity 0.8.10;\\n\\ninterface IStaker {\\n  /*\\u2554\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2557\\n    \\u2551           EVENTS           \\u2551\\n    \\u255a\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u255d*/\\n\\n  event StakerV1(\\n    address admin,\\n    address floatTreasury,\\n    address floatCapital,\\n    address floatToken,\\n    uint256 floatPercentage\\n  );\\n\\n  event MarketAddedToStaker(\\n    uint32 marketIndex,\\n    uint256 exitFee_e18,\\n    uint256 period,\\n    uint256 multiplier,\\n    uint256 balanceIncentiveExponent,\\n    int256 balanceIncentiveEquilibriumOffset,\\n    uint256 safeExponentBitShifting\\n  );\\n\\n  event AccumulativeIssuancePerStakedSynthSnapshotCreated(\\n    uint32 marketIndex,\\n    uint256 accumulativeFloatIssuanceSnapshotIndex,\\n    uint256 accumulativeLong,\\n    uint256 accumulativeShort\\n  );\\n\\n  event StakeAdded(address user, address token, uint256 amount, uint256 lastMintIndex);\\n\\n  event StakeWithdrawn(address user, address token, uint256 amount);\\n\\n  event StakeWithdrawnWithFees(address user, address token, uint256 amount, uint256 amountFees);\\n\\n  // Note: the `amountFloatMinted` isn't strictly needed by the graph, but it is good to add it to validate calculations are accurate.\\n  event FloatMinted(address user, uint32 marketIndex, uint256 amountFloatMinted);\\n\\n  event MarketLaunchIncentiveParametersChanges(\\n    uint32 marketIndex,\\n    uint256 period,\\n    uint256 multiplier\\n  );\\n\\n  event StakeWithdrawalFeeUpdated(uint32 marketIndex, uint256 stakeWithdralFee);\\n\\n  event BalanceIncentiveParamsUpdated(\\n    uint32 marketIndex,\\n    uint256 balanceIncentiveExponent,\\n    int256 balanceIncentiveCurve_equilibriumOffset,\\n    uint256 safeExponentBitShifting\\n  );\\n\\n  event FloatPercentageUpdated(uint256 floatPercentage);\\n\\n  event NextPriceStakeShift(\\n    address user,\\n    uint32 marketIndex,\\n    uint256 amount,\\n    bool isShiftFromLong,\\n    uint256 userShiftIndex\\n  );\\n\\n  function userAmountStaked(address, address) external view returns (uint256);\\n\\n  function addNewStakingFund(\\n    uint32 marketIndex,\\n    address longTokenAddress,\\n    address shortTokenAddress,\\n    uint256 kInitialMultiplier,\\n    uint256 kPeriod,\\n    uint256 unstakeFee_e18,\\n    uint256 _balanceIncentiveCurve_exponent,\\n    int256 _balanceIncentiveCurve_equilibriumOffset\\n  ) external;\\n\\n  function pushUpdatedMarketPricesToUpdateFloatIssuanceCalculations(\\n    uint32 marketIndex,\\n    uint256 marketUpdateIndex,\\n    uint256 longTokenPrice,\\n    uint256 shortTokenPrice,\\n    uint256 longValue,\\n    uint256 shortValue\\n  ) external;\\n\\n  function stakeFromUser(address from, uint256 amount) external;\\n\\n  function shiftTokens(\\n    uint256 amountSyntheticTokensToShift,\\n    uint32 marketIndex,\\n    bool isShiftFromLong\\n  ) external;\\n\\n  function latestRewardIndex(uint32 marketIndex) external view returns (uint256);\\n\\n  // TODO: couldn't get this to work!\\n  function safe_getUpdateTimestamp(uint32 marketIndex, uint256 latestUpdateIndex)\\n    external\\n    view\\n    returns (uint256);\\n\\n  function mintAndStakeNextPrice(\\n    uint32 marketIndex,\\n    uint256 amount,\\n    bool isLong,\\n    address user\\n  ) external;\\n}\\n\",\"keccak256\":\"0xe13fd264cd40d9c01673327cbc69c589d0c591148f2e902ae5a58448f44b888e\",\"license\":\"BUSL-1.1\"}},\"version\":1}",
  "bytecode": "0x60a06040523060805234801561001457600080fd5b506080516125ba61004560003960008181610b0001528181610b4001528181610bc90152610c0901526125ba6000f3fe6080604052600436106101b75760003560e01c80639d34fa44116100ec578063c0d6c1801161008a578063d547741f11610064578063d547741f14610594578063ec0e8145146105b4578063f72c0d8b146105d4578063fb21062e1461060857600080fd5b8063c0d6c18014610534578063c3fc3fec14610554578063d470316b1461057457600080fd5b8063b3b4bfc3116100c6578063b3b4bfc314610462578063b777453a146104af578063b8e42ae3146104e7578063c0c53b8b1461051457600080fd5b80639d34fa44146103e9578063a217fddf14610409578063a95d4baa1461041e57600080fd5b806336568abe1161015957806375b238fc1161013357806375b238fc146103675780637d2dcbbc146103895780637f53e940146103a957806391d14854146103c957600080fd5b806336568abe146103145780633659cfe6146103345780634f1ef2861461035457600080fd5b8063248a9ca311610195578063248a9ca3146102745780632510723e146102b25780632862f1b2146102d45780632f2ff15d146102f457600080fd5b806301ffc9a7146101bc57806314993a70146101f157806319c6dd711461023d575b600080fd5b3480156101c857600080fd5b506101dc6101d7366004611f77565b610635565b60405190151581526020015b60405180910390f35b3480156101fd57600080fd5b5061021161020c366004611fb5565b61066c565b60408051951515865293151560208601529284019190915215156060830152608082015260a0016101e8565b34801561024957600080fd5b5061025d610258366004611fb5565b610733565b6040805192151583526020830191909152016101e8565b34801561028057600080fd5b506102a461028f366004611fd0565b60009081526065602052604090206001015490565b6040519081526020016101e8565b3480156102be57600080fd5b506102d26102cd366004611fe9565b6108f0565b005b3480156102e057600080fd5b506101dc6102ef366004611fb5565b610923565b34801561030057600080fd5b506102d261030f366004612028565b610a47565b34801561032057600080fd5b506102d261032f366004612028565b610a72565b34801561034057600080fd5b506102d261034f366004612058565b610af5565b6102d261036236600461208b565b610bbe565b34801561037357600080fd5b506102a460008051602061256583398151915281565b34801561039557600080fd5b506101dc6103a4366004611fb5565b610c74565b3480156103b557600080fd5b506102d26103c4366004611fe9565b610cbd565b3480156103d557600080fd5b506101dc6103e4366004612028565b610cf0565b3480156103f557600080fd5b506101dc610404366004611fb5565b610d1b565b34801561041557600080fd5b506102a4600081565b34801561042a57600080fd5b5061043e610439366004611fb5565b610d6d565b604080519415158552921515602085015291830152151560608201526080016101e8565b34801561046e57600080fd5b5061048261047d366004611fb5565b610da8565b604080519687526020870195909552938501929092526060840152608083015260a082015260c0016101e8565b3480156104bb57600080fd5b5060fb546104cf906001600160a01b031681565b6040516001600160a01b0390911681526020016101e8565b3480156104f357600080fd5b506102a4610502366004611fb5565b60fd6020526000908152604090205481565b34801561052057600080fd5b506102d261052f36600461214f565b61109f565b34801561054057600080fd5b506101dc61054f366004611fb5565b611147565b34801561056057600080fd5b506101dc61056f366004611fb5565b611455565b34801561058057600080fd5b5060fc546104cf906001600160a01b031681565b3480156105a057600080fd5b506102d26105af366004612028565b61160d565b3480156105c057600080fd5b506102d26105cf366004611fb5565b611633565b3480156105e057600080fd5b506102a47f189ab7a9244df0848122154315af71fe140f3db0fe014031783b0946b8c9d2e381565b34801561061457600080fd5b506102a4610623366004611fb5565b60fe6020526000908152604090205481565b60006001600160e01b03198216637965db0b60e01b148061066657506301ffc9a760e01b6001600160e01b03198316145b92915050565b60008060008060008060008060006106838a610d6d565b93509350935093508383838360fb60009054906101000a90046001600160a01b03166001600160a01b03166314c88ffa8f6040518263ffffffff1660e01b81526004016106dc919063ffffffff91909116815260200190565b602060405180830381865afa1580156106f9573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061071d919061219a565b939e929d50909b50995090975095505050505050565b60fb546040516344805efd60e11b815263ffffffff83166004820152600091829182916001600160a01b031690638900bdfa90602401602060405180830381865afa158015610786573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906107aa919061219a565b60fb54604051626eb7d760e61b815263ffffffff871660048201529192506000916001600160a01b0390911690631badf5c090602401602060405180830381865afa1580156107fd573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061082191906121b3565b90506000816001600160a01b031663673a7e286040518163ffffffff1660e01b81526004016020604051808303816000875af1158015610865573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610889919061219a565b905060008361089883826121e6565b6108aa90670de0b6b3a7640000612225565b6108b491906122aa565b63ffffffff8816600090815260fe6020526040902054909150808213806108e25750806108e0836122e6565b135b989197509095505050505050565b6000805160206125658339815191526109098133611645565b5063ffffffff909116600090815260fe6020526040902055565b60fc546040516338e6b01160e21b815263ffffffff8316600482015260009182916001600160a01b039091169063e39ac04490602401602060405180830381865afa158015610976573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061099a919061219a565b60fc54604051633d016d9b60e11b815263ffffffff86166004820152602481018390529192506000916001600160a01b0390911690637a02db3690604401602060405180830381865afa1580156109f5573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610a19919061219a565b63ffffffff8516600090815260fd60205260409020549091504290610a3e9083612303565b10949350505050565b600082815260656020526040902060010154610a638133611645565b610a6d83836116a9565b505050565b6001600160a01b0381163314610ae75760405162461bcd60e51b815260206004820152602f60248201527f416363657373436f6e74726f6c3a2063616e206f6e6c792072656e6f756e636560448201526e103937b632b9903337b91039b2b63360891b60648201526084015b60405180910390fd5b610af1828261172f565b5050565b306001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000161415610b3e5760405162461bcd60e51b8152600401610ade9061231b565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316610b70611796565b6001600160a01b031614610b965760405162461bcd60e51b8152600401610ade90612367565b610b9f816117c4565b60408051600080825260208201909252610bbb918391906117ef565b50565b306001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000161415610c075760405162461bcd60e51b8152600401610ade9061231b565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316610c39611796565b6001600160a01b031614610c5f5760405162461bcd60e51b8152600401610ade90612367565b610c68826117c4565b610af1828260016117ef565b6000610c7f82610923565b15610c8c57506001919050565b610c9582611455565b15610ca257506001919050565b610cab82611147565b15610cb857506001919050565b919050565b600080516020612565833981519152610cd68133611645565b5063ffffffff909116600090815260fd6020526040902055565b60009182526065602090815260408084206001600160a01b0393909316845291905290205460ff1690565b6000610d2682610923565b15610d3357506001919050565b6000610d3e83610733565b5090508015610d505750600192915050565b610d5983611147565b15610d675750600192915050565b50919050565b600080600080600080610d7f87610733565b91509150610d8c87610923565b8282610d978a611147565b955095509550955050509193509193565b60fb546040516364e4a81d60e01b815263ffffffff8316600482015260016024820152600091829182918291829182916001600160a01b03909116906364e4a81d90604401602060405180830381865afa158015610e0a573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610e2e919061219a565b60fb546040516334daaa2560e01b815263ffffffff8a166004820152600160248201526001600160a01b03909116906334daaa2590604401602060405180830381865afa158015610e83573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610ea7919061219a565b60fb54604051637c064dc960e11b815263ffffffff8b166004820152600160248201526001600160a01b039091169063f80c9b9290604401602060405180830381865afa158015610efc573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610f20919061219a565b60fb546040516364e4a81d60e01b815263ffffffff8c166004820152600060248201526001600160a01b03909116906364e4a81d90604401602060405180830381865afa158015610f75573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610f99919061219a565b60fb546040516334daaa2560e01b815263ffffffff8d166004820152600060248201526001600160a01b03909116906334daaa2590604401602060405180830381865afa158015610fee573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611012919061219a565b60fb54604051637c064dc960e11b815263ffffffff8e166004820152600060248201526001600160a01b039091169063f80c9b9290604401602060405180830381865afa158015611067573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061108b919061219a565b949c939b5091995097509550909350915050565b600054610100900460ff16806110b8575060005460ff16155b6110d45760405162461bcd60e51b8152600401610ade906123b3565b600054610100900460ff161580156110f6576000805461ffff19166101011790555b60fb80546001600160a01b038086166001600160a01b03199283161790925560fc80549285169290911691909117905561112f8461193a565b8015611141576000805461ff00191690555b50505050565b60fb546040516364e4a81d60e01b815263ffffffff831660048201526001602482015260009182916001600160a01b03909116906364e4a81d90604401602060405180830381865afa1580156111a1573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906111c5919061219a565b1180611248575060fb546040516334daaa2560e01b815263ffffffff84166004820152600160248201526000916001600160a01b0316906334daaa2590604401602060405180830381865afa158015611222573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611246919061219a565b115b806112ca575060fb54604051637c064dc960e11b815263ffffffff84166004820152600160248201526000916001600160a01b03169063f80c9b9290604401602060405180830381865afa1580156112a4573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906112c8919061219a565b115b8061134c575060fb546040516364e4a81d60e01b815263ffffffff84166004820152600060248201819052916001600160a01b0316906364e4a81d90604401602060405180830381865afa158015611326573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061134a919061219a565b115b806113ce575060fb546040516334daaa2560e01b815263ffffffff84166004820152600060248201819052916001600160a01b0316906334daaa2590604401602060405180830381865afa1580156113a8573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906113cc919061219a565b115b80610666575060fb54604051637c064dc960e11b815263ffffffff84166004820152600060248201819052916001600160a01b03169063f80c9b9290604401602060405180830381865afa15801561142a573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061144e919061219a565b1192915050565b60fb546040516344805efd60e11b815263ffffffff8316600482015260009182916001600160a01b0390911690638900bdfa90602401602060405180830381865afa1580156114a8573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906114cc919061219a565b60fb54604051626eb7d760e61b815263ffffffff861660048201529192506000916001600160a01b0390911690631badf5c090602401602060405180830381865afa15801561151f573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061154391906121b3565b90506000816001600160a01b0316638e15f4736040518163ffffffff1660e01b8152600401602060405180830381865afa158015611585573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906115a9919061219a565b90506000836115b883826121e6565b6115ca90670de0b6b3a7640000612225565b6115d491906122aa565b63ffffffff8716600090815260fe602052604090205490915080821380611602575080611600836122e6565b135b979650505050505050565b6000828152606560205260409020600101546116298133611645565b610a6d838361172f565b61163c81610da8565b50505050505050565b61164f8282610cf0565b610af157611667816001600160a01b031660146119bf565b6116728360206119bf565b60405160200161168392919061242d565b60408051601f198184030181529082905262461bcd60e51b8252610ade916004016124a2565b6116b38282610cf0565b610af15760008281526065602090815260408083206001600160a01b03851684529091529020805460ff191660011790556116eb3390565b6001600160a01b0316816001600160a01b0316837f2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d60405160405180910390a45050565b6117398282610cf0565b15610af15760008281526065602090815260408083206001600160a01b0385168085529252808320805460ff1916905551339285917ff6391f5c32d9c69d2a47ea670b442974b53935d1edc7fd64eb21e047a839171b9190a45050565b7f360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc546001600160a01b031690565b7f189ab7a9244df0848122154315af71fe140f3db0fe014031783b0946b8c9d2e3610af18133611645565b60006117f9611796565b905061180484611b62565b6000835111806118115750815b15611822576118208484611c07565b505b7f4910fdfa16fed3260ed0e7147f7cc6da11a60208b5b9406d12a635614ffd9143805460ff1661193357805460ff191660011781556040516001600160a01b03831660248201526118a190869060440160408051601f198184030181529190526020810180516001600160e01b0316631b2ce7f360e11b179052611c07565b50805460ff191681556118b2611796565b6001600160a01b0316826001600160a01b03161461192a5760405162461bcd60e51b815260206004820152602f60248201527f45524331393637557067726164653a207570677261646520627265616b73206660448201526e75727468657220757067726164657360881b6064820152608401610ade565b61193385611cf2565b5050505050565b600054610100900460ff1680611953575060005460ff16155b61196f5760405162461bcd60e51b8152600401610ade906123b3565b600054610100900460ff16158015611991576000805461ffff19166101011790555b611999611d32565b6119a1611db5565b6119aa82611e13565b8015610af1576000805461ff00191690555050565b606060006119ce8360026124d5565b6119d9906002612303565b67ffffffffffffffff8111156119f1576119f1612075565b6040519080825280601f01601f191660200182016040528015611a1b576020820181803683370190505b509050600360fc1b81600081518110611a3657611a366124f4565b60200101906001600160f81b031916908160001a905350600f60fb1b81600181518110611a6557611a656124f4565b60200101906001600160f81b031916908160001a9053506000611a898460026124d5565b611a94906001612303565b90505b6001811115611b0c576f181899199a1a9b1b9c1cb0b131b232b360811b85600f1660108110611ac857611ac86124f4565b1a60f81b828281518110611ade57611ade6124f4565b60200101906001600160f81b031916908160001a90535060049490941c93611b058161250a565b9050611a97565b508315611b5b5760405162461bcd60e51b815260206004820181905260248201527f537472696e67733a20686578206c656e67746820696e73756666696369656e746044820152606401610ade565b9392505050565b803b611bc65760405162461bcd60e51b815260206004820152602d60248201527f455243313936373a206e657720696d706c656d656e746174696f6e206973206e60448201526c1bdd08184818dbdb9d1c9858dd609a1b6064820152608401610ade565b7f360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc80546001600160a01b0319166001600160a01b0392909216919091179055565b6060823b611c665760405162461bcd60e51b815260206004820152602660248201527f416464726573733a2064656c65676174652063616c6c20746f206e6f6e2d636f6044820152651b9d1c9858dd60d21b6064820152608401610ade565b600080846001600160a01b031684604051611c819190612521565b600060405180830381855af49150503d8060008114611cbc576040519150601f19603f3d011682016040523d82523d6000602084013e611cc1565b606091505b5091509150611ce9828260405180606001604052806027815260200161253e60279139611eca565b95945050505050565b611cfb81611b62565b6040516001600160a01b038216907fbc7cd75a20ee27fd9adebab32041f755214dbc6bffa90cc0225b39da2e5c2d3b90600090a250565b600054610100900460ff1680611d4b575060005460ff16155b611d675760405162461bcd60e51b8152600401610ade906123b3565b600054610100900460ff16158015611d89576000805461ffff19166101011790555b611d91611f03565b611d99611f03565b611da1611f03565b8015610bbb576000805461ff001916905550565b600054610100900460ff1680611dce575060005460ff16155b611dea5760405162461bcd60e51b8152600401610ade906123b3565b600054610100900460ff16158015611d91576000805461ffff1916610101179055611d99611f03565b600054610100900460ff1680611e2c575060005460ff16155b611e485760405162461bcd60e51b8152600401610ade906123b3565b600054610100900460ff16158015611e6a576000805461ffff19166101011790555b6001600160a01b038216611e7d57600080fd5b611e88600083611f6d565b611ea060008051602061256583398151915283611f6d565b6119aa7f189ab7a9244df0848122154315af71fe140f3db0fe014031783b0946b8c9d2e383611f6d565b60608315611ed9575081611b5b565b825115611ee95782518084602001fd5b8160405162461bcd60e51b8152600401610ade91906124a2565b600054610100900460ff1680611f1c575060005460ff16155b611f385760405162461bcd60e51b8152600401610ade906123b3565b600054610100900460ff16158015611da1576000805461ffff19166101011790558015610bbb576000805461ff001916905550565b610af182826116a9565b600060208284031215611f8957600080fd5b81356001600160e01b031981168114611b5b57600080fd5b803563ffffffff81168114610cb857600080fd5b600060208284031215611fc757600080fd5b611b5b82611fa1565b600060208284031215611fe257600080fd5b5035919050565b60008060408385031215611ffc57600080fd5b61200583611fa1565b946020939093013593505050565b6001600160a01b0381168114610bbb57600080fd5b6000806040838503121561203b57600080fd5b82359150602083013561204d81612013565b809150509250929050565b60006020828403121561206a57600080fd5b8135611b5b81612013565b634e487b7160e01b600052604160045260246000fd5b6000806040838503121561209e57600080fd5b82356120a981612013565b9150602083013567ffffffffffffffff808211156120c657600080fd5b818501915085601f8301126120da57600080fd5b8135818111156120ec576120ec612075565b604051601f8201601f19908116603f0116810190838211818310171561211457612114612075565b8160405282815288602084870101111561212d57600080fd5b8260208601602083013760006020848301015280955050505050509250929050565b60008060006060848603121561216457600080fd5b833561216f81612013565b9250602084013561217f81612013565b9150604084013561218f81612013565b809150509250925092565b6000602082840312156121ac57600080fd5b5051919050565b6000602082840312156121c557600080fd5b8151611b5b81612013565b634e487b7160e01b600052601160045260246000fd5b60008083128015600160ff1b850184121615612204576122046121d0565b6001600160ff1b038401831381161561221f5761221f6121d0565b50500390565b60006001600160ff1b038184138284138082168684048611161561224b5761224b6121d0565b600160ff1b600087128281168783058912161561226a5761226a6121d0565b60008712925087820587128484161615612286576122866121d0565b8785058712818416161561229c5761229c6121d0565b505050929093029392505050565b6000826122c757634e487b7160e01b600052601260045260246000fd5b600160ff1b8214600019841416156122e1576122e16121d0565b500590565b6000600160ff1b8214156122fc576122fc6121d0565b5060000390565b60008219821115612316576123166121d0565b500190565b6020808252602c908201527f46756e6374696f6e206d7573742062652063616c6c6564207468726f7567682060408201526b19195b1959d85d1958d85b1b60a21b606082015260800190565b6020808252602c908201527f46756e6374696f6e206d7573742062652063616c6c6564207468726f7567682060408201526b6163746976652070726f787960a01b606082015260800190565b6020808252602e908201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160408201526d191e481a5b9a5d1a585b1a5e995960921b606082015260800190565b60005b8381101561241c578181015183820152602001612404565b838111156111415750506000910152565b7f416363657373436f6e74726f6c3a206163636f756e7420000000000000000000815260008351612465816017850160208801612401565b7001034b99036b4b9b9b4b733903937b6329607d1b6017918401918201528351612496816028840160208801612401565b01602801949350505050565b60208152600082518060208401526124c1816040850160208701612401565b601f01601f19169190910160400192915050565b60008160001904831182151516156124ef576124ef6121d0565b500290565b634e487b7160e01b600052603260045260246000fd5b600081612519576125196121d0565b506000190190565b60008251612533818460208701612401565b919091019291505056fe416464726573733a206c6f772d6c6576656c2064656c65676174652063616c6c206661696c6564a49807205ce4d355092ef5a8a18f56e8913cf4a201fbe287825b095693c21775a2646970667358221220f63dd8b37c34a34e43da32a593bd90e451d042d644093beb2898f9e4b6d4558964736f6c634300080a0033",
  "deployedBytecode": "0x6080604052600436106101b75760003560e01c80639d34fa44116100ec578063c0d6c1801161008a578063d547741f11610064578063d547741f14610594578063ec0e8145146105b4578063f72c0d8b146105d4578063fb21062e1461060857600080fd5b8063c0d6c18014610534578063c3fc3fec14610554578063d470316b1461057457600080fd5b8063b3b4bfc3116100c6578063b3b4bfc314610462578063b777453a146104af578063b8e42ae3146104e7578063c0c53b8b1461051457600080fd5b80639d34fa44146103e9578063a217fddf14610409578063a95d4baa1461041e57600080fd5b806336568abe1161015957806375b238fc1161013357806375b238fc146103675780637d2dcbbc146103895780637f53e940146103a957806391d14854146103c957600080fd5b806336568abe146103145780633659cfe6146103345780634f1ef2861461035457600080fd5b8063248a9ca311610195578063248a9ca3146102745780632510723e146102b25780632862f1b2146102d45780632f2ff15d146102f457600080fd5b806301ffc9a7146101bc57806314993a70146101f157806319c6dd711461023d575b600080fd5b3480156101c857600080fd5b506101dc6101d7366004611f77565b610635565b60405190151581526020015b60405180910390f35b3480156101fd57600080fd5b5061021161020c366004611fb5565b61066c565b60408051951515865293151560208601529284019190915215156060830152608082015260a0016101e8565b34801561024957600080fd5b5061025d610258366004611fb5565b610733565b6040805192151583526020830191909152016101e8565b34801561028057600080fd5b506102a461028f366004611fd0565b60009081526065602052604090206001015490565b6040519081526020016101e8565b3480156102be57600080fd5b506102d26102cd366004611fe9565b6108f0565b005b3480156102e057600080fd5b506101dc6102ef366004611fb5565b610923565b34801561030057600080fd5b506102d261030f366004612028565b610a47565b34801561032057600080fd5b506102d261032f366004612028565b610a72565b34801561034057600080fd5b506102d261034f366004612058565b610af5565b6102d261036236600461208b565b610bbe565b34801561037357600080fd5b506102a460008051602061256583398151915281565b34801561039557600080fd5b506101dc6103a4366004611fb5565b610c74565b3480156103b557600080fd5b506102d26103c4366004611fe9565b610cbd565b3480156103d557600080fd5b506101dc6103e4366004612028565b610cf0565b3480156103f557600080fd5b506101dc610404366004611fb5565b610d1b565b34801561041557600080fd5b506102a4600081565b34801561042a57600080fd5b5061043e610439366004611fb5565b610d6d565b604080519415158552921515602085015291830152151560608201526080016101e8565b34801561046e57600080fd5b5061048261047d366004611fb5565b610da8565b604080519687526020870195909552938501929092526060840152608083015260a082015260c0016101e8565b3480156104bb57600080fd5b5060fb546104cf906001600160a01b031681565b6040516001600160a01b0390911681526020016101e8565b3480156104f357600080fd5b506102a4610502366004611fb5565b60fd6020526000908152604090205481565b34801561052057600080fd5b506102d261052f36600461214f565b61109f565b34801561054057600080fd5b506101dc61054f366004611fb5565b611147565b34801561056057600080fd5b506101dc61056f366004611fb5565b611455565b34801561058057600080fd5b5060fc546104cf906001600160a01b031681565b3480156105a057600080fd5b506102d26105af366004612028565b61160d565b3480156105c057600080fd5b506102d26105cf366004611fb5565b611633565b3480156105e057600080fd5b506102a47f189ab7a9244df0848122154315af71fe140f3db0fe014031783b0946b8c9d2e381565b34801561061457600080fd5b506102a4610623366004611fb5565b60fe6020526000908152604090205481565b60006001600160e01b03198216637965db0b60e01b148061066657506301ffc9a760e01b6001600160e01b03198316145b92915050565b60008060008060008060008060006106838a610d6d565b93509350935093508383838360fb60009054906101000a90046001600160a01b03166001600160a01b03166314c88ffa8f6040518263ffffffff1660e01b81526004016106dc919063ffffffff91909116815260200190565b602060405180830381865afa1580156106f9573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061071d919061219a565b939e929d50909b50995090975095505050505050565b60fb546040516344805efd60e11b815263ffffffff83166004820152600091829182916001600160a01b031690638900bdfa90602401602060405180830381865afa158015610786573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906107aa919061219a565b60fb54604051626eb7d760e61b815263ffffffff871660048201529192506000916001600160a01b0390911690631badf5c090602401602060405180830381865afa1580156107fd573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061082191906121b3565b90506000816001600160a01b031663673a7e286040518163ffffffff1660e01b81526004016020604051808303816000875af1158015610865573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610889919061219a565b905060008361089883826121e6565b6108aa90670de0b6b3a7640000612225565b6108b491906122aa565b63ffffffff8816600090815260fe6020526040902054909150808213806108e25750806108e0836122e6565b135b989197509095505050505050565b6000805160206125658339815191526109098133611645565b5063ffffffff909116600090815260fe6020526040902055565b60fc546040516338e6b01160e21b815263ffffffff8316600482015260009182916001600160a01b039091169063e39ac04490602401602060405180830381865afa158015610976573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061099a919061219a565b60fc54604051633d016d9b60e11b815263ffffffff86166004820152602481018390529192506000916001600160a01b0390911690637a02db3690604401602060405180830381865afa1580156109f5573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610a19919061219a565b63ffffffff8516600090815260fd60205260409020549091504290610a3e9083612303565b10949350505050565b600082815260656020526040902060010154610a638133611645565b610a6d83836116a9565b505050565b6001600160a01b0381163314610ae75760405162461bcd60e51b815260206004820152602f60248201527f416363657373436f6e74726f6c3a2063616e206f6e6c792072656e6f756e636560448201526e103937b632b9903337b91039b2b63360891b60648201526084015b60405180910390fd5b610af1828261172f565b5050565b306001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000161415610b3e5760405162461bcd60e51b8152600401610ade9061231b565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316610b70611796565b6001600160a01b031614610b965760405162461bcd60e51b8152600401610ade90612367565b610b9f816117c4565b60408051600080825260208201909252610bbb918391906117ef565b50565b306001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000161415610c075760405162461bcd60e51b8152600401610ade9061231b565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316610c39611796565b6001600160a01b031614610c5f5760405162461bcd60e51b8152600401610ade90612367565b610c68826117c4565b610af1828260016117ef565b6000610c7f82610923565b15610c8c57506001919050565b610c9582611455565b15610ca257506001919050565b610cab82611147565b15610cb857506001919050565b919050565b600080516020612565833981519152610cd68133611645565b5063ffffffff909116600090815260fd6020526040902055565b60009182526065602090815260408084206001600160a01b0393909316845291905290205460ff1690565b6000610d2682610923565b15610d3357506001919050565b6000610d3e83610733565b5090508015610d505750600192915050565b610d5983611147565b15610d675750600192915050565b50919050565b600080600080600080610d7f87610733565b91509150610d8c87610923565b8282610d978a611147565b955095509550955050509193509193565b60fb546040516364e4a81d60e01b815263ffffffff8316600482015260016024820152600091829182918291829182916001600160a01b03909116906364e4a81d90604401602060405180830381865afa158015610e0a573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610e2e919061219a565b60fb546040516334daaa2560e01b815263ffffffff8a166004820152600160248201526001600160a01b03909116906334daaa2590604401602060405180830381865afa158015610e83573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610ea7919061219a565b60fb54604051637c064dc960e11b815263ffffffff8b166004820152600160248201526001600160a01b039091169063f80c9b9290604401602060405180830381865afa158015610efc573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610f20919061219a565b60fb546040516364e4a81d60e01b815263ffffffff8c166004820152600060248201526001600160a01b03909116906364e4a81d90604401602060405180830381865afa158015610f75573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610f99919061219a565b60fb546040516334daaa2560e01b815263ffffffff8d166004820152600060248201526001600160a01b03909116906334daaa2590604401602060405180830381865afa158015610fee573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611012919061219a565b60fb54604051637c064dc960e11b815263ffffffff8e166004820152600060248201526001600160a01b039091169063f80c9b9290604401602060405180830381865afa158015611067573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061108b919061219a565b949c939b5091995097509550909350915050565b600054610100900460ff16806110b8575060005460ff16155b6110d45760405162461bcd60e51b8152600401610ade906123b3565b600054610100900460ff161580156110f6576000805461ffff19166101011790555b60fb80546001600160a01b038086166001600160a01b03199283161790925560fc80549285169290911691909117905561112f8461193a565b8015611141576000805461ff00191690555b50505050565b60fb546040516364e4a81d60e01b815263ffffffff831660048201526001602482015260009182916001600160a01b03909116906364e4a81d90604401602060405180830381865afa1580156111a1573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906111c5919061219a565b1180611248575060fb546040516334daaa2560e01b815263ffffffff84166004820152600160248201526000916001600160a01b0316906334daaa2590604401602060405180830381865afa158015611222573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611246919061219a565b115b806112ca575060fb54604051637c064dc960e11b815263ffffffff84166004820152600160248201526000916001600160a01b03169063f80c9b9290604401602060405180830381865afa1580156112a4573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906112c8919061219a565b115b8061134c575060fb546040516364e4a81d60e01b815263ffffffff84166004820152600060248201819052916001600160a01b0316906364e4a81d90604401602060405180830381865afa158015611326573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061134a919061219a565b115b806113ce575060fb546040516334daaa2560e01b815263ffffffff84166004820152600060248201819052916001600160a01b0316906334daaa2590604401602060405180830381865afa1580156113a8573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906113cc919061219a565b115b80610666575060fb54604051637c064dc960e11b815263ffffffff84166004820152600060248201819052916001600160a01b03169063f80c9b9290604401602060405180830381865afa15801561142a573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061144e919061219a565b1192915050565b60fb546040516344805efd60e11b815263ffffffff8316600482015260009182916001600160a01b0390911690638900bdfa90602401602060405180830381865afa1580156114a8573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906114cc919061219a565b60fb54604051626eb7d760e61b815263ffffffff861660048201529192506000916001600160a01b0390911690631badf5c090602401602060405180830381865afa15801561151f573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061154391906121b3565b90506000816001600160a01b0316638e15f4736040518163ffffffff1660e01b8152600401602060405180830381865afa158015611585573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906115a9919061219a565b90506000836115b883826121e6565b6115ca90670de0b6b3a7640000612225565b6115d491906122aa565b63ffffffff8716600090815260fe602052604090205490915080821380611602575080611600836122e6565b135b979650505050505050565b6000828152606560205260409020600101546116298133611645565b610a6d838361172f565b61163c81610da8565b50505050505050565b61164f8282610cf0565b610af157611667816001600160a01b031660146119bf565b6116728360206119bf565b60405160200161168392919061242d565b60408051601f198184030181529082905262461bcd60e51b8252610ade916004016124a2565b6116b38282610cf0565b610af15760008281526065602090815260408083206001600160a01b03851684529091529020805460ff191660011790556116eb3390565b6001600160a01b0316816001600160a01b0316837f2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d60405160405180910390a45050565b6117398282610cf0565b15610af15760008281526065602090815260408083206001600160a01b0385168085529252808320805460ff1916905551339285917ff6391f5c32d9c69d2a47ea670b442974b53935d1edc7fd64eb21e047a839171b9190a45050565b7f360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc546001600160a01b031690565b7f189ab7a9244df0848122154315af71fe140f3db0fe014031783b0946b8c9d2e3610af18133611645565b60006117f9611796565b905061180484611b62565b6000835111806118115750815b15611822576118208484611c07565b505b7f4910fdfa16fed3260ed0e7147f7cc6da11a60208b5b9406d12a635614ffd9143805460ff1661193357805460ff191660011781556040516001600160a01b03831660248201526118a190869060440160408051601f198184030181529190526020810180516001600160e01b0316631b2ce7f360e11b179052611c07565b50805460ff191681556118b2611796565b6001600160a01b0316826001600160a01b03161461192a5760405162461bcd60e51b815260206004820152602f60248201527f45524331393637557067726164653a207570677261646520627265616b73206660448201526e75727468657220757067726164657360881b6064820152608401610ade565b61193385611cf2565b5050505050565b600054610100900460ff1680611953575060005460ff16155b61196f5760405162461bcd60e51b8152600401610ade906123b3565b600054610100900460ff16158015611991576000805461ffff19166101011790555b611999611d32565b6119a1611db5565b6119aa82611e13565b8015610af1576000805461ff00191690555050565b606060006119ce8360026124d5565b6119d9906002612303565b67ffffffffffffffff8111156119f1576119f1612075565b6040519080825280601f01601f191660200182016040528015611a1b576020820181803683370190505b509050600360fc1b81600081518110611a3657611a366124f4565b60200101906001600160f81b031916908160001a905350600f60fb1b81600181518110611a6557611a656124f4565b60200101906001600160f81b031916908160001a9053506000611a898460026124d5565b611a94906001612303565b90505b6001811115611b0c576f181899199a1a9b1b9c1cb0b131b232b360811b85600f1660108110611ac857611ac86124f4565b1a60f81b828281518110611ade57611ade6124f4565b60200101906001600160f81b031916908160001a90535060049490941c93611b058161250a565b9050611a97565b508315611b5b5760405162461bcd60e51b815260206004820181905260248201527f537472696e67733a20686578206c656e67746820696e73756666696369656e746044820152606401610ade565b9392505050565b803b611bc65760405162461bcd60e51b815260206004820152602d60248201527f455243313936373a206e657720696d706c656d656e746174696f6e206973206e60448201526c1bdd08184818dbdb9d1c9858dd609a1b6064820152608401610ade565b7f360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc80546001600160a01b0319166001600160a01b0392909216919091179055565b6060823b611c665760405162461bcd60e51b815260206004820152602660248201527f416464726573733a2064656c65676174652063616c6c20746f206e6f6e2d636f6044820152651b9d1c9858dd60d21b6064820152608401610ade565b600080846001600160a01b031684604051611c819190612521565b600060405180830381855af49150503d8060008114611cbc576040519150601f19603f3d011682016040523d82523d6000602084013e611cc1565b606091505b5091509150611ce9828260405180606001604052806027815260200161253e60279139611eca565b95945050505050565b611cfb81611b62565b6040516001600160a01b038216907fbc7cd75a20ee27fd9adebab32041f755214dbc6bffa90cc0225b39da2e5c2d3b90600090a250565b600054610100900460ff1680611d4b575060005460ff16155b611d675760405162461bcd60e51b8152600401610ade906123b3565b600054610100900460ff16158015611d89576000805461ffff19166101011790555b611d91611f03565b611d99611f03565b611da1611f03565b8015610bbb576000805461ff001916905550565b600054610100900460ff1680611dce575060005460ff16155b611dea5760405162461bcd60e51b8152600401610ade906123b3565b600054610100900460ff16158015611d91576000805461ffff1916610101179055611d99611f03565b600054610100900460ff1680611e2c575060005460ff16155b611e485760405162461bcd60e51b8152600401610ade906123b3565b600054610100900460ff16158015611e6a576000805461ffff19166101011790555b6001600160a01b038216611e7d57600080fd5b611e88600083611f6d565b611ea060008051602061256583398151915283611f6d565b6119aa7f189ab7a9244df0848122154315af71fe140f3db0fe014031783b0946b8c9d2e383611f6d565b60608315611ed9575081611b5b565b825115611ee95782518084602001fd5b8160405162461bcd60e51b8152600401610ade91906124a2565b600054610100900460ff1680611f1c575060005460ff16155b611f385760405162461bcd60e51b8152600401610ade906123b3565b600054610100900460ff16158015611da1576000805461ffff19166101011790558015610bbb576000805461ff001916905550565b610af182826116a9565b600060208284031215611f8957600080fd5b81356001600160e01b031981168114611b5b57600080fd5b803563ffffffff81168114610cb857600080fd5b600060208284031215611fc757600080fd5b611b5b82611fa1565b600060208284031215611fe257600080fd5b5035919050565b60008060408385031215611ffc57600080fd5b61200583611fa1565b946020939093013593505050565b6001600160a01b0381168114610bbb57600080fd5b6000806040838503121561203b57600080fd5b82359150602083013561204d81612013565b809150509250929050565b60006020828403121561206a57600080fd5b8135611b5b81612013565b634e487b7160e01b600052604160045260246000fd5b6000806040838503121561209e57600080fd5b82356120a981612013565b9150602083013567ffffffffffffffff808211156120c657600080fd5b818501915085601f8301126120da57600080fd5b8135818111156120ec576120ec612075565b604051601f8201601f19908116603f0116810190838211818310171561211457612114612075565b8160405282815288602084870101111561212d57600080fd5b8260208601602083013760006020848301015280955050505050509250929050565b60008060006060848603121561216457600080fd5b833561216f81612013565b9250602084013561217f81612013565b9150604084013561218f81612013565b809150509250925092565b6000602082840312156121ac57600080fd5b5051919050565b6000602082840312156121c557600080fd5b8151611b5b81612013565b634e487b7160e01b600052601160045260246000fd5b60008083128015600160ff1b850184121615612204576122046121d0565b6001600160ff1b038401831381161561221f5761221f6121d0565b50500390565b60006001600160ff1b038184138284138082168684048611161561224b5761224b6121d0565b600160ff1b600087128281168783058912161561226a5761226a6121d0565b60008712925087820587128484161615612286576122866121d0565b8785058712818416161561229c5761229c6121d0565b505050929093029392505050565b6000826122c757634e487b7160e01b600052601260045260246000fd5b600160ff1b8214600019841416156122e1576122e16121d0565b500590565b6000600160ff1b8214156122fc576122fc6121d0565b5060000390565b60008219821115612316576123166121d0565b500190565b6020808252602c908201527f46756e6374696f6e206d7573742062652063616c6c6564207468726f7567682060408201526b19195b1959d85d1958d85b1b60a21b606082015260800190565b6020808252602c908201527f46756e6374696f6e206d7573742062652063616c6c6564207468726f7567682060408201526b6163746976652070726f787960a01b606082015260800190565b6020808252602e908201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160408201526d191e481a5b9a5d1a585b1a5e995960921b606082015260800190565b60005b8381101561241c578181015183820152602001612404565b838111156111415750506000910152565b7f416363657373436f6e74726f6c3a206163636f756e7420000000000000000000815260008351612465816017850160208801612401565b7001034b99036b4b9b9b4b733903937b6329607d1b6017918401918201528351612496816028840160208801612401565b01602801949350505050565b60208152600082518060208401526124c1816040850160208701612401565b601f01601f19169190910160400192915050565b60008160001904831182151516156124ef576124ef6121d0565b500290565b634e487b7160e01b600052603260045260246000fd5b600081612519576125196121d0565b506000190190565b60008251612533818460208701612401565b919091019291505056fe416464726573733a206c6f772d6c6576656c2064656c65676174652063616c6c206661696c6564a49807205ce4d355092ef5a8a18f56e8913cf4a201fbe287825b095693c21775a2646970667358221220f63dd8b37c34a34e43da32a593bd90e451d042d644093beb2898f9e4b6d4558964736f6c634300080a0033",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "getRoleAdmin(bytes32)": {
        "details": "Returns the admin role that controls `role`. See {grantRole} and {revokeRole}. To change a role's admin, use {_setRoleAdmin}."
      },
      "grantRole(bytes32,address)": {
        "details": "Grants `role` to `account`. If `account` had not been already granted `role`, emits a {RoleGranted} event. Requirements: - the caller must have ``role``'s admin role."
      },
      "hasRole(bytes32,address)": {
        "details": "Returns `true` if `account` has been granted `role`."
      },
      "renounceRole(bytes32,address)": {
        "details": "Revokes `role` from the calling account. Roles are often managed via {grantRole} and {revokeRole}: this function's purpose is to provide a mechanism for accounts to lose their privileges if they are compromised (such as when a trusted device is misplaced). If the calling account had been revoked `role`, emits a {RoleRevoked} event. Requirements: - the caller must be `account`."
      },
      "revokeRole(bytes32,address)": {
        "details": "Revokes `role` from `account`. If `account` had been granted `role`, emits a {RoleRevoked} event. Requirements: - the caller must have ``role``'s admin role."
      },
      "supportsInterface(bytes4)": {
        "details": "See {IERC165-supportsInterface}."
      },
      "upgradeTo(address)": {
        "details": "Upgrade the implementation of the proxy to `newImplementation`. Calls {_authorizeUpgrade}. Emits an {Upgraded} event."
      },
      "upgradeToAndCall(address,bytes)": {
        "details": "Upgrade the implementation of the proxy to `newImplementation`, and subsequently execute the function call encoded in `data`. Calls {_authorizeUpgrade}. Emits an {Upgraded} event."
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 1050,
        "contract": "contracts/KeeperExperiment.sol:KeeperExperiment",
        "label": "_initialized",
        "offset": 0,
        "slot": "0",
        "type": "t_bool"
      },
      {
        "astId": 1053,
        "contract": "contracts/KeeperExperiment.sol:KeeperExperiment",
        "label": "_initializing",
        "offset": 1,
        "slot": "0",
        "type": "t_bool"
      },
      {
        "astId": 5322,
        "contract": "contracts/KeeperExperiment.sol:KeeperExperiment",
        "label": "__gap",
        "offset": 0,
        "slot": "1",
        "type": "t_array(t_uint256)50_storage"
      },
      {
        "astId": 6244,
        "contract": "contracts/KeeperExperiment.sol:KeeperExperiment",
        "label": "__gap",
        "offset": 0,
        "slot": "51",
        "type": "t_array(t_uint256)50_storage"
      },
      {
        "astId": 250,
        "contract": "contracts/KeeperExperiment.sol:KeeperExperiment",
        "label": "_roles",
        "offset": 0,
        "slot": "101",
        "type": "t_mapping(t_bytes32,t_struct(RoleData)245_storage)"
      },
      {
        "astId": 537,
        "contract": "contracts/KeeperExperiment.sol:KeeperExperiment",
        "label": "__gap",
        "offset": 0,
        "slot": "102",
        "type": "t_array(t_uint256)49_storage"
      },
      {
        "astId": 1033,
        "contract": "contracts/KeeperExperiment.sol:KeeperExperiment",
        "label": "__gap",
        "offset": 0,
        "slot": "151",
        "type": "t_array(t_uint256)50_storage"
      },
      {
        "astId": 1200,
        "contract": "contracts/KeeperExperiment.sol:KeeperExperiment",
        "label": "__gap",
        "offset": 0,
        "slot": "201",
        "type": "t_array(t_uint256)50_storage"
      },
      {
        "astId": 13394,
        "contract": "contracts/KeeperExperiment.sol:KeeperExperiment",
        "label": "longShortAddress",
        "offset": 0,
        "slot": "251",
        "type": "t_address"
      },
      {
        "astId": 13396,
        "contract": "contracts/KeeperExperiment.sol:KeeperExperiment",
        "label": "stakerAddress",
        "offset": 0,
        "slot": "252",
        "type": "t_address"
      },
      {
        "astId": 13400,
        "contract": "contracts/KeeperExperiment.sol:KeeperExperiment",
        "label": "updateTimeThresholdInSeconds",
        "offset": 0,
        "slot": "253",
        "type": "t_mapping(t_uint32,t_uint256)"
      },
      {
        "astId": 13404,
        "contract": "contracts/KeeperExperiment.sol:KeeperExperiment",
        "label": "percentChangeThreshold",
        "offset": 0,
        "slot": "254",
        "type": "t_mapping(t_uint32,t_uint256)"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_uint256)49_storage": {
        "base": "t_uint256",
        "encoding": "inplace",
        "label": "uint256[49]",
        "numberOfBytes": "1568"
      },
      "t_array(t_uint256)50_storage": {
        "base": "t_uint256",
        "encoding": "inplace",
        "label": "uint256[50]",
        "numberOfBytes": "1600"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_bytes32": {
        "encoding": "inplace",
        "label": "bytes32",
        "numberOfBytes": "32"
      },
      "t_mapping(t_address,t_bool)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_mapping(t_bytes32,t_struct(RoleData)245_storage)": {
        "encoding": "mapping",
        "key": "t_bytes32",
        "label": "mapping(bytes32 => struct AccessControlUpgradeable.RoleData)",
        "numberOfBytes": "32",
        "value": "t_struct(RoleData)245_storage"
      },
      "t_mapping(t_uint32,t_uint256)": {
        "encoding": "mapping",
        "key": "t_uint32",
        "label": "mapping(uint32 => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_struct(RoleData)245_storage": {
        "encoding": "inplace",
        "label": "struct AccessControlUpgradeable.RoleData",
        "members": [
          {
            "astId": 242,
            "contract": "contracts/KeeperExperiment.sol:KeeperExperiment",
            "label": "members",
            "offset": 0,
            "slot": "0",
            "type": "t_mapping(t_address,t_bool)"
          },
          {
            "astId": 244,
            "contract": "contracts/KeeperExperiment.sol:KeeperExperiment",
            "label": "adminRole",
            "offset": 0,
            "slot": "1",
            "type": "t_bytes32"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      },
      "t_uint32": {
        "encoding": "inplace",
        "label": "uint32",
        "numberOfBytes": "4"
      }
    }
  }
}