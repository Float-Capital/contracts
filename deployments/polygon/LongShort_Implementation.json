{
  "address": "0x16488343e508C2BFB7F180185848F924184c9C9F",
  "abi": [
    {
      "inputs": [],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "previousAdmin",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "newAdmin",
          "type": "address"
        }
      ],
      "name": "AdminChanged",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "beacon",
          "type": "address"
        }
      ],
      "name": "BeaconUpgraded",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "user",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint32",
          "name": "marketIndex",
          "type": "uint32"
        }
      ],
      "name": "ExecuteNextPriceSettlementsUser",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "admin",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "tokenFactory",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "staker",
          "type": "address"
        }
      ],
      "name": "LongShortV1",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint32",
          "name": "marketIndex",
          "type": "uint32"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "fundingRateMultiplier_e18",
          "type": "uint256"
        }
      ],
      "name": "MarketFundingRateMultiplerChanged",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint32",
          "name": "marketIndex",
          "type": "uint32"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "initialSeed",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "marketLeverage",
          "type": "uint256"
        }
      ],
      "name": "NewMarketLaunchedAndSeeded",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint32",
          "name": "marketIndex",
          "type": "uint32"
        },
        {
          "indexed": false,
          "internalType": "bool",
          "name": "isLong",
          "type": "bool"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "depositAdded",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "user",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "oracleUpdateIndex",
          "type": "uint256"
        }
      ],
      "name": "NextPriceDeposit",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint32",
          "name": "marketIndex",
          "type": "uint32"
        },
        {
          "indexed": false,
          "internalType": "bool",
          "name": "isLong",
          "type": "bool"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amountToStake",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "user",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "oracleUpdateIndex",
          "type": "uint256"
        }
      ],
      "name": "NextPriceDepositAndStake",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint32",
          "name": "marketIndex",
          "type": "uint32"
        },
        {
          "indexed": false,
          "internalType": "bool",
          "name": "isLong",
          "type": "bool"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "synthRedeemed",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "user",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "oracleUpdateIndex",
          "type": "uint256"
        }
      ],
      "name": "NextPriceRedeem",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint32",
          "name": "marketIndex",
          "type": "uint32"
        },
        {
          "indexed": false,
          "internalType": "bool",
          "name": "isShiftFromLong",
          "type": "bool"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "synthShifted",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "user",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "oracleUpdateIndex",
          "type": "uint256"
        }
      ],
      "name": "NextPriceSyntheticPositionShift",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint32",
          "name": "marketIndex",
          "type": "uint32"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "oldOracleAddress",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "newOracleAddress",
          "type": "address"
        }
      ],
      "name": "OracleUpdated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "previousAdminRole",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "newAdminRole",
          "type": "bytes32"
        }
      ],
      "name": "RoleAdminChanged",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "sender",
          "type": "address"
        }
      ],
      "name": "RoleGranted",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "sender",
          "type": "address"
        }
      ],
      "name": "RoleRevoked",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint32",
          "name": "marketIndex",
          "type": "uint32"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "longTokenAddress",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "shortTokenAddress",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "paymentToken",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "int256",
          "name": "initialAssetPrice",
          "type": "int256"
        },
        {
          "indexed": false,
          "internalType": "string",
          "name": "name",
          "type": "string"
        },
        {
          "indexed": false,
          "internalType": "string",
          "name": "symbol",
          "type": "string"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "oracleAddress",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "yieldManagerAddress",
          "type": "address"
        }
      ],
      "name": "SyntheticMarketCreated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint32",
          "name": "marketIndex",
          "type": "uint32"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "updateIndex",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "int256",
          "name": "underlyingAssetPrice",
          "type": "int256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "longValue",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "shortValue",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "longPrice",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "shortPrice",
          "type": "uint256"
        }
      ],
      "name": "SystemStateUpdated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "version",
          "type": "uint256"
        }
      ],
      "name": "Upgrade",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "implementation",
          "type": "address"
        }
      ],
      "name": "Upgraded",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "ADMIN_ROLE",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "DEFAULT_ADMIN_ROLE",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "UPGRADER_ROLE",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint32",
          "name": "",
          "type": "uint32"
        }
      ],
      "name": "assetPrice",
      "outputs": [
        {
          "internalType": "int256",
          "name": "",
          "type": "int256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint32",
          "name": "",
          "type": "uint32"
        },
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "name": "batched_amountPaymentToken_deposit",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint32",
          "name": "",
          "type": "uint32"
        },
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "name": "batched_amountSyntheticToken_redeem",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint32",
          "name": "",
          "type": "uint32"
        },
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "name": "batched_amountSyntheticToken_toShiftAwayFrom_marketSide",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint32",
          "name": "marketIndex",
          "type": "uint32"
        },
        {
          "internalType": "uint256",
          "name": "_fundingRateMultiplier_e18",
          "type": "uint256"
        }
      ],
      "name": "changeMarketFundingRateMultiplier",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint32",
          "name": "marketIndex",
          "type": "uint32"
        },
        {
          "internalType": "uint256",
          "name": "_marketTreasurySplitGradient_e18",
          "type": "uint256"
        }
      ],
      "name": "changeMarketTreasurySplitGradient",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "user",
          "type": "address"
        },
        {
          "internalType": "uint32",
          "name": "marketIndex",
          "type": "uint32"
        },
        {
          "internalType": "bool",
          "name": "isLong",
          "type": "bool"
        }
      ],
      "name": "checkIfUserIsEligibleToSendSynth",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "user",
          "type": "address"
        },
        {
          "internalType": "uint32",
          "name": "marketIndex",
          "type": "uint32"
        },
        {
          "internalType": "bool",
          "name": "isLong",
          "type": "bool"
        }
      ],
      "name": "checkIfUserIsEligibleToTrade",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "syntheticName",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "syntheticSymbol",
          "type": "string"
        },
        {
          "internalType": "address",
          "name": "_paymentToken",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_oracleManager",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_yieldManager",
          "type": "address"
        }
      ],
      "name": "createNewSyntheticMarket",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "syntheticName",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "syntheticSymbol",
          "type": "string"
        },
        {
          "internalType": "address",
          "name": "_longToken",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_shortToken",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_paymentToken",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_oracleManager",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_yieldManager",
          "type": "address"
        }
      ],
      "name": "createNewSyntheticMarketExternalSyntheticTokens",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "user",
          "type": "address"
        },
        {
          "internalType": "uint32",
          "name": "marketIndex",
          "type": "uint32"
        }
      ],
      "name": "executeOutstandingNextPriceSettlementsUser",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "user",
          "type": "address"
        },
        {
          "internalType": "uint32[]",
          "name": "marketIndexes",
          "type": "uint32[]"
        }
      ],
      "name": "executeOutstandingNextPriceSettlementsUserMulti",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint32",
          "name": "",
          "type": "uint32"
        }
      ],
      "name": "fundingRateMultiplier_e18",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "gems",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint32",
          "name": "marketIndex",
          "type": "uint32"
        },
        {
          "internalType": "uint256",
          "name": "amountSyntheticToken_redeemOnOriginSide",
          "type": "uint256"
        },
        {
          "internalType": "bool",
          "name": "isShiftFromLong",
          "type": "bool"
        },
        {
          "internalType": "uint256",
          "name": "priceSnapshotIndex",
          "type": "uint256"
        }
      ],
      "name": "getAmountSyntheticTokenToMintOnTargetSide",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "amountSyntheticTokensToMintOnTargetSide",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        }
      ],
      "name": "getRoleAdmin",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "user",
          "type": "address"
        },
        {
          "internalType": "uint32",
          "name": "marketIndex",
          "type": "uint32"
        },
        {
          "internalType": "bool",
          "name": "isLong",
          "type": "bool"
        }
      ],
      "name": "getUsersConfirmedButNotSettledSynthBalance",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "confirmedButNotSettledBalance",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint32",
          "name": "marketIndex",
          "type": "uint32"
        },
        {
          "internalType": "uint256",
          "name": "priceSnapshotIndex",
          "type": "uint256"
        }
      ],
      "name": "get_syntheticToken_priceSnapshot",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "priceLong",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "priceShort",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint32",
          "name": "marketIndex",
          "type": "uint32"
        },
        {
          "internalType": "bool",
          "name": "isLong",
          "type": "bool"
        },
        {
          "internalType": "uint256",
          "name": "priceSnapshotIndex",
          "type": "uint256"
        }
      ],
      "name": "get_syntheticToken_priceSnapshot_side",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "price",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "grantRole",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "hasRole",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_admin",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_tokenFactory",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_staker",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_gems",
          "type": "address"
        }
      ],
      "name": "initialize",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint32",
          "name": "marketIndex",
          "type": "uint32"
        },
        {
          "internalType": "uint256",
          "name": "kInitialMultiplier",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "kPeriod",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "unstakeFee_e18",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "initialMarketSeedForEachMarketSide",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "balanceIncentiveCurve_exponent",
          "type": "uint256"
        },
        {
          "internalType": "int256",
          "name": "balanceIncentiveCurve_equilibriumOffset",
          "type": "int256"
        },
        {
          "internalType": "uint256",
          "name": "_marketTreasurySplitGradient_e18",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "marketLeverage",
          "type": "uint256"
        }
      ],
      "name": "initializeMarket",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "latestMarket",
      "outputs": [
        {
          "internalType": "uint32",
          "name": "",
          "type": "uint32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint32",
          "name": "",
          "type": "uint32"
        }
      ],
      "name": "marketExists",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint32",
          "name": "",
          "type": "uint32"
        }
      ],
      "name": "marketLeverage_e18",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint32",
          "name": "",
          "type": "uint32"
        }
      ],
      "name": "marketSideValueInPaymentToken",
      "outputs": [
        {
          "internalType": "uint128",
          "name": "value_long",
          "type": "uint128"
        },
        {
          "internalType": "uint128",
          "name": "value_short",
          "type": "uint128"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint32",
          "name": "",
          "type": "uint32"
        },
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "name": "marketSideValueInPaymentTokenLEGACY",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint32",
          "name": "",
          "type": "uint32"
        }
      ],
      "name": "marketTreasurySplitGradient_e18",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint32",
          "name": "",
          "type": "uint32"
        }
      ],
      "name": "marketUpdateIndex",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint32",
          "name": "marketIndex",
          "type": "uint32"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "internalType": "bool",
          "name": "isLong",
          "type": "bool"
        }
      ],
      "name": "mintAndStakeNextPrice",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint32",
          "name": "marketIndex",
          "type": "uint32"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "mintLongNextPrice",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint32",
          "name": "marketIndex",
          "type": "uint32"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "mintShortNextPrice",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint32",
          "name": "",
          "type": "uint32"
        }
      ],
      "name": "oracleManagers",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint32",
          "name": "",
          "type": "uint32"
        }
      ],
      "name": "paymentTokens",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint32",
          "name": "marketIndex",
          "type": "uint32"
        },
        {
          "internalType": "uint256",
          "name": "tokens_redeem",
          "type": "uint256"
        }
      ],
      "name": "redeemLongNextPrice",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint32",
          "name": "marketIndex",
          "type": "uint32"
        },
        {
          "internalType": "uint256",
          "name": "tokens_redeem",
          "type": "uint256"
        }
      ],
      "name": "redeemShortNextPrice",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "renounceRole",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "revokeRole",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "user",
          "type": "address"
        },
        {
          "internalType": "uint32",
          "name": "marketIndex",
          "type": "uint32"
        },
        {
          "internalType": "bool",
          "name": "isLong",
          "type": "bool"
        }
      ],
      "name": "setUserTradeTimer",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint32",
          "name": "marketIndex",
          "type": "uint32"
        },
        {
          "internalType": "uint256",
          "name": "amountSyntheticTokensToShift",
          "type": "uint256"
        }
      ],
      "name": "shiftPositionFromLongNextPrice",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint32",
          "name": "marketIndex",
          "type": "uint32"
        },
        {
          "internalType": "uint256",
          "name": "amountSyntheticTokensToShift",
          "type": "uint256"
        }
      ],
      "name": "shiftPositionFromShortNextPrice",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint32",
          "name": "marketIndex",
          "type": "uint32"
        },
        {
          "internalType": "uint256",
          "name": "amountSyntheticTokensToShift",
          "type": "uint256"
        },
        {
          "internalType": "bool",
          "name": "isShiftFromLong",
          "type": "bool"
        }
      ],
      "name": "shiftPositionNextPrice",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "staker",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes4",
          "name": "interfaceId",
          "type": "bytes4"
        }
      ],
      "name": "supportsInterface",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint32",
          "name": "",
          "type": "uint32"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "syntheticToken_priceSnapshot",
      "outputs": [
        {
          "internalType": "uint128",
          "name": "price_long",
          "type": "uint128"
        },
        {
          "internalType": "uint128",
          "name": "price_short",
          "type": "uint128"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint32",
          "name": "",
          "type": "uint32"
        },
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "syntheticToken_priceSnapshotLEGACY",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint32",
          "name": "",
          "type": "uint32"
        },
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "name": "syntheticTokens",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "tokenFactory",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint32",
          "name": "marketIndex",
          "type": "uint32"
        },
        {
          "internalType": "address",
          "name": "_newOracleManager",
          "type": "address"
        }
      ],
      "name": "updateMarketOracle",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint32",
          "name": "marketIndex",
          "type": "uint32"
        }
      ],
      "name": "updateSystemState",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint32[]",
          "name": "marketIndexes",
          "type": "uint32[]"
        }
      ],
      "name": "updateSystemStateMulti",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newImplementation",
          "type": "address"
        }
      ],
      "name": "upgradeTo",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newImplementation",
          "type": "address"
        },
        {
          "internalType": "bytes",
          "name": "data",
          "type": "bytes"
        }
      ],
      "name": "upgradeToAndCall",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "upgradeToUsingCompactValueAndPriceSnapshots",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint32",
          "name": "",
          "type": "uint32"
        },
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        },
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "userLastInteractionTimestamp",
      "outputs": [
        {
          "internalType": "uint32",
          "name": "timestamp",
          "type": "uint32"
        },
        {
          "internalType": "uint224",
          "name": "effectiveAmountMinted",
          "type": "uint224"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint32",
          "name": "",
          "type": "uint32"
        },
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "userNextPrice_currentUpdateIndex",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint32",
          "name": "",
          "type": "uint32"
        },
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        },
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "userNextPrice_paymentToken_depositAmount",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint32",
          "name": "",
          "type": "uint32"
        },
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        },
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "userNextPrice_syntheticToken_redeemAmount",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint32",
          "name": "",
          "type": "uint32"
        },
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        },
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "userNextPrice_syntheticToken_toShiftAwayFrom_marketSide",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint32",
          "name": "",
          "type": "uint32"
        }
      ],
      "name": "yieldManagers",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    }
  ],
  "transactionHash": "0x323252a21856e88789b70b262d81fac760b92536c550ce4b3bad08a064cbe0a4",
  "receipt": {
    "to": null,
    "from": "0x921c380d6047f09a4E61D29d1Fc054fB52259CA9",
    "contractAddress": "0x16488343e508C2BFB7F180185848F924184c9C9F",
    "transactionIndex": 2,
    "gasUsed": "5099474",
    "logsBloom": "0x
    "blockHash": "0x3de0a31127c8cb2d54d31d2dbb0e8f2522574abb961f994e8f88af4d3c2e7886",
    "transactionHash": "0x323252a21856e88789b70b262d81fac760b92536c550ce4b3bad08a064cbe0a4",
    "logs": [
      {
        "transactionIndex": 2,
        "blockNumber": 26262692,
        "transactionHash": "0x323252a21856e88789b70b262d81fac760b92536c550ce4b3bad08a064cbe0a4",
        "address": "0x0000000000000000000000000000000000001010",
        "topics": [
          "0x4dfe1bbbcf077ddc3e01291eea2d5c70c2b422b415d95645b9adcfd678cb1d63",
          "0x0000000000000000000000000000000000000000000000000000000000001010",
          "0x000000000000000000000000921c380d6047f09a4e61d29d1fc054fb52259ca9",
          "0x000000000000000000000000bdbd4347b082d9d6bdf2da4555a37ce52a2e2120"
        ],
        "data": "0x0000000000000000000000000000000000000000000000000cbd0e067464d22800000000000000000000000000000000000000000000000494130c089346f742000000000000000000000000000000000000000000000b4ed301bdda59c893420000000000000000000000000000000000000000000000048755fe021ee2251a000000000000000000000000000000000000000000000b4edfbecbe0ce2d656a",
        "logIndex": 6,
        "blockHash": "0x3de0a31127c8cb2d54d31d2dbb0e8f2522574abb961f994e8f88af4d3c2e7886"
      }
    ],
    "blockNumber": 26262692,
    "cumulativeGasUsed": "5238399",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "solcInputHash": "d14492ef739f96aca32ccf42a3d8cb5e",
  "metadata": "{\"compiler\":{\"version\":\"0.8.10+commit.fc410830\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"previousAdmin\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"newAdmin\",\"type\":\"address\"}],\"name\":\"AdminChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"beacon\",\"type\":\"address\"}],\"name\":\"BeaconUpgraded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint32\",\"name\":\"marketIndex\",\"type\":\"uint32\"}],\"name\":\"ExecuteNextPriceSettlementsUser\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"admin\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"tokenFactory\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"staker\",\"type\":\"address\"}],\"name\":\"LongShortV1\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint32\",\"name\":\"marketIndex\",\"type\":\"uint32\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"fundingRateMultiplier_e18\",\"type\":\"uint256\"}],\"name\":\"MarketFundingRateMultiplerChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint32\",\"name\":\"marketIndex\",\"type\":\"uint32\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"initialSeed\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"marketLeverage\",\"type\":\"uint256\"}],\"name\":\"NewMarketLaunchedAndSeeded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint32\",\"name\":\"marketIndex\",\"type\":\"uint32\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"isLong\",\"type\":\"bool\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"depositAdded\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"oracleUpdateIndex\",\"type\":\"uint256\"}],\"name\":\"NextPriceDeposit\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint32\",\"name\":\"marketIndex\",\"type\":\"uint32\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"isLong\",\"type\":\"bool\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amountToStake\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"oracleUpdateIndex\",\"type\":\"uint256\"}],\"name\":\"NextPriceDepositAndStake\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint32\",\"name\":\"marketIndex\",\"type\":\"uint32\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"isLong\",\"type\":\"bool\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"synthRedeemed\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"oracleUpdateIndex\",\"type\":\"uint256\"}],\"name\":\"NextPriceRedeem\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint32\",\"name\":\"marketIndex\",\"type\":\"uint32\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"isShiftFromLong\",\"type\":\"bool\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"synthShifted\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"oracleUpdateIndex\",\"type\":\"uint256\"}],\"name\":\"NextPriceSyntheticPositionShift\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint32\",\"name\":\"marketIndex\",\"type\":\"uint32\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"oldOracleAddress\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"newOracleAddress\",\"type\":\"address\"}],\"name\":\"OracleUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"previousAdminRole\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"newAdminRole\",\"type\":\"bytes32\"}],\"name\":\"RoleAdminChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"RoleGranted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"RoleRevoked\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint32\",\"name\":\"marketIndex\",\"type\":\"uint32\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"longTokenAddress\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"shortTokenAddress\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"paymentToken\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"int256\",\"name\":\"initialAssetPrice\",\"type\":\"int256\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"symbol\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"oracleAddress\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"yieldManagerAddress\",\"type\":\"address\"}],\"name\":\"SyntheticMarketCreated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint32\",\"name\":\"marketIndex\",\"type\":\"uint32\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"updateIndex\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"int256\",\"name\":\"underlyingAssetPrice\",\"type\":\"int256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"longValue\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"shortValue\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"longPrice\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"shortPrice\",\"type\":\"uint256\"}],\"name\":\"SystemStateUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"version\",\"type\":\"uint256\"}],\"name\":\"Upgrade\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"implementation\",\"type\":\"address\"}],\"name\":\"Upgraded\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"ADMIN_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"DEFAULT_ADMIN_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"UPGRADER_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint32\",\"name\":\"\",\"type\":\"uint32\"}],\"name\":\"assetPrice\",\"outputs\":[{\"internalType\":\"int256\",\"name\":\"\",\"type\":\"int256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint32\",\"name\":\"\",\"type\":\"uint32\"},{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"name\":\"batched_amountPaymentToken_deposit\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint32\",\"name\":\"\",\"type\":\"uint32\"},{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"name\":\"batched_amountSyntheticToken_redeem\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint32\",\"name\":\"\",\"type\":\"uint32\"},{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"name\":\"batched_amountSyntheticToken_toShiftAwayFrom_marketSide\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint32\",\"name\":\"marketIndex\",\"type\":\"uint32\"},{\"internalType\":\"uint256\",\"name\":\"_fundingRateMultiplier_e18\",\"type\":\"uint256\"}],\"name\":\"changeMarketFundingRateMultiplier\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint32\",\"name\":\"marketIndex\",\"type\":\"uint32\"},{\"internalType\":\"uint256\",\"name\":\"_marketTreasurySplitGradient_e18\",\"type\":\"uint256\"}],\"name\":\"changeMarketTreasurySplitGradient\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"internalType\":\"uint32\",\"name\":\"marketIndex\",\"type\":\"uint32\"},{\"internalType\":\"bool\",\"name\":\"isLong\",\"type\":\"bool\"}],\"name\":\"checkIfUserIsEligibleToSendSynth\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"internalType\":\"uint32\",\"name\":\"marketIndex\",\"type\":\"uint32\"},{\"internalType\":\"bool\",\"name\":\"isLong\",\"type\":\"bool\"}],\"name\":\"checkIfUserIsEligibleToTrade\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"syntheticName\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"syntheticSymbol\",\"type\":\"string\"},{\"internalType\":\"address\",\"name\":\"_paymentToken\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_oracleManager\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_yieldManager\",\"type\":\"address\"}],\"name\":\"createNewSyntheticMarket\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"syntheticName\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"syntheticSymbol\",\"type\":\"string\"},{\"internalType\":\"address\",\"name\":\"_longToken\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_shortToken\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_paymentToken\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_oracleManager\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_yieldManager\",\"type\":\"address\"}],\"name\":\"createNewSyntheticMarketExternalSyntheticTokens\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"internalType\":\"uint32\",\"name\":\"marketIndex\",\"type\":\"uint32\"}],\"name\":\"executeOutstandingNextPriceSettlementsUser\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"internalType\":\"uint32[]\",\"name\":\"marketIndexes\",\"type\":\"uint32[]\"}],\"name\":\"executeOutstandingNextPriceSettlementsUserMulti\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint32\",\"name\":\"\",\"type\":\"uint32\"}],\"name\":\"fundingRateMultiplier_e18\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"gems\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint32\",\"name\":\"marketIndex\",\"type\":\"uint32\"},{\"internalType\":\"uint256\",\"name\":\"amountSyntheticToken_redeemOnOriginSide\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"isShiftFromLong\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"priceSnapshotIndex\",\"type\":\"uint256\"}],\"name\":\"getAmountSyntheticTokenToMintOnTargetSide\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"amountSyntheticTokensToMintOnTargetSide\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"}],\"name\":\"getRoleAdmin\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"internalType\":\"uint32\",\"name\":\"marketIndex\",\"type\":\"uint32\"},{\"internalType\":\"bool\",\"name\":\"isLong\",\"type\":\"bool\"}],\"name\":\"getUsersConfirmedButNotSettledSynthBalance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"confirmedButNotSettledBalance\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint32\",\"name\":\"marketIndex\",\"type\":\"uint32\"},{\"internalType\":\"uint256\",\"name\":\"priceSnapshotIndex\",\"type\":\"uint256\"}],\"name\":\"get_syntheticToken_priceSnapshot\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"priceLong\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"priceShort\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint32\",\"name\":\"marketIndex\",\"type\":\"uint32\"},{\"internalType\":\"bool\",\"name\":\"isLong\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"priceSnapshotIndex\",\"type\":\"uint256\"}],\"name\":\"get_syntheticToken_priceSnapshot_side\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"price\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"grantRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"hasRole\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_admin\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_tokenFactory\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_staker\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_gems\",\"type\":\"address\"}],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint32\",\"name\":\"marketIndex\",\"type\":\"uint32\"},{\"internalType\":\"uint256\",\"name\":\"kInitialMultiplier\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"kPeriod\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"unstakeFee_e18\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"initialMarketSeedForEachMarketSide\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"balanceIncentiveCurve_exponent\",\"type\":\"uint256\"},{\"internalType\":\"int256\",\"name\":\"balanceIncentiveCurve_equilibriumOffset\",\"type\":\"int256\"},{\"internalType\":\"uint256\",\"name\":\"_marketTreasurySplitGradient_e18\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"marketLeverage\",\"type\":\"uint256\"}],\"name\":\"initializeMarket\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"latestMarket\",\"outputs\":[{\"internalType\":\"uint32\",\"name\":\"\",\"type\":\"uint32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint32\",\"name\":\"\",\"type\":\"uint32\"}],\"name\":\"marketExists\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint32\",\"name\":\"\",\"type\":\"uint32\"}],\"name\":\"marketLeverage_e18\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint32\",\"name\":\"\",\"type\":\"uint32\"}],\"name\":\"marketSideValueInPaymentToken\",\"outputs\":[{\"internalType\":\"uint128\",\"name\":\"value_long\",\"type\":\"uint128\"},{\"internalType\":\"uint128\",\"name\":\"value_short\",\"type\":\"uint128\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint32\",\"name\":\"\",\"type\":\"uint32\"},{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"name\":\"marketSideValueInPaymentTokenLEGACY\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint32\",\"name\":\"\",\"type\":\"uint32\"}],\"name\":\"marketTreasurySplitGradient_e18\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint32\",\"name\":\"\",\"type\":\"uint32\"}],\"name\":\"marketUpdateIndex\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint32\",\"name\":\"marketIndex\",\"type\":\"uint32\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"isLong\",\"type\":\"bool\"}],\"name\":\"mintAndStakeNextPrice\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint32\",\"name\":\"marketIndex\",\"type\":\"uint32\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"mintLongNextPrice\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint32\",\"name\":\"marketIndex\",\"type\":\"uint32\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"mintShortNextPrice\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint32\",\"name\":\"\",\"type\":\"uint32\"}],\"name\":\"oracleManagers\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint32\",\"name\":\"\",\"type\":\"uint32\"}],\"name\":\"paymentTokens\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint32\",\"name\":\"marketIndex\",\"type\":\"uint32\"},{\"internalType\":\"uint256\",\"name\":\"tokens_redeem\",\"type\":\"uint256\"}],\"name\":\"redeemLongNextPrice\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint32\",\"name\":\"marketIndex\",\"type\":\"uint32\"},{\"internalType\":\"uint256\",\"name\":\"tokens_redeem\",\"type\":\"uint256\"}],\"name\":\"redeemShortNextPrice\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"renounceRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"revokeRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"internalType\":\"uint32\",\"name\":\"marketIndex\",\"type\":\"uint32\"},{\"internalType\":\"bool\",\"name\":\"isLong\",\"type\":\"bool\"}],\"name\":\"setUserTradeTimer\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint32\",\"name\":\"marketIndex\",\"type\":\"uint32\"},{\"internalType\":\"uint256\",\"name\":\"amountSyntheticTokensToShift\",\"type\":\"uint256\"}],\"name\":\"shiftPositionFromLongNextPrice\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint32\",\"name\":\"marketIndex\",\"type\":\"uint32\"},{\"internalType\":\"uint256\",\"name\":\"amountSyntheticTokensToShift\",\"type\":\"uint256\"}],\"name\":\"shiftPositionFromShortNextPrice\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint32\",\"name\":\"marketIndex\",\"type\":\"uint32\"},{\"internalType\":\"uint256\",\"name\":\"amountSyntheticTokensToShift\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"isShiftFromLong\",\"type\":\"bool\"}],\"name\":\"shiftPositionNextPrice\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"staker\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint32\",\"name\":\"\",\"type\":\"uint32\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"syntheticToken_priceSnapshot\",\"outputs\":[{\"internalType\":\"uint128\",\"name\":\"price_long\",\"type\":\"uint128\"},{\"internalType\":\"uint128\",\"name\":\"price_short\",\"type\":\"uint128\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint32\",\"name\":\"\",\"type\":\"uint32\"},{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"syntheticToken_priceSnapshotLEGACY\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint32\",\"name\":\"\",\"type\":\"uint32\"},{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"name\":\"syntheticTokens\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"tokenFactory\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint32\",\"name\":\"marketIndex\",\"type\":\"uint32\"},{\"internalType\":\"address\",\"name\":\"_newOracleManager\",\"type\":\"address\"}],\"name\":\"updateMarketOracle\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint32\",\"name\":\"marketIndex\",\"type\":\"uint32\"}],\"name\":\"updateSystemState\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint32[]\",\"name\":\"marketIndexes\",\"type\":\"uint32[]\"}],\"name\":\"updateSystemStateMulti\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newImplementation\",\"type\":\"address\"}],\"name\":\"upgradeTo\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newImplementation\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"upgradeToAndCall\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"upgradeToUsingCompactValueAndPriceSnapshots\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint32\",\"name\":\"\",\"type\":\"uint32\"},{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"userLastInteractionTimestamp\",\"outputs\":[{\"internalType\":\"uint32\",\"name\":\"timestamp\",\"type\":\"uint32\"},{\"internalType\":\"uint224\",\"name\":\"effectiveAmountMinted\",\"type\":\"uint224\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint32\",\"name\":\"\",\"type\":\"uint32\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"userNextPrice_currentUpdateIndex\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint32\",\"name\":\"\",\"type\":\"uint32\"},{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"userNextPrice_paymentToken_depositAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint32\",\"name\":\"\",\"type\":\"uint32\"},{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"userNextPrice_syntheticToken_redeemAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint32\",\"name\":\"\",\"type\":\"uint32\"},{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"userNextPrice_syntheticToken_toShiftAwayFrom_marketSide\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint32\",\"name\":\"\",\"type\":\"uint32\"}],\"name\":\"yieldManagers\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"createNewSyntheticMarket(string,string,address,address,address)\":{\"details\":\"This does not make the market active. The `initializeMarket` function was split out separately to this function to reduce costs.\",\"params\":{\"_oracleManager\":\"The address of the oracle manager that provides the price feed for this market\",\"_paymentToken\":\"The address of the erc20 token used to buy this synthetic asset this will likely always be DAI\",\"_yieldManager\":\"The contract that manages depositing the paymentToken into a yield bearing protocol\",\"syntheticName\":\"Name of the synthetic asset\",\"syntheticSymbol\":\"Symbol for the synthetic asset\"}},\"createNewSyntheticMarketExternalSyntheticTokens(string,string,address,address,address,address,address)\":{\"details\":\"This does not make the market active. The `initializeMarket` function was split out separately to this function to reduce costs.\",\"params\":{\"_longToken\":\"Address for the long token.\",\"_oracleManager\":\"The address of the oracle manager that provides the price feed for this market\",\"_paymentToken\":\"The address of the erc20 token used to buy this synthetic asset this will likely always be DAI\",\"_shortToken\":\"Address for the short token.\",\"_yieldManager\":\"The contract that manages depositing the paymentToken into a yield bearing protocol\",\"syntheticName\":\"Name of the synthetic asset\",\"syntheticSymbol\":\"Symbol for the synthetic asset\"}},\"executeOutstandingNextPriceSettlementsUser(address,uint32)\":{\"params\":{\"marketIndex\":\"An uint32 which uniquely identifies a market.\",\"user\":\"The address of the user for whom to execute the function.\"}},\"executeOutstandingNextPriceSettlementsUserMulti(address,uint32[])\":{\"params\":{\"marketIndexes\":\"An array of int32s which each uniquely identify a market.\",\"user\":\"The address of the user for whom to execute the function.\"}},\"getAmountSyntheticTokenToMintOnTargetSide(uint32,uint256,bool,uint256)\":{\"details\":\"Intended for use primarily by Staker.sol\",\"params\":{\"amountSyntheticToken_redeemOnOriginSide\":\"Amount of synth token in wei.\",\"isShiftFromLong\":\"Whether the token shift is from long to short (true), or short to long (false).\",\"marketIndex\":\"An uint32 which uniquely identifies a market.\",\"priceSnapshotIndex\":\"Index which identifies which synth prices to use.\"},\"returns\":{\"amountSyntheticTokensToMintOnTargetSide\":\"The amount in wei of tokens for the other side that the shift was worth.\"}},\"getRoleAdmin(bytes32)\":{\"details\":\"Returns the admin role that controls `role`. See {grantRole} and {revokeRole}. To change a role's admin, use {_setRoleAdmin}.\"},\"getUsersConfirmedButNotSettledSynthBalance(address,uint32,bool)\":{\"details\":\"Used in SyntheticToken.sol balanceOf to allow for automatic reflection of next price actions.\",\"params\":{\"isLong\":\"Whether it is for the long synthetic asset or the short synthetic asset.\",\"marketIndex\":\"An uint32 which uniquely identifies a market.\",\"user\":\"The address of the user for whom to execute the function for.\"},\"returns\":{\"confirmedButNotSettledBalance\":\"The amount in wei of tokens that the user is owed.\"}},\"grantRole(bytes32,address)\":{\"details\":\"Grants `role` to `account`. If `account` had not been already granted `role`, emits a {RoleGranted} event. Requirements: - the caller must have ``role``'s admin role.\"},\"hasRole(bytes32,address)\":{\"details\":\"Returns `true` if `account` has been granted `role`.\"},\"initialize(address,address,address,address)\":{\"details\":\"Calls OpenZeppelin's initializer modifier.\",\"params\":{\"_admin\":\"Address of the admin role.\",\"_staker\":\"Address of the contract which handles synthetic asset stakes.\",\"_tokenFactory\":\"Address of the contract which creates synthetic asset tokens.\"}},\"initializeMarket(uint32,uint256,uint256,uint256,uint256,uint256,int256,uint256,uint256)\":{\"details\":\"Seperated from createNewSyntheticMarket due to gas considerations.\",\"params\":{\"balanceIncentiveCurve_equilibriumOffset\":\"An offset to account for naturally imbalanced markets when Float token issuance should differ for market sides. See Staker.sol\",\"balanceIncentiveCurve_exponent\":\"Sets the degree to which Float token issuance differs for market sides in unbalanced markets. See Staker.sol\",\"initialMarketSeedForEachMarketSide\":\"Amount of payment token that will be deposited in each market side to seed the market.\",\"kInitialMultiplier\":\"Linearly decreasing multiplier for Float token issuance for the market when staking synths.\",\"kPeriod\":\"Time which kInitialMultiplier will last\",\"marketIndex\":\"An int32 which uniquely identifies the market.\",\"unstakeFee_e18\":\"Base 1e18 percentage fee levied when unstaking for the market.\"}},\"mintLongNextPrice(uint32,uint256)\":{\"params\":{\"amount\":\"Amount of payment tokens in that token's lowest denominationfor which to mint synthetic assets at next price.\",\"marketIndex\":\"An uint32 which uniquely identifies a market.\"}},\"mintShortNextPrice(uint32,uint256)\":{\"params\":{\"amount\":\"Amount of payment tokens in that token's lowest denominationfor which to mint synthetic assets at next price.\",\"marketIndex\":\"An uint32 which uniquely identifies a market.\"}},\"redeemLongNextPrice(uint32,uint256)\":{\"params\":{\"marketIndex\":\"An uint32 which uniquely identifies a market.\",\"tokens_redeem\":\"Amount in wei of synth tokens to redeem at the next oracle price.\"}},\"redeemShortNextPrice(uint32,uint256)\":{\"params\":{\"marketIndex\":\"An uint32 which uniquely identifies a market.\",\"tokens_redeem\":\"Amount in wei of synth tokens to redeem at the next oracle price.\"}},\"renounceRole(bytes32,address)\":{\"details\":\"Revokes `role` from the calling account. Roles are often managed via {grantRole} and {revokeRole}: this function's purpose is to provide a mechanism for accounts to lose their privileges if they are compromised (such as when a trusted device is misplaced). If the calling account had been revoked `role`, emits a {RoleRevoked} event. Requirements: - the caller must be `account`.\"},\"revokeRole(bytes32,address)\":{\"details\":\"Revokes `role` from `account`. If `account` had been granted `role`, emits a {RoleRevoked} event. Requirements: - the caller must have ``role``'s admin role.\"},\"shiftPositionFromLongNextPrice(uint32,uint256)\":{\"params\":{\"amountSyntheticTokensToShift\":\"Amount in wei of synthetic tokens to shift from long to short the next oracle price update.\",\"marketIndex\":\"An uint32 which uniquely identifies a market.\"}},\"shiftPositionFromShortNextPrice(uint32,uint256)\":{\"params\":{\"amountSyntheticTokensToShift\":\"Amount in wei of synthetic tokens to shift from the short to long at the next oracle price update.\",\"marketIndex\":\"An uint32 which uniquely identifies a market.\"}},\"shiftPositionNextPrice(uint32,uint256,bool)\":{\"details\":\"Called by external functions to shift either way. Intended for primary use by Staker.sol\",\"params\":{\"amountSyntheticTokensToShift\":\"Amount in wei of synthetic tokens to shift from the one side to the other at the next oracle price update.\",\"isShiftFromLong\":\"Whether the token shift is from long to short (true), or short to long (false).\",\"marketIndex\":\"An uint32 which uniquely identifies a market.\"}},\"supportsInterface(bytes4)\":{\"details\":\"See {IERC165-supportsInterface}.\"},\"updateMarketOracle(uint32,address)\":{\"details\":\"Can only be called by the current admin.\",\"params\":{\"_newOracleManager\":\"Address of the replacement oracle manager.\",\"marketIndex\":\"An uint32 which uniquely identifies a market.\"}},\"updateSystemState(uint32)\":{\"params\":{\"marketIndex\":\"An uint32 which uniquely identifies a market.\"}},\"updateSystemStateMulti(uint32[])\":{\"params\":{\"marketIndexes\":\"An array of int32s which uniquely identify markets.\"}},\"upgradeTo(address)\":{\"details\":\"Upgrade the implementation of the proxy to `newImplementation`. Calls {_authorizeUpgrade}. Emits an {Upgraded} event.\"},\"upgradeToAndCall(address,bytes)\":{\"details\":\"Upgrade the implementation of the proxy to `newImplementation`, and subsequently execute the function call encoded in `data`. Calls {_authorizeUpgrade}. Emits an {Upgraded} event.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"changeMarketTreasurySplitGradient(uint32,uint256)\":{\"notice\":\"changes the gradient of the line for determining the yield split between market and treasury.\"},\"createNewSyntheticMarket(string,string,address,address,address)\":{\"notice\":\"Creates an entirely new long/short market tracking an underlying oracle price.  Make sure the synthetic names/symbols are unique.\"},\"createNewSyntheticMarketExternalSyntheticTokens(string,string,address,address,address,address,address)\":{\"notice\":\"Creates an entirely new long/short market tracking an underlying oracle price.  Uses already created synthetic tokens.\"},\"executeOutstandingNextPriceSettlementsUser(address,uint32)\":{\"notice\":\"After markets have been batched updated on a new oracle price, transfers any owed tokens to a user from their next price actions for that update to that user.\"},\"executeOutstandingNextPriceSettlementsUserMulti(address,uint32[])\":{\"notice\":\"Executes outstanding next price settlements for a user for multiple markets.\"},\"getAmountSyntheticTokenToMintOnTargetSide(uint32,uint256,bool,uint256)\":{\"notice\":\"Given an executed next price shift from tokens on one market side to the other, determines how many other side tokens the shift was worth.\"},\"getUsersConfirmedButNotSettledSynthBalance(address,uint32,bool)\":{\"notice\":\"The amount of a synth token a user is owed following a batch execution. 4 possible states for next price actions: - \\\"Pending\\\" - means the next price update hasn't happened or been enacted on by the updateSystemState function. - \\\"Confirmed\\\" - means the next price has been updated by the updateSystemState function. There is still -               outstanding (lazy) computation that needs to be executed per user in the batch. - \\\"Settled\\\" - there is no more computation left for the user. - \\\"Non-existent\\\" - user has no next price actions. This function returns a calculated value only in the case of 'confirmed' next price actions. It should return zero for all other types of next price actions.\"},\"initialize(address,address,address,address)\":{\"notice\":\"Initializes the contract.\"},\"initializeMarket(uint32,uint256,uint256,uint256,uint256,uint256,int256,uint256,uint256)\":{\"notice\":\"Sets a market as active once it has already been setup by createNewSyntheticMarket.\"},\"mintLongNextPrice(uint32,uint256)\":{\"notice\":\"Allows users to mint long synthetic assets for a market. To prevent front-running these mints are executed on the next price update from the oracle.\"},\"mintShortNextPrice(uint32,uint256)\":{\"notice\":\"Allows users to mint short synthetic assets for a market. To prevent front-running these mints are executed on the next price update from the oracle.\"},\"redeemLongNextPrice(uint32,uint256)\":{\"notice\":\"Allows users to redeem long synthetic assets for a market. To prevent front-running these redeems are executed on the next price update from the oracle.\"},\"redeemShortNextPrice(uint32,uint256)\":{\"notice\":\"Allows users to redeem short synthetic assets for a market. To prevent front-running these redeems are executed on the next price update from the oracle.\"},\"shiftPositionFromLongNextPrice(uint32,uint256)\":{\"notice\":\"Allows users to shift their position from long to short in a single transaction. To prevent front-running these shifts are executed on the next price update from the oracle.\"},\"shiftPositionFromShortNextPrice(uint32,uint256)\":{\"notice\":\"Allows users to shift their position from short to long in a single transaction. To prevent front-running these shifts are executed on the next price update from the oracle.\"},\"shiftPositionNextPrice(uint32,uint256,bool)\":{\"notice\":\"Allows users to shift their position from one side of the market to the other in a single transaction. To prevent front-running these shifts are executed on the next price update from the oracle.\"},\"syntheticToken_priceSnapshotLEGACY(uint32,bool,uint256)\":{\"notice\":\"synthetic token prices of a given market of a (long/short) at every previous price update\"},\"updateMarketOracle(uint32,address)\":{\"notice\":\"Update oracle for a market\"},\"updateSystemState(uint32)\":{\"notice\":\"Updates the state of a market to account for the latest oracle price update.\"},\"updateSystemStateMulti(uint32[])\":{\"notice\":\"Updates the state of multiples markets to account for their latest oracle price updates.\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/longShort/LongShortPolygon.sol\":\"LongShortPolygon\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (access/AccessControl.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IAccessControlUpgradeable.sol\\\";\\nimport \\\"../utils/ContextUpgradeable.sol\\\";\\nimport \\\"../utils/StringsUpgradeable.sol\\\";\\nimport \\\"../utils/introspection/ERC165Upgradeable.sol\\\";\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Contract module that allows children to implement role-based access\\n * control mechanisms. This is a lightweight version that doesn't allow enumerating role\\n * members except through off-chain means by accessing the contract event logs. Some\\n * applications may benefit from on-chain enumerability, for those cases see\\n * {AccessControlEnumerable}.\\n *\\n * Roles are referred to by their `bytes32` identifier. These should be exposed\\n * in the external API and be unique. The best way to achieve this is by\\n * using `public constant` hash digests:\\n *\\n * ```\\n * bytes32 public constant MY_ROLE = keccak256(\\\"MY_ROLE\\\");\\n * ```\\n *\\n * Roles can be used to represent a set of permissions. To restrict access to a\\n * function call, use {hasRole}:\\n *\\n * ```\\n * function foo() public {\\n *     require(hasRole(MY_ROLE, msg.sender));\\n *     ...\\n * }\\n * ```\\n *\\n * Roles can be granted and revoked dynamically via the {grantRole} and\\n * {revokeRole} functions. Each role has an associated admin role, and only\\n * accounts that have a role's admin role can call {grantRole} and {revokeRole}.\\n *\\n * By default, the admin role for all roles is `DEFAULT_ADMIN_ROLE`, which means\\n * that only accounts with this role will be able to grant or revoke other\\n * roles. More complex role relationships can be created by using\\n * {_setRoleAdmin}.\\n *\\n * WARNING: The `DEFAULT_ADMIN_ROLE` is also its own admin: it has permission to\\n * grant and revoke this role. Extra precautions should be taken to secure\\n * accounts that have been granted it.\\n */\\nabstract contract AccessControlUpgradeable is Initializable, ContextUpgradeable, IAccessControlUpgradeable, ERC165Upgradeable {\\n    function __AccessControl_init() internal onlyInitializing {\\n        __Context_init_unchained();\\n        __ERC165_init_unchained();\\n        __AccessControl_init_unchained();\\n    }\\n\\n    function __AccessControl_init_unchained() internal onlyInitializing {\\n    }\\n    struct RoleData {\\n        mapping(address => bool) members;\\n        bytes32 adminRole;\\n    }\\n\\n    mapping(bytes32 => RoleData) private _roles;\\n\\n    bytes32 public constant DEFAULT_ADMIN_ROLE = 0x00;\\n\\n    /**\\n     * @dev Modifier that checks that an account has a specific role. Reverts\\n     * with a standardized message including the required role.\\n     *\\n     * The format of the revert reason is given by the following regular expression:\\n     *\\n     *  /^AccessControl: account (0x[0-9a-f]{40}) is missing role (0x[0-9a-f]{64})$/\\n     *\\n     * _Available since v4.1._\\n     */\\n    modifier onlyRole(bytes32 role) {\\n        _checkRole(role, _msgSender());\\n        _;\\n    }\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IAccessControlUpgradeable).interfaceId || super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @dev Returns `true` if `account` has been granted `role`.\\n     */\\n    function hasRole(bytes32 role, address account) public view override returns (bool) {\\n        return _roles[role].members[account];\\n    }\\n\\n    /**\\n     * @dev Revert with a standard message if `account` is missing `role`.\\n     *\\n     * The format of the revert reason is given by the following regular expression:\\n     *\\n     *  /^AccessControl: account (0x[0-9a-f]{40}) is missing role (0x[0-9a-f]{64})$/\\n     */\\n    function _checkRole(bytes32 role, address account) internal view {\\n        if (!hasRole(role, account)) {\\n            revert(\\n                string(\\n                    abi.encodePacked(\\n                        \\\"AccessControl: account \\\",\\n                        StringsUpgradeable.toHexString(uint160(account), 20),\\n                        \\\" is missing role \\\",\\n                        StringsUpgradeable.toHexString(uint256(role), 32)\\n                    )\\n                )\\n            );\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\\n     * {revokeRole}.\\n     *\\n     * To change a role's admin, use {_setRoleAdmin}.\\n     */\\n    function getRoleAdmin(bytes32 role) public view override returns (bytes32) {\\n        return _roles[role].adminRole;\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function grantRole(bytes32 role, address account) public virtual override onlyRole(getRoleAdmin(role)) {\\n        _grantRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function revokeRole(bytes32 role, address account) public virtual override onlyRole(getRoleAdmin(role)) {\\n        _revokeRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from the calling account.\\n     *\\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\\n     * purpose is to provide a mechanism for accounts to lose their privileges\\n     * if they are compromised (such as when a trusted device is misplaced).\\n     *\\n     * If the calling account had been revoked `role`, emits a {RoleRevoked}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must be `account`.\\n     */\\n    function renounceRole(bytes32 role, address account) public virtual override {\\n        require(account == _msgSender(), \\\"AccessControl: can only renounce roles for self\\\");\\n\\n        _revokeRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event. Note that unlike {grantRole}, this function doesn't perform any\\n     * checks on the calling account.\\n     *\\n     * [WARNING]\\n     * ====\\n     * This function should only be called from the constructor when setting\\n     * up the initial roles for the system.\\n     *\\n     * Using this function in any other way is effectively circumventing the admin\\n     * system imposed by {AccessControl}.\\n     * ====\\n     *\\n     * NOTE: This function is deprecated in favor of {_grantRole}.\\n     */\\n    function _setupRole(bytes32 role, address account) internal virtual {\\n        _grantRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Sets `adminRole` as ``role``'s admin role.\\n     *\\n     * Emits a {RoleAdminChanged} event.\\n     */\\n    function _setRoleAdmin(bytes32 role, bytes32 adminRole) internal virtual {\\n        bytes32 previousAdminRole = getRoleAdmin(role);\\n        _roles[role].adminRole = adminRole;\\n        emit RoleAdminChanged(role, previousAdminRole, adminRole);\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * Internal function without access restriction.\\n     */\\n    function _grantRole(bytes32 role, address account) internal virtual {\\n        if (!hasRole(role, account)) {\\n            _roles[role].members[account] = true;\\n            emit RoleGranted(role, account, _msgSender());\\n        }\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * Internal function without access restriction.\\n     */\\n    function _revokeRole(bytes32 role, address account) internal virtual {\\n        if (hasRole(role, account)) {\\n            _roles[role].members[account] = false;\\n            emit RoleRevoked(role, account, _msgSender());\\n        }\\n    }\\n    uint256[49] private __gap;\\n}\\n\",\"keccak256\":\"0x64bb2dbe7ec4fcadb2f163f41edf6f2e1cd8f16162f7a56c2581894e6ba0747c\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/access/IAccessControlUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (access/IAccessControl.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev External interface of AccessControl declared to support ERC165 detection.\\n */\\ninterface IAccessControlUpgradeable {\\n    /**\\n     * @dev Emitted when `newAdminRole` is set as ``role``'s admin role, replacing `previousAdminRole`\\n     *\\n     * `DEFAULT_ADMIN_ROLE` is the starting admin for all roles, despite\\n     * {RoleAdminChanged} not being emitted signaling this.\\n     *\\n     * _Available since v3.1._\\n     */\\n    event RoleAdminChanged(bytes32 indexed role, bytes32 indexed previousAdminRole, bytes32 indexed newAdminRole);\\n\\n    /**\\n     * @dev Emitted when `account` is granted `role`.\\n     *\\n     * `sender` is the account that originated the contract call, an admin role\\n     * bearer except when using {AccessControl-_setupRole}.\\n     */\\n    event RoleGranted(bytes32 indexed role, address indexed account, address indexed sender);\\n\\n    /**\\n     * @dev Emitted when `account` is revoked `role`.\\n     *\\n     * `sender` is the account that originated the contract call:\\n     *   - if using `revokeRole`, it is the admin role bearer\\n     *   - if using `renounceRole`, it is the role bearer (i.e. `account`)\\n     */\\n    event RoleRevoked(bytes32 indexed role, address indexed account, address indexed sender);\\n\\n    /**\\n     * @dev Returns `true` if `account` has been granted `role`.\\n     */\\n    function hasRole(bytes32 role, address account) external view returns (bool);\\n\\n    /**\\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\\n     * {revokeRole}.\\n     *\\n     * To change a role's admin, use {AccessControl-_setRoleAdmin}.\\n     */\\n    function getRoleAdmin(bytes32 role) external view returns (bytes32);\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function grantRole(bytes32 role, address account) external;\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function revokeRole(bytes32 role, address account) external;\\n\\n    /**\\n     * @dev Revokes `role` from the calling account.\\n     *\\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\\n     * purpose is to provide a mechanism for accounts to lose their privileges\\n     * if they are compromised (such as when a trusted device is misplaced).\\n     *\\n     * If the calling account had been granted `role`, emits a {RoleRevoked}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must be `account`.\\n     */\\n    function renounceRole(bytes32 role, address account) external;\\n}\\n\",\"keccak256\":\"0xb8f5302f12138c5561362e88a78d061573e6298b7a1a5afe84a1e2c8d4d5aeaa\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/proxy/ERC1967/ERC1967UpgradeUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (proxy/ERC1967/ERC1967Upgrade.sol)\\n\\npragma solidity ^0.8.2;\\n\\nimport \\\"../beacon/IBeaconUpgradeable.sol\\\";\\nimport \\\"../../utils/AddressUpgradeable.sol\\\";\\nimport \\\"../../utils/StorageSlotUpgradeable.sol\\\";\\nimport \\\"../utils/Initializable.sol\\\";\\n\\n/**\\n * @dev This abstract contract provides getters and event emitting update functions for\\n * https://eips.ethereum.org/EIPS/eip-1967[EIP1967] slots.\\n *\\n * _Available since v4.1._\\n *\\n * @custom:oz-upgrades-unsafe-allow delegatecall\\n */\\nabstract contract ERC1967UpgradeUpgradeable is Initializable {\\n    function __ERC1967Upgrade_init() internal onlyInitializing {\\n        __ERC1967Upgrade_init_unchained();\\n    }\\n\\n    function __ERC1967Upgrade_init_unchained() internal onlyInitializing {\\n    }\\n    // This is the keccak-256 hash of \\\"eip1967.proxy.rollback\\\" subtracted by 1\\n    bytes32 private constant _ROLLBACK_SLOT = 0x4910fdfa16fed3260ed0e7147f7cc6da11a60208b5b9406d12a635614ffd9143;\\n\\n    /**\\n     * @dev Storage slot with the address of the current implementation.\\n     * This is the keccak-256 hash of \\\"eip1967.proxy.implementation\\\" subtracted by 1, and is\\n     * validated in the constructor.\\n     */\\n    bytes32 internal constant _IMPLEMENTATION_SLOT = 0x360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc;\\n\\n    /**\\n     * @dev Emitted when the implementation is upgraded.\\n     */\\n    event Upgraded(address indexed implementation);\\n\\n    /**\\n     * @dev Returns the current implementation address.\\n     */\\n    function _getImplementation() internal view returns (address) {\\n        return StorageSlotUpgradeable.getAddressSlot(_IMPLEMENTATION_SLOT).value;\\n    }\\n\\n    /**\\n     * @dev Stores a new address in the EIP1967 implementation slot.\\n     */\\n    function _setImplementation(address newImplementation) private {\\n        require(AddressUpgradeable.isContract(newImplementation), \\\"ERC1967: new implementation is not a contract\\\");\\n        StorageSlotUpgradeable.getAddressSlot(_IMPLEMENTATION_SLOT).value = newImplementation;\\n    }\\n\\n    /**\\n     * @dev Perform implementation upgrade\\n     *\\n     * Emits an {Upgraded} event.\\n     */\\n    function _upgradeTo(address newImplementation) internal {\\n        _setImplementation(newImplementation);\\n        emit Upgraded(newImplementation);\\n    }\\n\\n    /**\\n     * @dev Perform implementation upgrade with additional setup call.\\n     *\\n     * Emits an {Upgraded} event.\\n     */\\n    function _upgradeToAndCall(\\n        address newImplementation,\\n        bytes memory data,\\n        bool forceCall\\n    ) internal {\\n        _upgradeTo(newImplementation);\\n        if (data.length > 0 || forceCall) {\\n            _functionDelegateCall(newImplementation, data);\\n        }\\n    }\\n\\n    /**\\n     * @dev Perform implementation upgrade with security checks for UUPS proxies, and additional setup call.\\n     *\\n     * Emits an {Upgraded} event.\\n     */\\n    function _upgradeToAndCallSecure(\\n        address newImplementation,\\n        bytes memory data,\\n        bool forceCall\\n    ) internal {\\n        address oldImplementation = _getImplementation();\\n\\n        // Initial upgrade and setup call\\n        _setImplementation(newImplementation);\\n        if (data.length > 0 || forceCall) {\\n            _functionDelegateCall(newImplementation, data);\\n        }\\n\\n        // Perform rollback test if not already in progress\\n        StorageSlotUpgradeable.BooleanSlot storage rollbackTesting = StorageSlotUpgradeable.getBooleanSlot(_ROLLBACK_SLOT);\\n        if (!rollbackTesting.value) {\\n            // Trigger rollback using upgradeTo from the new implementation\\n            rollbackTesting.value = true;\\n            _functionDelegateCall(\\n                newImplementation,\\n                abi.encodeWithSignature(\\\"upgradeTo(address)\\\", oldImplementation)\\n            );\\n            rollbackTesting.value = false;\\n            // Check rollback was effective\\n            require(oldImplementation == _getImplementation(), \\\"ERC1967Upgrade: upgrade breaks further upgrades\\\");\\n            // Finally reset to the new implementation and log the upgrade\\n            _upgradeTo(newImplementation);\\n        }\\n    }\\n\\n    /**\\n     * @dev Storage slot with the admin of the contract.\\n     * This is the keccak-256 hash of \\\"eip1967.proxy.admin\\\" subtracted by 1, and is\\n     * validated in the constructor.\\n     */\\n    bytes32 internal constant _ADMIN_SLOT = 0xb53127684a568b3173ae13b9f8a6016e243e63b6e8ee1178d6a717850b5d6103;\\n\\n    /**\\n     * @dev Emitted when the admin account has changed.\\n     */\\n    event AdminChanged(address previousAdmin, address newAdmin);\\n\\n    /**\\n     * @dev Returns the current admin.\\n     */\\n    function _getAdmin() internal view returns (address) {\\n        return StorageSlotUpgradeable.getAddressSlot(_ADMIN_SLOT).value;\\n    }\\n\\n    /**\\n     * @dev Stores a new address in the EIP1967 admin slot.\\n     */\\n    function _setAdmin(address newAdmin) private {\\n        require(newAdmin != address(0), \\\"ERC1967: new admin is the zero address\\\");\\n        StorageSlotUpgradeable.getAddressSlot(_ADMIN_SLOT).value = newAdmin;\\n    }\\n\\n    /**\\n     * @dev Changes the admin of the proxy.\\n     *\\n     * Emits an {AdminChanged} event.\\n     */\\n    function _changeAdmin(address newAdmin) internal {\\n        emit AdminChanged(_getAdmin(), newAdmin);\\n        _setAdmin(newAdmin);\\n    }\\n\\n    /**\\n     * @dev The storage slot of the UpgradeableBeacon contract which defines the implementation for this proxy.\\n     * This is bytes32(uint256(keccak256('eip1967.proxy.beacon')) - 1)) and is validated in the constructor.\\n     */\\n    bytes32 internal constant _BEACON_SLOT = 0xa3f0ad74e5423aebfd80d3ef4346578335a9a72aeaee59ff6cb3582b35133d50;\\n\\n    /**\\n     * @dev Emitted when the beacon is upgraded.\\n     */\\n    event BeaconUpgraded(address indexed beacon);\\n\\n    /**\\n     * @dev Returns the current beacon.\\n     */\\n    function _getBeacon() internal view returns (address) {\\n        return StorageSlotUpgradeable.getAddressSlot(_BEACON_SLOT).value;\\n    }\\n\\n    /**\\n     * @dev Stores a new beacon in the EIP1967 beacon slot.\\n     */\\n    function _setBeacon(address newBeacon) private {\\n        require(AddressUpgradeable.isContract(newBeacon), \\\"ERC1967: new beacon is not a contract\\\");\\n        require(\\n            AddressUpgradeable.isContract(IBeaconUpgradeable(newBeacon).implementation()),\\n            \\\"ERC1967: beacon implementation is not a contract\\\"\\n        );\\n        StorageSlotUpgradeable.getAddressSlot(_BEACON_SLOT).value = newBeacon;\\n    }\\n\\n    /**\\n     * @dev Perform beacon upgrade with additional setup call. Note: This upgrades the address of the beacon, it does\\n     * not upgrade the implementation contained in the beacon (see {UpgradeableBeacon-_setImplementation} for that).\\n     *\\n     * Emits a {BeaconUpgraded} event.\\n     */\\n    function _upgradeBeaconToAndCall(\\n        address newBeacon,\\n        bytes memory data,\\n        bool forceCall\\n    ) internal {\\n        _setBeacon(newBeacon);\\n        emit BeaconUpgraded(newBeacon);\\n        if (data.length > 0 || forceCall) {\\n            _functionDelegateCall(IBeaconUpgradeable(newBeacon).implementation(), data);\\n        }\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function _functionDelegateCall(address target, bytes memory data) private returns (bytes memory) {\\n        require(AddressUpgradeable.isContract(target), \\\"Address: delegate call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return AddressUpgradeable.verifyCallResult(success, returndata, \\\"Address: low-level delegate call failed\\\");\\n    }\\n    uint256[50] private __gap;\\n}\\n\",\"keccak256\":\"0xba3e051005a0b7f77c465dbcfe6366ce6a72e3845028277e1f794e5e8864e017\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/proxy/beacon/IBeaconUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (proxy/beacon/IBeacon.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev This is the interface that {BeaconProxy} expects of its beacon.\\n */\\ninterface IBeaconUpgradeable {\\n    /**\\n     * @dev Must return an address that can be used as a delegate call target.\\n     *\\n     * {BeaconProxy} will check that this address is a contract.\\n     */\\n    function implementation() external view returns (address);\\n}\\n\",\"keccak256\":\"0x24b86ac8c005b8c654fbf6ac34a5a4f61580d7273541e83e013e89d66fbf0908\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (proxy/utils/Initializable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/AddressUpgradeable.sol\\\";\\n\\n/**\\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\\n * behind a proxy. Since a proxied contract can't have a constructor, it's common to move constructor logic to an\\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\\n *\\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\\n * possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\\n *\\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\\n *\\n * [CAUTION]\\n * ====\\n * Avoid leaving a contract uninitialized.\\n *\\n * An uninitialized contract can be taken over by an attacker. This applies to both a proxy and its implementation\\n * contract, which may impact the proxy. To initialize the implementation contract, you can either invoke the\\n * initializer manually, or you can include a constructor to automatically mark it as initialized when it is deployed:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```\\n * /// @custom:oz-upgrades-unsafe-allow constructor\\n * constructor() initializer {}\\n * ```\\n * ====\\n */\\nabstract contract Initializable {\\n    /**\\n     * @dev Indicates that the contract has been initialized.\\n     */\\n    bool private _initialized;\\n\\n    /**\\n     * @dev Indicates that the contract is in the process of being initialized.\\n     */\\n    bool private _initializing;\\n\\n    /**\\n     * @dev Modifier to protect an initializer function from being invoked twice.\\n     */\\n    modifier initializer() {\\n        // If the contract is initializing we ignore whether _initialized is set in order to support multiple\\n        // inheritance patterns, but we only do this in the context of a constructor, because in other contexts the\\n        // contract may have been reentered.\\n        require(_initializing ? _isConstructor() : !_initialized, \\\"Initializable: contract is already initialized\\\");\\n\\n        bool isTopLevelCall = !_initializing;\\n        if (isTopLevelCall) {\\n            _initializing = true;\\n            _initialized = true;\\n        }\\n\\n        _;\\n\\n        if (isTopLevelCall) {\\n            _initializing = false;\\n        }\\n    }\\n\\n    /**\\n     * @dev Modifier to protect an initialization function so that it can only be invoked by functions with the\\n     * {initializer} modifier, directly or indirectly.\\n     */\\n    modifier onlyInitializing() {\\n        require(_initializing, \\\"Initializable: contract is not initializing\\\");\\n        _;\\n    }\\n\\n    function _isConstructor() private view returns (bool) {\\n        return !AddressUpgradeable.isContract(address(this));\\n    }\\n}\\n\",\"keccak256\":\"0x68861bcc80cacbd498efde75aab6c74a486cc48262660d326c8d7530d9752097\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/proxy/utils/UUPSUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (proxy/utils/UUPSUpgradeable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../ERC1967/ERC1967UpgradeUpgradeable.sol\\\";\\nimport \\\"./Initializable.sol\\\";\\n\\n/**\\n * @dev An upgradeability mechanism designed for UUPS proxies. The functions included here can perform an upgrade of an\\n * {ERC1967Proxy}, when this contract is set as the implementation behind such a proxy.\\n *\\n * A security mechanism ensures that an upgrade does not turn off upgradeability accidentally, although this risk is\\n * reinstated if the upgrade retains upgradeability but removes the security mechanism, e.g. by replacing\\n * `UUPSUpgradeable` with a custom implementation of upgrades.\\n *\\n * The {_authorizeUpgrade} function must be overridden to include access restriction to the upgrade mechanism.\\n *\\n * _Available since v4.1._\\n */\\nabstract contract UUPSUpgradeable is Initializable, ERC1967UpgradeUpgradeable {\\n    function __UUPSUpgradeable_init() internal onlyInitializing {\\n        __ERC1967Upgrade_init_unchained();\\n        __UUPSUpgradeable_init_unchained();\\n    }\\n\\n    function __UUPSUpgradeable_init_unchained() internal onlyInitializing {\\n    }\\n    /// @custom:oz-upgrades-unsafe-allow state-variable-immutable state-variable-assignment\\n    address private immutable __self = address(this);\\n\\n    /**\\n     * @dev Check that the execution is being performed through a delegatecall call and that the execution context is\\n     * a proxy contract with an implementation (as defined in ERC1967) pointing to self. This should only be the case\\n     * for UUPS and transparent proxies that are using the current contract as their implementation. Execution of a\\n     * function through ERC1167 minimal proxies (clones) would not normally pass this test, but is not guaranteed to\\n     * fail.\\n     */\\n    modifier onlyProxy() {\\n        require(address(this) != __self, \\\"Function must be called through delegatecall\\\");\\n        require(_getImplementation() == __self, \\\"Function must be called through active proxy\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Upgrade the implementation of the proxy to `newImplementation`.\\n     *\\n     * Calls {_authorizeUpgrade}.\\n     *\\n     * Emits an {Upgraded} event.\\n     */\\n    function upgradeTo(address newImplementation) external virtual onlyProxy {\\n        _authorizeUpgrade(newImplementation);\\n        _upgradeToAndCallSecure(newImplementation, new bytes(0), false);\\n    }\\n\\n    /**\\n     * @dev Upgrade the implementation of the proxy to `newImplementation`, and subsequently execute the function call\\n     * encoded in `data`.\\n     *\\n     * Calls {_authorizeUpgrade}.\\n     *\\n     * Emits an {Upgraded} event.\\n     */\\n    function upgradeToAndCall(address newImplementation, bytes memory data) external payable virtual onlyProxy {\\n        _authorizeUpgrade(newImplementation);\\n        _upgradeToAndCallSecure(newImplementation, data, true);\\n    }\\n\\n    /**\\n     * @dev Function that should revert when `msg.sender` is not authorized to upgrade the contract. Called by\\n     * {upgradeTo} and {upgradeToAndCall}.\\n     *\\n     * Normally, this function will use an xref:access.adoc[access control] modifier such as {Ownable-onlyOwner}.\\n     *\\n     * ```solidity\\n     * function _authorizeUpgrade(address) internal override onlyOwner {}\\n     * ```\\n     */\\n    function _authorizeUpgrade(address newImplementation) internal virtual;\\n    uint256[50] private __gap;\\n}\\n\",\"keccak256\":\"0xed65883d4af8d00c76ff9f1b7758c5d8ac4ab82da60f9743c74d31b754b06bc0\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Address.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary AddressUpgradeable {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize, which returns 0 for contracts in\\n        // construction, since the code is only stored at the end of the\\n        // constructor execution.\\n\\n        uint256 size;\\n        assembly {\\n            size := extcodesize(account)\\n        }\\n        return size > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x3f0f878c796dfc7feba6d3c4e3e526c14c7deae8b7bfc71088e3f38fab0d77b3\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract ContextUpgradeable is Initializable {\\n    function __Context_init() internal onlyInitializing {\\n        __Context_init_unchained();\\n    }\\n\\n    function __Context_init_unchained() internal onlyInitializing {\\n    }\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n    uint256[50] private __gap;\\n}\\n\",\"keccak256\":\"0x0b0d548f6381370d394f7a434f994dc678b3ef3e755de106109d61343a685ea7\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/StorageSlotUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/StorageSlot.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Library for reading and writing primitive types to specific storage slots.\\n *\\n * Storage slots are often used to avoid storage conflict when dealing with upgradeable contracts.\\n * This library helps with reading and writing to such slots without the need for inline assembly.\\n *\\n * The functions in this library return Slot structs that contain a `value` member that can be used to read or write.\\n *\\n * Example usage to set ERC1967 implementation slot:\\n * ```\\n * contract ERC1967 {\\n *     bytes32 internal constant _IMPLEMENTATION_SLOT = 0x360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc;\\n *\\n *     function _getImplementation() internal view returns (address) {\\n *         return StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value;\\n *     }\\n *\\n *     function _setImplementation(address newImplementation) internal {\\n *         require(Address.isContract(newImplementation), \\\"ERC1967: new implementation is not a contract\\\");\\n *         StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value = newImplementation;\\n *     }\\n * }\\n * ```\\n *\\n * _Available since v4.1 for `address`, `bool`, `bytes32`, and `uint256`._\\n */\\nlibrary StorageSlotUpgradeable {\\n    struct AddressSlot {\\n        address value;\\n    }\\n\\n    struct BooleanSlot {\\n        bool value;\\n    }\\n\\n    struct Bytes32Slot {\\n        bytes32 value;\\n    }\\n\\n    struct Uint256Slot {\\n        uint256 value;\\n    }\\n\\n    /**\\n     * @dev Returns an `AddressSlot` with member `value` located at `slot`.\\n     */\\n    function getAddressSlot(bytes32 slot) internal pure returns (AddressSlot storage r) {\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `BooleanSlot` with member `value` located at `slot`.\\n     */\\n    function getBooleanSlot(bytes32 slot) internal pure returns (BooleanSlot storage r) {\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `Bytes32Slot` with member `value` located at `slot`.\\n     */\\n    function getBytes32Slot(bytes32 slot) internal pure returns (Bytes32Slot storage r) {\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `Uint256Slot` with member `value` located at `slot`.\\n     */\\n    function getUint256Slot(bytes32 slot) internal pure returns (Uint256Slot storage r) {\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x422c3d27d0d5681cea93acbb0dcb175fa5b461b5b7731da7ff77e51f0f0174c7\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/StringsUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Strings.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev String operations.\\n */\\nlibrary StringsUpgradeable {\\n    bytes16 private constant _HEX_SYMBOLS = \\\"0123456789abcdef\\\";\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(uint256 value) internal pure returns (string memory) {\\n        // Inspired by OraclizeAPI's implementation - MIT licence\\n        // https://github.com/oraclize/ethereum-api/blob/b42146b063c7d6ee1358846c198246239e9360e8/oraclizeAPI_0.4.25.sol\\n\\n        if (value == 0) {\\n            return \\\"0\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 digits;\\n        while (temp != 0) {\\n            digits++;\\n            temp /= 10;\\n        }\\n        bytes memory buffer = new bytes(digits);\\n        while (value != 0) {\\n            digits -= 1;\\n            buffer[digits] = bytes1(uint8(48 + uint256(value % 10)));\\n            value /= 10;\\n        }\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(uint256 value) internal pure returns (string memory) {\\n        if (value == 0) {\\n            return \\\"0x00\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 length = 0;\\n        while (temp != 0) {\\n            length++;\\n            temp >>= 8;\\n        }\\n        return toHexString(value, length);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\\n     */\\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\\n        bytes memory buffer = new bytes(2 * length + 2);\\n        buffer[0] = \\\"0\\\";\\n        buffer[1] = \\\"x\\\";\\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\\n            buffer[i] = _HEX_SYMBOLS[value & 0xf];\\n            value >>= 4;\\n        }\\n        require(value == 0, \\\"Strings: hex length insufficient\\\");\\n        return string(buffer);\\n    }\\n}\\n\",\"keccak256\":\"0x398d3323c1932a5986bf36be7c57593e121e69d5db5b6574b4ee0d031443de37\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/introspection/ERC165Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/ERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC165Upgradeable.sol\\\";\\nimport \\\"../../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC165} interface.\\n *\\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\\n * for the additional interface id that will be supported. For example:\\n *\\n * ```solidity\\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\\n * }\\n * ```\\n *\\n * Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.\\n */\\nabstract contract ERC165Upgradeable is Initializable, IERC165Upgradeable {\\n    function __ERC165_init() internal onlyInitializing {\\n        __ERC165_init_unchained();\\n    }\\n\\n    function __ERC165_init_unchained() internal onlyInitializing {\\n    }\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IERC165Upgradeable).interfaceId;\\n    }\\n    uint256[50] private __gap;\\n}\\n\",\"keccak256\":\"0xcd98895383d51dc86669a76ae3ad4419fc5dc079d01faea23498e80c1cf9f78a\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/introspection/IERC165Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165Upgradeable {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0xc6cef87559d0aeffdf0a99803de655938a7779ec0a3cd5d4383483ad85565a09\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address sender,\\n        address recipient,\\n        uint256 amount\\n    ) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\",\"keccak256\":\"0x61437cb513a887a1bbad006e7b1c8b414478427d33de47c5600af3c748f108da\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/utils/SafeERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\nimport \\\"../../../utils/Address.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n    using Address for address;\\n\\n    function safeTransfer(\\n        IERC20 token,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    function safeTransferFrom(\\n        IERC20 token,\\n        address from,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    /**\\n     * @dev Deprecated. This function has issues similar to the ones found in\\n     * {IERC20-approve}, and its usage is discouraged.\\n     *\\n     * Whenever possible, use {safeIncreaseAllowance} and\\n     * {safeDecreaseAllowance} instead.\\n     */\\n    function safeApprove(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        // safeApprove should only be called when setting an initial allowance,\\n        // or when resetting it to zero. To increase and decrease it, use\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n        require(\\n            (value == 0) || (token.allowance(address(this), spender) == 0),\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\n        );\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n    }\\n\\n    function safeIncreaseAllowance(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender) + value;\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    function safeDecreaseAllowance(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        unchecked {\\n            uint256 oldAllowance = token.allowance(address(this), spender);\\n            require(oldAllowance >= value, \\\"SafeERC20: decreased allowance below zero\\\");\\n            uint256 newAllowance = oldAllowance - value;\\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n        }\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data, \\\"SafeERC20: low-level call failed\\\");\\n        if (returndata.length > 0) {\\n            // Return data is optional\\n            require(abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xc3d946432c0ddbb1f846a0d3985be71299df331b91d06732152117f62f0be2b5\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Address.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize, which returns 0 for contracts in\\n        // construction, since the code is only stored at the end of the\\n        // constructor execution.\\n\\n        uint256 size;\\n        assembly {\\n            size := extcodesize(account)\\n        }\\n        return size > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(isContract(target), \\\"Address: delegate call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x51b758a8815ecc9596c66c37d56b1d33883a444631a3f916b9fe65cb863ef7c4\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/math/Math.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/math/Math.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Standard math utilities missing in the Solidity language.\\n */\\nlibrary Math {\\n    /**\\n     * @dev Returns the largest of two numbers.\\n     */\\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a >= b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two numbers.\\n     */\\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a < b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the average of two numbers. The result is rounded towards\\n     * zero.\\n     */\\n    function average(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b) / 2 can overflow.\\n        return (a & b) + (a ^ b) / 2;\\n    }\\n\\n    /**\\n     * @dev Returns the ceiling of the division of two numbers.\\n     *\\n     * This differs from standard division with `/` in that it rounds up instead\\n     * of rounding down.\\n     */\\n    function ceilDiv(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b - 1) / b can overflow on addition, so we distribute.\\n        return a / b + (a % b == 0 ? 0 : 1);\\n    }\\n}\\n\",\"keccak256\":\"0xfaad496c1c944b6259b7dc70b4865eb1775d6402bc0c81b38a0b24d9f525ae37\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/math/SafeCast.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/math/SafeCast.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Wrappers over Solidity's uintXX/intXX casting operators with added overflow\\n * checks.\\n *\\n * Downcasting from uint256/int256 in Solidity does not revert on overflow. This can\\n * easily result in undesired exploitation or bugs, since developers usually\\n * assume that overflows raise errors. `SafeCast` restores this intuition by\\n * reverting the transaction when such an operation overflows.\\n *\\n * Using this library instead of the unchecked operations eliminates an entire\\n * class of bugs, so it's recommended to use it always.\\n *\\n * Can be combined with {SafeMath} and {SignedSafeMath} to extend it to smaller types, by performing\\n * all math on `uint256` and `int256` and then downcasting.\\n */\\nlibrary SafeCast {\\n    /**\\n     * @dev Returns the downcasted uint224 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint224).\\n     *\\n     * Counterpart to Solidity's `uint224` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 224 bits\\n     */\\n    function toUint224(uint256 value) internal pure returns (uint224) {\\n        require(value <= type(uint224).max, \\\"SafeCast: value doesn't fit in 224 bits\\\");\\n        return uint224(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint128 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint128).\\n     *\\n     * Counterpart to Solidity's `uint128` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 128 bits\\n     */\\n    function toUint128(uint256 value) internal pure returns (uint128) {\\n        require(value <= type(uint128).max, \\\"SafeCast: value doesn't fit in 128 bits\\\");\\n        return uint128(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint96 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint96).\\n     *\\n     * Counterpart to Solidity's `uint96` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 96 bits\\n     */\\n    function toUint96(uint256 value) internal pure returns (uint96) {\\n        require(value <= type(uint96).max, \\\"SafeCast: value doesn't fit in 96 bits\\\");\\n        return uint96(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint64 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint64).\\n     *\\n     * Counterpart to Solidity's `uint64` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 64 bits\\n     */\\n    function toUint64(uint256 value) internal pure returns (uint64) {\\n        require(value <= type(uint64).max, \\\"SafeCast: value doesn't fit in 64 bits\\\");\\n        return uint64(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint32 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint32).\\n     *\\n     * Counterpart to Solidity's `uint32` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 32 bits\\n     */\\n    function toUint32(uint256 value) internal pure returns (uint32) {\\n        require(value <= type(uint32).max, \\\"SafeCast: value doesn't fit in 32 bits\\\");\\n        return uint32(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint16 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint16).\\n     *\\n     * Counterpart to Solidity's `uint16` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 16 bits\\n     */\\n    function toUint16(uint256 value) internal pure returns (uint16) {\\n        require(value <= type(uint16).max, \\\"SafeCast: value doesn't fit in 16 bits\\\");\\n        return uint16(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint8 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint8).\\n     *\\n     * Counterpart to Solidity's `uint8` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 8 bits.\\n     */\\n    function toUint8(uint256 value) internal pure returns (uint8) {\\n        require(value <= type(uint8).max, \\\"SafeCast: value doesn't fit in 8 bits\\\");\\n        return uint8(value);\\n    }\\n\\n    /**\\n     * @dev Converts a signed int256 into an unsigned uint256.\\n     *\\n     * Requirements:\\n     *\\n     * - input must be greater than or equal to 0.\\n     */\\n    function toUint256(int256 value) internal pure returns (uint256) {\\n        require(value >= 0, \\\"SafeCast: value must be positive\\\");\\n        return uint256(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int128 from int256, reverting on\\n     * overflow (when the input is less than smallest int128 or\\n     * greater than largest int128).\\n     *\\n     * Counterpart to Solidity's `int128` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 128 bits\\n     *\\n     * _Available since v3.1._\\n     */\\n    function toInt128(int256 value) internal pure returns (int128) {\\n        require(value >= type(int128).min && value <= type(int128).max, \\\"SafeCast: value doesn't fit in 128 bits\\\");\\n        return int128(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int64 from int256, reverting on\\n     * overflow (when the input is less than smallest int64 or\\n     * greater than largest int64).\\n     *\\n     * Counterpart to Solidity's `int64` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 64 bits\\n     *\\n     * _Available since v3.1._\\n     */\\n    function toInt64(int256 value) internal pure returns (int64) {\\n        require(value >= type(int64).min && value <= type(int64).max, \\\"SafeCast: value doesn't fit in 64 bits\\\");\\n        return int64(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int32 from int256, reverting on\\n     * overflow (when the input is less than smallest int32 or\\n     * greater than largest int32).\\n     *\\n     * Counterpart to Solidity's `int32` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 32 bits\\n     *\\n     * _Available since v3.1._\\n     */\\n    function toInt32(int256 value) internal pure returns (int32) {\\n        require(value >= type(int32).min && value <= type(int32).max, \\\"SafeCast: value doesn't fit in 32 bits\\\");\\n        return int32(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int16 from int256, reverting on\\n     * overflow (when the input is less than smallest int16 or\\n     * greater than largest int16).\\n     *\\n     * Counterpart to Solidity's `int16` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 16 bits\\n     *\\n     * _Available since v3.1._\\n     */\\n    function toInt16(int256 value) internal pure returns (int16) {\\n        require(value >= type(int16).min && value <= type(int16).max, \\\"SafeCast: value doesn't fit in 16 bits\\\");\\n        return int16(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int8 from int256, reverting on\\n     * overflow (when the input is less than smallest int8 or\\n     * greater than largest int8).\\n     *\\n     * Counterpart to Solidity's `int8` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 8 bits.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function toInt8(int256 value) internal pure returns (int8) {\\n        require(value >= type(int8).min && value <= type(int8).max, \\\"SafeCast: value doesn't fit in 8 bits\\\");\\n        return int8(value);\\n    }\\n\\n    /**\\n     * @dev Converts an unsigned uint256 into a signed int256.\\n     *\\n     * Requirements:\\n     *\\n     * - input must be less than or equal to maxInt256.\\n     */\\n    function toInt256(uint256 value) internal pure returns (int256) {\\n        // Note: Unsafe cast below is okay because `type(int256).max` is guaranteed to be positive\\n        require(value <= uint256(type(int256).max), \\\"SafeCast: value doesn't fit in an int256\\\");\\n        return int256(value);\\n    }\\n}\\n\",\"keccak256\":\"0x5c6caab697d302ad7eb59c234a4d2dbc965c1bae87709bd2850060b7695b28c7\",\"license\":\"MIT\"},\"contracts/GEMS.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\n\\npragma solidity 0.8.10;\\n\\nimport \\\"./abstract/AccessControlledAndUpgradeable.sol\\\";\\n\\n/** Contract giving user GEMS*/\\n\\n// Inspired by https://github.com/andrecronje/rarity/blob/main/rarity.sol\\n\\n/** @title GEMS */\\ncontract GEMS is AccessControlledAndUpgradeable {\\n  bytes32 public constant GEM_ROLE = keccak256(\\\"GEM_ROLE\\\");\\n\\n  uint256 constant gems_per_day = 250e18;\\n  uint256 constant DAY = 1 days;\\n\\n  mapping(address => uint256) public gems;\\n  mapping(address => uint256) public streak;\\n  mapping(address => uint256) public lastAction;\\n\\n  event GemsCollected(address user, uint256 gems, uint256 streak);\\n\\n  function initialize(\\n    address _admin,\\n    address _longShort,\\n    address _staker\\n  ) public {\\n    // The below function ensures that this contract can't be re-initialized!\\n    _AccessControlledAndUpgradeable_init(_admin);\\n    _setupRole(GEM_ROLE, _longShort);\\n    _setupRole(GEM_ROLE, _staker);\\n  }\\n\\n  // Say gm and get gems by performing an action in LongShort or Staker\\n  function gm(address user) external {\\n    if (hasRole(GEM_ROLE, msg.sender)) {\\n      uint256 usersLastAction = lastAction[user];\\n      uint256 blocktimestamp = block.timestamp;\\n\\n      if (blocktimestamp - usersLastAction >= DAY) {\\n        // Award gems\\n        gems[user] += gems_per_day;\\n\\n        // Increment streak\\n        if (blocktimestamp - usersLastAction < 2 * DAY) {\\n          streak[user] += 1;\\n        } else {\\n          streak[user] = 1; // reset streak to 1\\n        }\\n\\n        lastAction[user] = blocktimestamp;\\n        emit GemsCollected(user, gems[user], streak[user]);\\n      }\\n    }\\n  }\\n\\n  function balanceOf(address account) public view returns (uint256) {\\n    return gems[account];\\n  }\\n}\\n\",\"keccak256\":\"0x7ba3e292ad9d756a38e4bbf268fa7103c1bf1aaa320ccc8af150cef61a89080c\",\"license\":\"BUSL-1.1\"},\"contracts/abstract/AccessControlledAndUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\n\\nimport \\\"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/proxy/utils/UUPSUpgradeable.sol\\\";\\n\\nimport \\\"hardhat/console.sol\\\";\\n\\nabstract contract AccessControlledAndUpgradeable is\\n  Initializable,\\n  AccessControlUpgradeable,\\n  UUPSUpgradeable\\n{\\n  bytes32 public constant UPGRADER_ROLE = keccak256(\\\"UPGRADER_ROLE\\\");\\n  bytes32 public constant ADMIN_ROLE = keccak256(\\\"ADMIN_ROLE\\\");\\n\\n  /// @notice Initializes the contract when called by parent initializers.\\n  /// @param initialAdmin The initial admin who will hold all roles.\\n  function _AccessControlledAndUpgradeable_init(address initialAdmin) internal initializer {\\n    __AccessControl_init();\\n    __UUPSUpgradeable_init();\\n    _AccessControlledAndUpgradeable_init_unchained(initialAdmin);\\n  }\\n\\n  /// @notice Initializes the contract for contracts that already call both __AccessControl_init\\n  ///         and _UUPSUpgradeable_init when initializing.\\n  /// @param initialAdmin The initial admin who will hold all roles.\\n  function _AccessControlledAndUpgradeable_init_unchained(address initialAdmin) internal {\\n    require(initialAdmin != address(0));\\n    _setupRole(DEFAULT_ADMIN_ROLE, initialAdmin);\\n    _setupRole(ADMIN_ROLE, initialAdmin);\\n    _setupRole(UPGRADER_ROLE, initialAdmin);\\n  }\\n\\n  /// @notice Authorizes an upgrade to a new address.\\n  /// @dev Can only be called by addresses wih UPGRADER_ROLE\\n  function _authorizeUpgrade(address) internal override onlyRole(UPGRADER_ROLE) {}\\n}\\n\",\"keccak256\":\"0x1b271a24b8b947f28caae8c97ab161bedb806a7afc09670627f9423e98ab9a27\",\"license\":\"BUSL-1.1\"},\"contracts/interfaces/ILongShort.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\n\\npragma solidity 0.8.10;\\n\\ninterface ILongShort {\\n  /*\\u2554\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2557\\n    \\u2551           EVENTS           \\u2551\\n    \\u255a\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u255d*/\\n\\n  event Upgrade(uint256 version);\\n  event LongShortV1(address admin, address tokenFactory, address staker);\\n\\n  event SystemStateUpdated(\\n    uint32 marketIndex,\\n    uint256 updateIndex,\\n    int256 underlyingAssetPrice,\\n    uint256 longValue,\\n    uint256 shortValue,\\n    uint256 longPrice,\\n    uint256 shortPrice\\n  );\\n\\n  event SyntheticMarketCreated(\\n    uint32 marketIndex,\\n    address longTokenAddress,\\n    address shortTokenAddress,\\n    address paymentToken,\\n    int256 initialAssetPrice,\\n    string name,\\n    string symbol,\\n    address oracleAddress,\\n    address yieldManagerAddress\\n  );\\n\\n  event NextPriceRedeem(\\n    uint32 marketIndex,\\n    bool isLong,\\n    uint256 synthRedeemed,\\n    address user,\\n    uint256 oracleUpdateIndex\\n  );\\n\\n  event NextPriceSyntheticPositionShift(\\n    uint32 marketIndex,\\n    bool isShiftFromLong,\\n    uint256 synthShifted,\\n    address user,\\n    uint256 oracleUpdateIndex\\n  );\\n\\n  event NextPriceDeposit(\\n    uint32 marketIndex,\\n    bool isLong,\\n    uint256 depositAdded,\\n    address user,\\n    uint256 oracleUpdateIndex\\n  );\\n\\n  event NextPriceDepositAndStake(\\n    uint32 marketIndex,\\n    bool isLong,\\n    uint256 amountToStake,\\n    address user,\\n    uint256 oracleUpdateIndex\\n  );\\n\\n  event OracleUpdated(uint32 marketIndex, address oldOracleAddress, address newOracleAddress);\\n\\n  event NewMarketLaunchedAndSeeded(uint32 marketIndex, uint256 initialSeed, uint256 marketLeverage);\\n\\n  event ExecuteNextPriceSettlementsUser(address user, uint32 marketIndex);\\n\\n  event MarketFundingRateMultiplerChanged(uint32 marketIndex, uint256 fundingRateMultiplier_e18);\\n\\n  function syntheticTokens(uint32, bool) external view returns (address);\\n\\n  function assetPrice(uint32) external view returns (int256);\\n\\n  function oracleManagers(uint32) external view returns (address);\\n\\n  function latestMarket() external view returns (uint32);\\n\\n  function marketUpdateIndex(uint32) external view returns (uint256);\\n\\n  function batched_amountPaymentToken_deposit(uint32, bool) external view returns (uint256);\\n\\n  function batched_amountSyntheticToken_redeem(uint32, bool) external view returns (uint256);\\n\\n  function batched_amountSyntheticToken_toShiftAwayFrom_marketSide(uint32, bool)\\n    external\\n    view\\n    returns (uint256);\\n\\n  function get_syntheticToken_priceSnapshot(uint32, uint256)\\n    external\\n    view\\n    returns (uint256, uint256);\\n\\n  function get_syntheticToken_priceSnapshot_side(\\n    uint32,\\n    bool,\\n    uint256\\n  ) external view returns (uint256);\\n\\n  function marketSideValueInPaymentToken(uint32 marketIndex)\\n    external\\n    view\\n    returns (uint128 marketSideValueInPaymentTokenLong, uint128 marketSideValueInPaymentTokenShort);\\n\\n  function setUserTradeTimer(\\n    address user,\\n    uint32 marketIndex,\\n    bool isLong\\n  ) external;\\n\\n  function checkIfUserIsEligibleToTrade(\\n    address user,\\n    uint32 marketIndex,\\n    bool isLong\\n  ) external;\\n\\n  function checkIfUserIsEligibleToSendSynth(\\n    address user,\\n    uint32 marketIndex,\\n    bool isLong\\n  ) external;\\n\\n  function updateSystemState(uint32 marketIndex) external;\\n\\n  function updateSystemStateMulti(uint32[] calldata marketIndex) external;\\n\\n  function getUsersConfirmedButNotSettledSynthBalance(\\n    address user,\\n    uint32 marketIndex,\\n    bool isLong\\n  ) external view returns (uint256 confirmedButNotSettledBalance);\\n\\n  function executeOutstandingNextPriceSettlementsUser(address user, uint32 marketIndex) external;\\n\\n  function shiftPositionNextPrice(\\n    uint32 marketIndex,\\n    uint256 amountSyntheticTokensToShift,\\n    bool isShiftFromLong\\n  ) external;\\n\\n  function shiftPositionFromLongNextPrice(uint32 marketIndex, uint256 amountSyntheticTokensToShift)\\n    external;\\n\\n  function shiftPositionFromShortNextPrice(uint32 marketIndex, uint256 amountSyntheticTokensToShift)\\n    external;\\n\\n  function getAmountSyntheticTokenToMintOnTargetSide(\\n    uint32 marketIndex,\\n    uint256 amountSyntheticTokenShiftedFromOneSide,\\n    bool isShiftFromLong,\\n    uint256 priceSnapshotIndex\\n  ) external view returns (uint256 amountSynthShiftedToOtherSide);\\n\\n  function mintLongNextPrice(uint32 marketIndex, uint256 amount) external;\\n\\n  function mintShortNextPrice(uint32 marketIndex, uint256 amount) external;\\n\\n  function mintAndStakeNextPrice(\\n    uint32 marketIndex,\\n    uint256 amount,\\n    bool isLong\\n  ) external;\\n\\n  function redeemLongNextPrice(uint32 marketIndex, uint256 amount) external;\\n\\n  function redeemShortNextPrice(uint32 marketIndex, uint256 amount) external;\\n}\\n\",\"keccak256\":\"0xc618e0a8ddb4d47ca88d682b8d1f17b01fe540b853c8a15919d4953433384379\",\"license\":\"BUSL-1.1\"},\"contracts/interfaces/IOracleManager.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\n\\npragma solidity 0.8.10;\\n\\n/*\\n * Manages price feeds from different oracle implementations.\\n */\\ninterface IOracleManager {\\n  function updatePrice() external returns (int256);\\n\\n  /*\\n   *Returns the latest price from the oracle feed.\\n   */\\n  function getLatestPrice() external view returns (int256);\\n}\\n\",\"keccak256\":\"0xb63c1794b7f637c55b84fbcbf80f15ef52d913a936fe8478b16b56c2dd5c4213\",\"license\":\"BUSL-1.1\"},\"contracts/interfaces/IStaker.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\n\\npragma solidity 0.8.10;\\n\\ninterface IStaker {\\n  /*\\u2554\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2557\\n    \\u2551           EVENTS           \\u2551\\n    \\u255a\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u255d*/\\n\\n  event Upgrade(uint256 version);\\n\\n  event StakerV1(\\n    address admin,\\n    address floatTreasury,\\n    address floatCapital,\\n    address floatToken,\\n    uint256 floatPercentage\\n  );\\n\\n  event MarketAddedToStaker(\\n    uint32 marketIndex,\\n    uint256 exitFee_e18,\\n    uint256 period,\\n    uint256 multiplier,\\n    uint256 balanceIncentiveExponent,\\n    int256 balanceIncentiveEquilibriumOffset,\\n    uint256 safeExponentBitShifting\\n  );\\n\\n  event AccumulativeIssuancePerStakedSynthSnapshotCreated(\\n    uint32 marketIndex,\\n    uint256 accumulativeFloatIssuanceSnapshotIndex,\\n    uint256 accumulativeLong,\\n    uint256 accumulativeShort\\n  );\\n\\n  event StakeAdded(address user, address token, uint256 amount, uint256 lastMintIndex);\\n\\n  event StakeWithdrawn(address user, address token, uint256 amount);\\n\\n  event StakeWithdrawnWithFees(address user, address token, uint256 amount, uint256 amountFees);\\n\\n  // Note: the `amountFloatMinted` isn't strictly needed by the graph, but it is good to add it to validate calculations are accurate.\\n  event FloatMinted(address user, uint32 marketIndex, uint256 amountFloatMinted);\\n\\n  event MarketLaunchIncentiveParametersChanges(\\n    uint32 marketIndex,\\n    uint256 period,\\n    uint256 multiplier\\n  );\\n\\n  event StakeWithdrawalFeeUpdated(uint32 marketIndex, uint256 stakeWithdralFee);\\n\\n  event BalanceIncentiveParamsUpdated(\\n    uint32 marketIndex,\\n    uint256 balanceIncentiveExponent,\\n    int256 balanceIncentiveCurve_equilibriumOffset,\\n    uint256 safeExponentBitShifting\\n  );\\n\\n  event FloatPercentageUpdated(uint256 floatPercentage);\\n\\n  event NextPriceStakeShift(\\n    address user,\\n    uint32 marketIndex,\\n    uint256 amount,\\n    bool isShiftFromLong,\\n    uint256 userShiftIndex\\n  );\\n\\n  function userAmountStaked(address, address) external view returns (uint256);\\n\\n  function addNewStakingFund(\\n    uint32 marketIndex,\\n    address longTokenAddress,\\n    address shortTokenAddress,\\n    uint256 kInitialMultiplier,\\n    uint256 kPeriod,\\n    uint256 unstakeFee_e18,\\n    uint256 _balanceIncentiveCurve_exponent,\\n    int256 _balanceIncentiveCurve_equilibriumOffset\\n  ) external;\\n\\n  function pushUpdatedMarketPricesToUpdateFloatIssuanceCalculations(\\n    uint32 marketIndex,\\n    uint256 marketUpdateIndex,\\n    uint256 longTokenPrice,\\n    uint256 shortTokenPrice,\\n    uint256 longValue,\\n    uint256 shortValue\\n  ) external;\\n\\n  function stakeFromUser(address from, uint256 amount) external;\\n\\n  function shiftTokens(\\n    uint256 amountSyntheticTokensToShift,\\n    uint32 marketIndex,\\n    bool isShiftFromLong\\n  ) external;\\n\\n  function latestRewardIndex(uint32 marketIndex) external view returns (uint256);\\n\\n  // TODO: couldn't get this to work!\\n  function safe_getUpdateTimestamp(uint32 marketIndex, uint256 latestUpdateIndex)\\n    external\\n    view\\n    returns (uint256);\\n\\n  function mintAndStakeNextPrice(\\n    uint32 marketIndex,\\n    uint256 amount,\\n    bool isLong,\\n    address user\\n  ) external;\\n}\\n\",\"keccak256\":\"0xc77696e3a26ba35c579bb12750a746531be86d7e2205be40acbc9a0f79113c85\",\"license\":\"BUSL-1.1\"},\"contracts/interfaces/ISyntheticToken.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\n\\npragma solidity 0.8.10;\\n\\n/**\\n@title SyntheticToken\\n@notice An ERC20 token that tracks or inversely tracks the price of an\\n        underlying asset with floating exposure.\\n*/\\ninterface ISyntheticToken {\\n  // function MINTER_ROLE() external returns (bytes32);\\n\\n  /// @notice Allows users to stake their synthetic tokens to earn Float.\\n  function stake(uint256) external;\\n\\n  function mint(address, uint256) external;\\n\\n  function totalSupply() external returns (uint256);\\n\\n  function transferFrom(\\n    address,\\n    address,\\n    uint256\\n  ) external returns (bool);\\n\\n  function transfer(address, uint256) external returns (bool);\\n\\n  function burn(uint256 amount) external;\\n}\\n\",\"keccak256\":\"0x69c047a5774ac152e4d7d206ad382ee0751710eaf14650bcc4e1c58ff00ac669\",\"license\":\"BUSL-1.1\"},\"contracts/interfaces/ITokenFactory.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\n\\npragma solidity 0.8.10;\\n\\ninterface ITokenFactory {\\n  function createSyntheticToken(\\n    string calldata syntheticName,\\n    string calldata syntheticSymbol,\\n    address staker,\\n    uint32 marketIndex,\\n    bool isLong\\n  ) external returns (address);\\n}\\n\",\"keccak256\":\"0xd606cb8988c8595573074f607f199fd2b0ac1866e3ae62dd64d3bafd6bd7bea5\",\"license\":\"BUSL-1.1\"},\"contracts/interfaces/IYieldManager.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\n\\npragma solidity 0.8.10;\\n\\n/// @notice Manages yield accumulation for the LongShort contract. Each market is deployed with its own yield manager to simplify the bookkeeping, as different markets may share a payment token and yield pool.\\nabstract contract IYieldManager {\\n  event ClaimAaveRewardTokenToTreasury(uint256 amount);\\n\\n  event YieldDistributed(uint256 unrealizedYield, uint256 treasuryYieldPercent_e18);\\n\\n  /// @dev This is purely saving some gas, but the subgraph will know how much is due for the treasury at all times - no need to include in event.\\n  event WithdrawTreasuryFunds();\\n\\n  /// @notice distributed yield not yet transferred to the treasury\\n  function totalReservedForTreasury() external virtual returns (uint256);\\n\\n  /// @notice Deposits the given amount of payment tokens into this yield manager.\\n  /// @param amount Amount of payment token to deposit\\n  function depositPaymentToken(uint256 amount) external virtual;\\n\\n  /// @notice Allows the LongShort pay out a user from tokens already withdrawn from Aave\\n  /// @param user User to recieve the payout\\n  /// @param amount Amount of payment token to pay to user\\n  function transferPaymentTokensToUser(address user, uint256 amount) external virtual;\\n\\n  /// @notice Withdraws the given amount of tokens from this yield manager.\\n  /// @param amount Amount of payment token to withdraw\\n  function removePaymentTokenFromMarket(uint256 amount) external virtual;\\n\\n  /**    \\n    @notice Calculates and updates the yield allocation to the treasury and the market\\n    @dev treasuryPercent = 1 - marketPercent\\n    @param totalValueRealizedForMarket total value of long and short side of the market\\n    @param treasuryYieldPercent_e18 Percentage of yield in base 1e18 that is allocated to the treasury\\n    @return amountForMarketIncentives The market allocation of the yield\\n  */\\n  function distributeYieldForTreasuryAndReturnMarketAllocation(\\n    uint256 totalValueRealizedForMarket,\\n    uint256 treasuryYieldPercent_e18\\n  ) external virtual returns (uint256 amountForMarketIncentives);\\n\\n  /// @notice Withdraw treasury allocated accrued yield from the lending pool to the treasury contract\\n  function withdrawTreasuryFunds() external virtual;\\n\\n  /// @notice Initializes a specific yield manager to a given market\\n  function initializeForMarket() external virtual;\\n}\\n\",\"keccak256\":\"0xb836263ae5ea3f780f0aaf5002d86122c6ba64efde7abfd16b2959d55e0463bd\",\"license\":\"BUSL-1.1\"},\"contracts/longShort/LongShortPolygon.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\n\\npragma solidity 0.8.10;\\n\\nimport \\\"./template/LongShort.sol\\\";\\n\\ncontract LongShortPolygon is LongShort {\\n  /// @dev This contract uses legacy data.\\n  function HAS_LEGACY_DATA() internal pure override returns (bool) {\\n    return true;\\n  }\\n\\n  /// @dev This is the amount of time users need to wait between trades.\\n  function CONTRACT_SLOW_TRADE_TIME() internal pure override returns (uint256) {\\n    return 2 hours;\\n  }\\n\\n  // auto initialize implementation\\n  constructor() initializer {}\\n}\\n\",\"keccak256\":\"0x989357da6b2549b1672fd07d011273fe2cb49f3537f95099d29fa05db28f22d8\",\"license\":\"BUSL-1.1\"},\"contracts/longShort/template/LongShort.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\n\\npragma solidity 0.8.10;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/math/Math.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/math/SafeCast.sol\\\";\\n\\nimport \\\"../../interfaces/ITokenFactory.sol\\\";\\nimport \\\"../../interfaces/ISyntheticToken.sol\\\";\\nimport \\\"../../interfaces/IStaker.sol\\\";\\nimport \\\"../../interfaces/ILongShort.sol\\\";\\nimport \\\"../../interfaces/IYieldManager.sol\\\";\\nimport \\\"../../interfaces/IOracleManager.sol\\\";\\nimport \\\"../../abstract/AccessControlledAndUpgradeable.sol\\\";\\nimport \\\"../../GEMS.sol\\\";\\n\\n/**\\n **** visit https://float.capital *****\\n */\\n\\n/// @title Core logic of Float Protocal markets\\n/// @author float.capital\\n/// @notice visit https://float.capital for more info\\n/// @dev All functions in this file are currently `virtual`. This is NOT to encourage inheritance.\\n/// It is merely for convenince when unit testing.\\n/// @custom:auditors This contract balances long and short sides.\\ncontract LongShort is ILongShort, AccessControlledAndUpgradeable {\\n  //Using Open Zeppelin safe transfer library for token transfers\\n  using SafeERC20 for IERC20;\\n\\n  /*\\u2554\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2557\\n    \\u2551          VARIABLES          \\u2551\\n    \\u255a\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u255d*/\\n\\n  /* \\u2550\\u2550\\u2550\\u2550\\u2550\\u2550 Fixed-precision constants \\u2550\\u2550\\u2550\\u2550\\u2550\\u2550 */\\n  /// @notice this is the address that permanently locked initial liquidity for markets is held by.\\n  /// These tokens will never move so market can never have zero liquidity on a side.\\n  /// @dev f10a7 spells float in hex - for fun - important part is that the private key for this address in not known.\\n  address private constant PERMANENT_INITIAL_LIQUIDITY_HOLDER =\\n    0xf10A7_F10A7_f10A7_F10a7_F10A7_f10a7_F10A7_f10a7;\\n\\n  uint256 private constant SECONDS_IN_A_YEAR_e18 = 315576e20;\\n\\n  /// @dev an empty allocation of storage for use in future upgrades - inspiration from OZ:\\n  ///      https://github.com/OpenZeppelin/openzeppelin-contracts-upgradeable/blob/10f0f1a95b1b0fd5520351886bae7a03490f1056/contracts/token/ERC20/ERC20Upgradeable.sol#L361\\n  uint256[45] private __constantsGap;\\n\\n  /* \\u2550\\u2550\\u2550\\u2550\\u2550\\u2550 Global state \\u2550\\u2550\\u2550\\u2550\\u2550\\u2550 */\\n  uint32 public override latestMarket;\\n\\n  address public staker;\\n  address public tokenFactory;\\n  address public gems;\\n\\n  uint256[45] private __globalStateGap;\\n\\n  /* \\u2550\\u2550\\u2550\\u2550\\u2550\\u2550 Market specific \\u2550\\u2550\\u2550\\u2550\\u2550\\u2550 */\\n  mapping(uint32 => bool) public marketExists;\\n\\n  mapping(uint32 => int256) public override assetPrice;\\n  mapping(uint32 => uint256) public override marketUpdateIndex;\\n  mapping(uint32 => uint256) public marketTreasurySplitGradient_e18;\\n  mapping(uint32 => uint256) public marketLeverage_e18;\\n\\n  mapping(uint32 => address) public paymentTokens;\\n  mapping(uint32 => address) public yieldManagers;\\n  mapping(uint32 => address) public override oracleManagers;\\n\\n  mapping(uint32 => uint256) public fundingRateMultiplier_e18;\\n\\n  uint256[44] private __marketStateGap;\\n\\n  /* \\u2550\\u2550\\u2550\\u2550\\u2550\\u2550 Market + position (long/short) specific \\u2550\\u2550\\u2550\\u2550\\u2550\\u2550 */\\n  mapping(uint32 => mapping(bool => address)) public override syntheticTokens;\\n\\n  mapping(uint32 => mapping(bool => uint256)) public marketSideValueInPaymentTokenLEGACY;\\n\\n  /// @notice synthetic token prices of a given market of a (long/short) at every previous price update\\n  mapping(uint32 => mapping(bool => mapping(uint256 => uint256)))\\n    public syntheticToken_priceSnapshotLEGACY;\\n\\n  mapping(uint32 => mapping(bool => uint256)) public override batched_amountPaymentToken_deposit;\\n  mapping(uint32 => mapping(bool => uint256)) public override batched_amountSyntheticToken_redeem;\\n  mapping(uint32 => mapping(bool => uint256))\\n    public\\n    override batched_amountSyntheticToken_toShiftAwayFrom_marketSide;\\n\\n  struct MarketSideValueInPaymentToken {\\n    // this has a maximum size of `2^128=3.4028237e+38` units of payment token which is amply sufficient for our markets\\n    uint128 value_long;\\n    uint128 value_short;\\n  }\\n  mapping(uint32 => MarketSideValueInPaymentToken) public override marketSideValueInPaymentToken;\\n\\n  struct SynthPriceInPaymentToken {\\n    // this has a maximum size of `2^128=3.4028237e+38` units of payment token which is amply sufficient for our markets\\n    uint128 price_long;\\n    uint128 price_short;\\n  }\\n  mapping(uint32 => mapping(uint256 => SynthPriceInPaymentToken))\\n    public syntheticToken_priceSnapshot;\\n\\n  uint256[43] private __marketPositonStateGap;\\n\\n  /* \\u2550\\u2550\\u2550\\u2550\\u2550\\u2550 User specific \\u2550\\u2550\\u2550\\u2550\\u2550\\u2550 */\\n  mapping(uint32 => mapping(address => uint256)) public userNextPrice_currentUpdateIndex;\\n\\n  mapping(uint32 => mapping(bool => mapping(address => uint256)))\\n    public userNextPrice_paymentToken_depositAmount;\\n  mapping(uint32 => mapping(bool => mapping(address => uint256)))\\n    public userNextPrice_syntheticToken_redeemAmount;\\n  mapping(uint32 => mapping(bool => mapping(address => uint256)))\\n    public userNextPrice_syntheticToken_toShiftAwayFrom_marketSide;\\n\\n  /* \\u2550\\u2550\\u2550\\u2550\\u2550\\u2550 trade time restriction logic  \\u2550\\u2550\\u2550\\u2550\\u2550\\u2550 */\\n  struct UserInteractionInfo {\\n    uint32 timestamp;\\n    uint224 effectiveAmountMinted; // TODO: set this in all the functions that do anything with the timestamp.\\n  }\\n  mapping(uint32 => mapping(bool => mapping(address => UserInteractionInfo)))\\n    public userLastInteractionTimestamp;\\n\\n  /*\\u2554\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2557\\n    \\u2551          MODIFIERS          \\u2551\\n    \\u255a\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u255d*/\\n\\n  // This is used for testing (as opposed to onlyRole)\\n  function adminOnlyModifierLogic() internal virtual {\\n    _checkRole(ADMIN_ROLE, msg.sender);\\n  }\\n\\n  modifier adminOnly() {\\n    adminOnlyModifierLogic();\\n    _;\\n  }\\n  modifier stakerOnly() {\\n    require(msg.sender == staker, \\\"staker only\\\");\\n    _;\\n  }\\n\\n  modifier onlyValidSynthetic(uint32 marketIndex, bool isLong) {\\n    require(syntheticTokens[marketIndex][isLong] == msg.sender, \\\"not valid synth\\\");\\n    _;\\n  }\\n\\n  function requireMarketExistsModifierLogic(uint32 marketIndex) internal view virtual {\\n    require(marketExists[marketIndex], \\\"market doesn't exist\\\");\\n  }\\n\\n  modifier requireMarketExists(uint32 marketIndex) {\\n    requireMarketExistsModifierLogic(marketIndex);\\n    _;\\n  }\\n\\n  modifier updateSystemStateMarketAndExecuteOutstandingNextPriceSettlements(\\n    address user,\\n    uint32 marketIndex\\n  ) {\\n    _updateSystemStateInternal(marketIndex);\\n    _executeOutstandingNextPriceSettlements(user, marketIndex);\\n    _;\\n  }\\n\\n  function gemCollectingModifierLogic() internal virtual {\\n    if (msg.sender != staker) {\\n      GEMS(gems).gm(msg.sender);\\n    }\\n  }\\n\\n  modifier gemCollecting() {\\n    gemCollectingModifierLogic();\\n    _;\\n  }\\n\\n  /*\\u2554\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2557\\n    \\u2551          NETWORK SPECIFIC CONFIG FUNCTIONS          \\u2551\\n    \\u255a\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u255d*/\\n\\n  /// @dev This contract uses legacy data.\\n  function HAS_LEGACY_DATA() internal pure virtual returns (bool) {\\n    return true;\\n  }\\n\\n  /// @dev This is the amount of time users need to wait between trades.\\n  function CONTRACT_SLOW_TRADE_TIME() internal pure virtual returns (uint256) {\\n    return 0;\\n  }\\n\\n  /*\\u2554\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2557\\n    \\u2551       CONTRACT SET-UP       \\u2551\\n    \\u255a\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u255d*/\\n\\n  /// @notice Initializes the contract.\\n  /// @dev Calls OpenZeppelin's initializer modifier.\\n  /// @param _admin Address of the admin role.\\n  /// @param _tokenFactory Address of the contract which creates synthetic asset tokens.\\n  /// @param _staker Address of the contract which handles synthetic asset stakes.\\n  function initialize(\\n    address _admin,\\n    address _tokenFactory,\\n    address _staker,\\n    address _gems\\n  ) public virtual {\\n    require(\\n      _admin != address(0) &&\\n        _tokenFactory != address(0) &&\\n        _staker != address(0) &&\\n        _gems != address(0)\\n    );\\n    // The below function ensures that this contract can't be re-initialized!\\n    _AccessControlledAndUpgradeable_init(_admin);\\n    tokenFactory = _tokenFactory;\\n    staker = _staker;\\n    gems = _gems;\\n\\n    emit LongShortV1(_admin, _tokenFactory, _staker);\\n  }\\n\\n  /*\\u2554\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2557\\n    \\u2551       Trade Velocity Helpers       \\u2551\\n    \\u255a\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u255d*/\\n\\n  // sets the users timer when minting anything\\n  function _setUserTradeTimer(uint32 marketIndex, bool isLong) internal {\\n    // Could use `SafeCast.toUint32` from open Zeppelin also.\\n    userLastInteractionTimestamp[marketIndex][isLong][msg.sender].timestamp = uint32(\\n      block.timestamp\\n    );\\n  }\\n\\n  function setUserTradeTimer(\\n    address user,\\n    uint32 marketIndex,\\n    bool isLong\\n  ) external stakerOnly {\\n    // Could use `SafeCast.toUint32` from open Zeppelin also.\\n    userLastInteractionTimestamp[marketIndex][isLong][user].timestamp = uint32(block.timestamp);\\n  }\\n\\n  // updates if 20000 seconds have passed and user is clear.\\n  function _checkIfUserIsEligibleToTrade(\\n    address user,\\n    uint32 marketIndex,\\n    bool isLong\\n  ) internal {\\n    // when this function is upgraded to update, we can rename it to `_getAndUpdateTradeFees` and likely we'll include the trade amount as an argument.\\n    uint256 lastInteractionTimestamp = uint256(\\n      userLastInteractionTimestamp[marketIndex][isLong][user].timestamp\\n    );\\n    require(\\n      ((block.timestamp - lastInteractionTimestamp) >= CONTRACT_SLOW_TRADE_TIME()),\\n      \\\"Rapid trading disabled, under wait period\\\"\\n    );\\n  }\\n\\n  // updates if 20000 seconds have passed and user is clear.\\n  function checkIfUserIsEligibleToTrade(\\n    address user,\\n    uint32 marketIndex,\\n    bool isLong\\n  ) external stakerOnly {\\n    _checkIfUserIsEligibleToTrade(user, marketIndex, isLong);\\n  }\\n\\n  // updates if 20000 seconds have passed and user is clear.\\n  function checkIfUserIsEligibleToSendSynth(\\n    address user,\\n    uint32 marketIndex,\\n    bool isLong\\n  ) external onlyValidSynthetic(marketIndex, isLong) {\\n    _checkIfUserIsEligibleToTrade(user, marketIndex, isLong);\\n  }\\n\\n  /*\\u2554\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2557\\n    \\u2551       ADMIN       \\u2551\\n    \\u255a\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u255d*/\\n\\n  /// @notice Update oracle for a market\\n  /// @dev Can only be called by the current admin.\\n  /// @param marketIndex An uint32 which uniquely identifies a market.\\n  /// @param _newOracleManager Address of the replacement oracle manager.\\n  function updateMarketOracle(uint32 marketIndex, address _newOracleManager) external adminOnly {\\n    // If not a oracle contract this would break things.. Test's arn't validating this\\n    // Ie require isOracle interface - ERC165\\n    address previousOracleManager = oracleManagers[marketIndex];\\n    oracleManagers[marketIndex] = _newOracleManager;\\n    emit OracleUpdated(marketIndex, previousOracleManager, _newOracleManager);\\n  }\\n\\n  /// @notice changes the gradient of the line for determining the yield split between market and treasury.\\n  function changeMarketTreasurySplitGradient(\\n    uint32 marketIndex,\\n    uint256 _marketTreasurySplitGradient_e18\\n  ) external adminOnly {\\n    marketTreasurySplitGradient_e18[marketIndex] = _marketTreasurySplitGradient_e18;\\n  }\\n\\n  function changeMarketFundingRateMultiplier(uint32 marketIndex, uint256 _fundingRateMultiplier_e18)\\n    external\\n    adminOnly\\n  {\\n    require(_fundingRateMultiplier_e18 <= 5e19, \\\"not in range: funding rate <= 5000%\\\");\\n    fundingRateMultiplier_e18[marketIndex] = _fundingRateMultiplier_e18;\\n    emit MarketFundingRateMultiplerChanged(marketIndex, _fundingRateMultiplier_e18);\\n  }\\n\\n  /*\\u2554\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2557\\n    \\u2551       MARKET CREATION       \\u2551\\n    \\u255a\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u255d*/\\n\\n  /// @notice Creates an entirely new long/short market tracking an underlying oracle price.\\n  ///  Make sure the synthetic names/symbols are unique.\\n  /// @dev This does not make the market active.\\n  /// The `initializeMarket` function was split out separately to this function to reduce costs.\\n  /// @param syntheticName Name of the synthetic asset\\n  /// @param syntheticSymbol Symbol for the synthetic asset\\n  /// @param _paymentToken The address of the erc20 token used to buy this synthetic asset\\n  /// this will likely always be DAI\\n  /// @param _oracleManager The address of the oracle manager that provides the price feed for this market\\n  /// @param _yieldManager The contract that manages depositing the paymentToken into a yield bearing protocol\\n  function createNewSyntheticMarket(\\n    string calldata syntheticName,\\n    string calldata syntheticSymbol,\\n    address _paymentToken,\\n    address _oracleManager,\\n    address _yieldManager\\n  ) external adminOnly {\\n    require(\\n      _paymentToken != address(0) && _oracleManager != address(0) && _yieldManager != address(0)\\n    );\\n\\n    uint32 marketIndex = ++latestMarket;\\n    address _staker = staker;\\n\\n    // Ensure new markets don't use the same yield manager\\n    IYieldManager(_yieldManager).initializeForMarket();\\n\\n    // Create new synthetic long token.\\n    syntheticTokens[marketIndex][true] = ITokenFactory(tokenFactory).createSyntheticToken(\\n      string(abi.encodePacked(\\\"Float Long \\\", syntheticName)),\\n      string(abi.encodePacked(\\\"fl\\\", syntheticSymbol)),\\n      _staker,\\n      marketIndex,\\n      true\\n    );\\n\\n    // Create new synthetic short token.\\n    syntheticTokens[marketIndex][false] = ITokenFactory(tokenFactory).createSyntheticToken(\\n      string(abi.encodePacked(\\\"Float Short \\\", syntheticName)),\\n      string(abi.encodePacked(\\\"fs\\\", syntheticSymbol)),\\n      _staker,\\n      marketIndex,\\n      false\\n    );\\n\\n    // Initial market state.\\n    paymentTokens[marketIndex] = _paymentToken;\\n    yieldManagers[marketIndex] = _yieldManager;\\n    oracleManagers[marketIndex] = _oracleManager;\\n    assetPrice[marketIndex] = IOracleManager(oracleManagers[marketIndex]).updatePrice();\\n\\n    emit SyntheticMarketCreated(\\n      marketIndex,\\n      syntheticTokens[marketIndex][true],\\n      syntheticTokens[marketIndex][false],\\n      _paymentToken,\\n      assetPrice[marketIndex],\\n      syntheticName,\\n      syntheticSymbol,\\n      _oracleManager,\\n      _yieldManager\\n    );\\n  }\\n\\n  /// @notice Creates an entirely new long/short market tracking an underlying oracle price.\\n  ///  Uses already created synthetic tokens.\\n  /// @dev This does not make the market active.\\n  /// The `initializeMarket` function was split out separately to this function to reduce costs.\\n  /// @param syntheticName Name of the synthetic asset\\n  /// @param syntheticSymbol Symbol for the synthetic asset\\n  /// @param _longToken Address for the long token.\\n  /// @param _shortToken Address for the short token.\\n  /// @param _paymentToken The address of the erc20 token used to buy this synthetic asset\\n  /// this will likely always be DAI\\n  /// @param _oracleManager The address of the oracle manager that provides the price feed for this market\\n  /// @param _yieldManager The contract that manages depositing the paymentToken into a yield bearing protocol\\n  function createNewSyntheticMarketExternalSyntheticTokens(\\n    string calldata syntheticName,\\n    string calldata syntheticSymbol,\\n    address _longToken,\\n    address _shortToken,\\n    address _paymentToken,\\n    address _oracleManager,\\n    address _yieldManager\\n  ) external adminOnly {\\n    uint32 marketIndex = ++latestMarket;\\n\\n    // Ensure new markets don't use the same yield manager\\n    IYieldManager(_yieldManager).initializeForMarket();\\n\\n    // Assign new synthetic long token.\\n    syntheticTokens[marketIndex][true] = _longToken;\\n\\n    // Assign new synthetic short token.\\n    syntheticTokens[marketIndex][false] = _shortToken;\\n\\n    // Initial market state.\\n    paymentTokens[marketIndex] = _paymentToken;\\n    yieldManagers[marketIndex] = _yieldManager;\\n    oracleManagers[marketIndex] = _oracleManager;\\n    assetPrice[marketIndex] = IOracleManager(oracleManagers[marketIndex]).updatePrice();\\n\\n    emit SyntheticMarketCreated(\\n      marketIndex,\\n      _longToken,\\n      _shortToken,\\n      _paymentToken,\\n      assetPrice[marketIndex],\\n      syntheticName,\\n      syntheticSymbol,\\n      _oracleManager,\\n      _yieldManager\\n    );\\n  }\\n\\n  /// @notice Seeds a new market with initial capital.\\n  /// @dev Only called when initializing a market.\\n  /// @param initialMarketSeedForEachMarketSide Amount in wei for which to seed both sides of the market.\\n  /// @param marketIndex An uint32 which uniquely identifies a market.\\n  function _seedMarketInitially(uint256 initialMarketSeedForEachMarketSide, uint32 marketIndex)\\n    internal\\n    virtual\\n  {\\n    require(\\n      // You require at least 1e18 (1 payment token with 18 decimal places) of the underlying payment token to seed the market.\\n      initialMarketSeedForEachMarketSide >= 1e18,\\n      \\\"Insufficient market seed\\\"\\n    );\\n\\n    uint256 amountToLockInYieldManager = initialMarketSeedForEachMarketSide * 2;\\n    _transferPaymentTokensFromUserToYieldManager(marketIndex, amountToLockInYieldManager);\\n    IYieldManager(yieldManagers[marketIndex]).depositPaymentToken(amountToLockInYieldManager);\\n\\n    ISyntheticToken(syntheticTokens[marketIndex][true]).mint(\\n      PERMANENT_INITIAL_LIQUIDITY_HOLDER,\\n      initialMarketSeedForEachMarketSide\\n    );\\n    ISyntheticToken(syntheticTokens[marketIndex][false]).mint(\\n      PERMANENT_INITIAL_LIQUIDITY_HOLDER,\\n      initialMarketSeedForEachMarketSide\\n    );\\n\\n    marketSideValueInPaymentToken[marketIndex] = MarketSideValueInPaymentToken(\\n      SafeCast.toUint128(initialMarketSeedForEachMarketSide),\\n      SafeCast.toUint128(initialMarketSeedForEachMarketSide)\\n    );\\n  }\\n\\n  /// @notice Sets a market as active once it has already been setup by createNewSyntheticMarket.\\n  /// @dev Seperated from createNewSyntheticMarket due to gas considerations.\\n  /// @param marketIndex An int32 which uniquely identifies the market.\\n  /// @param kInitialMultiplier Linearly decreasing multiplier for Float token issuance for the market when staking synths.\\n  /// @param kPeriod Time which kInitialMultiplier will last\\n  /// @param unstakeFee_e18 Base 1e18 percentage fee levied when unstaking for the market.\\n  /// @param balanceIncentiveCurve_exponent Sets the degree to which Float token issuance differs\\n  /// for market sides in unbalanced markets. See Staker.sol\\n  /// @param balanceIncentiveCurve_equilibriumOffset An offset to account for naturally imbalanced markets\\n  /// when Float token issuance should differ for market sides. See Staker.sol\\n  /// @param initialMarketSeedForEachMarketSide Amount of payment token that will be deposited in each market side to seed the market.\\n  function initializeMarket(\\n    uint32 marketIndex,\\n    uint256 kInitialMultiplier,\\n    uint256 kPeriod,\\n    uint256 unstakeFee_e18,\\n    uint256 initialMarketSeedForEachMarketSide,\\n    uint256 balanceIncentiveCurve_exponent,\\n    int256 balanceIncentiveCurve_equilibriumOffset,\\n    uint256 _marketTreasurySplitGradient_e18,\\n    uint256 marketLeverage\\n  ) external adminOnly {\\n    require(\\n      kInitialMultiplier != 0 &&\\n        unstakeFee_e18 != 0 &&\\n        initialMarketSeedForEachMarketSide != 0 &&\\n        balanceIncentiveCurve_exponent != 0 &&\\n        _marketTreasurySplitGradient_e18 != 0\\n    );\\n\\n    require(!marketExists[marketIndex], \\\"already initialized\\\");\\n    require(marketIndex <= latestMarket, \\\"index too high\\\");\\n\\n    marketExists[marketIndex] = true;\\n\\n    marketTreasurySplitGradient_e18[marketIndex] = _marketTreasurySplitGradient_e18;\\n\\n    // Set this value to one initially - 0 is a null value and thus potentially bug prone.\\n    marketUpdateIndex[marketIndex] = 1;\\n\\n    _seedMarketInitially(initialMarketSeedForEachMarketSide, marketIndex);\\n\\n    require(marketLeverage <= 50e18 && marketLeverage >= 1e17, \\\"Incorrect leverage\\\");\\n    marketLeverage_e18[marketIndex] = marketLeverage;\\n\\n    // Add new staker funds with fresh synthetic tokens.\\n    IStaker(staker).addNewStakingFund(\\n      marketIndex,\\n      syntheticTokens[marketIndex][true],\\n      syntheticTokens[marketIndex][false],\\n      kInitialMultiplier,\\n      kPeriod,\\n      unstakeFee_e18,\\n      balanceIncentiveCurve_exponent,\\n      balanceIncentiveCurve_equilibriumOffset\\n    );\\n\\n    IStaker(staker).pushUpdatedMarketPricesToUpdateFloatIssuanceCalculations(\\n      marketIndex,\\n      1,\\n      1e18,\\n      1e18,\\n      initialMarketSeedForEachMarketSide,\\n      initialMarketSeedForEachMarketSide\\n    );\\n\\n    emit NewMarketLaunchedAndSeeded(\\n      marketIndex,\\n      initialMarketSeedForEachMarketSide,\\n      marketLeverage\\n    );\\n  }\\n\\n  /*\\u2554\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2557\\n    \\u2551       GETTER FUNCTIONS       \\u2551\\n    \\u255a\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u255d*/\\n\\n  /// @notice Calculates the conversion rate from synthetic tokens to payment tokens.\\n  /// @dev Synth tokens have a fixed 18 decimals.\\n  /// @param amountPaymentTokenBackingSynth Amount of payment tokens in that token's lowest denomination.\\n  /// @param amountSyntheticToken Amount of synth token in wei.\\n  /// @return syntheticTokenPrice The calculated conversion rate in base 1e18.\\n  function _getSyntheticTokenPrice(\\n    uint256 amountPaymentTokenBackingSynth,\\n    uint256 amountSyntheticToken\\n  ) internal pure virtual returns (uint256 syntheticTokenPrice) {\\n    return (amountPaymentTokenBackingSynth * 1e18) / amountSyntheticToken;\\n  }\\n\\n  /// @notice Converts synth token amounts to payment token amounts at a synth token price.\\n  /// @dev Price assumed base 1e18.\\n  /// @param amountSyntheticToken Amount of synth token in wei.\\n  /// @param syntheticTokenPriceInPaymentTokens The conversion rate from synth to payment tokens in base 1e18.\\n  /// @return amountPaymentToken The calculated amount of payment tokens in token's lowest denomination.\\n  function _getAmountPaymentToken(\\n    uint256 amountSyntheticToken,\\n    uint256 syntheticTokenPriceInPaymentTokens\\n  ) internal pure virtual returns (uint256 amountPaymentToken) {\\n    return (amountSyntheticToken * syntheticTokenPriceInPaymentTokens) / 1e18;\\n  }\\n\\n  /// @notice Converts payment token amounts to synth token amounts at a synth token price.\\n  /// @dev  Price assumed base 1e18.\\n  /// @param amountPaymentTokenBackingSynth Amount of payment tokens in that token's lowest denomination.\\n  /// @param syntheticTokenPriceInPaymentTokens The conversion rate from synth to payment tokens in base 1e18.\\n  /// @return amountSyntheticToken The calculated amount of synthetic token in wei.\\n  function _getAmountSyntheticToken(\\n    uint256 amountPaymentTokenBackingSynth,\\n    uint256 syntheticTokenPriceInPaymentTokens\\n  ) internal pure virtual returns (uint256 amountSyntheticToken) {\\n    return (amountPaymentTokenBackingSynth * 1e18) / syntheticTokenPriceInPaymentTokens;\\n  }\\n\\n  /**\\n  @notice Calculate the amount of target side synthetic tokens that are worth the same\\n          amount of payment tokens as X many synthetic tokens on origin side.\\n          The resulting equation comes from simplifying this function\\n\\n            _getAmountSyntheticToken(\\n              _getAmountPaymentToken(\\n                amountOriginSynth,\\n                priceOriginSynth\\n              ),\\n              priceTargetSynth)\\n\\n            Unpacking the function we get:\\n            ((amountOriginSynth * priceOriginSynth) / 1e18) * 1e18 / priceTargetSynth\\n              And simplifying this we get:\\n            (amountOriginSynth * priceOriginSynth) / priceTargetSynth\\n  @param amountSyntheticTokens_originSide Amount of synthetic tokens on origin side\\n  @param syntheticTokenPrice_originSide Price of origin side's synthetic token\\n  @param syntheticTokenPrice_targetSide Price of target side's synthetic token\\n  @return equivalentAmountSyntheticTokensOnTargetSide Amount of synthetic token on target side\\n  */\\n  function _getEquivalentAmountSyntheticTokensOnTargetSide(\\n    uint256 amountSyntheticTokens_originSide,\\n    uint256 syntheticTokenPrice_originSide,\\n    uint256 syntheticTokenPrice_targetSide\\n  ) internal pure virtual returns (uint256 equivalentAmountSyntheticTokensOnTargetSide) {\\n    equivalentAmountSyntheticTokensOnTargetSide =\\n      (amountSyntheticTokens_originSide * syntheticTokenPrice_originSide) /\\n      syntheticTokenPrice_targetSide;\\n  }\\n\\n  function get_syntheticToken_priceSnapshot(uint32 marketIndex, uint256 priceSnapshotIndex)\\n    public\\n    view\\n    override\\n    returns (uint256 priceLong, uint256 priceShort)\\n  {\\n    priceLong = uint256(syntheticToken_priceSnapshot[marketIndex][priceSnapshotIndex].price_long);\\n\\n    priceShort = uint256(syntheticToken_priceSnapshot[marketIndex][priceSnapshotIndex].price_short);\\n\\n    if (HAS_LEGACY_DATA()) {\\n      // In case price requested is part of legacy data-structure\\n      if (\\n        priceLong == 0 /* which means priceShort is also zero! */\\n      ) {\\n        priceLong = syntheticToken_priceSnapshotLEGACY[marketIndex][true][priceSnapshotIndex];\\n        priceShort = syntheticToken_priceSnapshotLEGACY[marketIndex][false][priceSnapshotIndex];\\n      }\\n    }\\n  }\\n\\n  function get_syntheticToken_priceSnapshot_side(\\n    uint32 marketIndex,\\n    bool isLong,\\n    uint256 priceSnapshotIndex\\n  ) public view override returns (uint256 price) {\\n    if (isLong) {\\n      price = uint256(syntheticToken_priceSnapshot[marketIndex][priceSnapshotIndex].price_long);\\n    } else {\\n      price = uint256(syntheticToken_priceSnapshot[marketIndex][priceSnapshotIndex].price_short);\\n    }\\n    if (HAS_LEGACY_DATA()) {\\n      // In case price requested is part of legacy data-structure\\n      if (price == 0) {\\n        price = syntheticToken_priceSnapshotLEGACY[marketIndex][isLong][priceSnapshotIndex];\\n      }\\n    }\\n  }\\n\\n  /// @notice Given an executed next price shift from tokens on one market side to the other,\\n  /// determines how many other side tokens the shift was worth.\\n  /// @dev Intended for use primarily by Staker.sol\\n  /// @param marketIndex An uint32 which uniquely identifies a market.\\n  /// @param amountSyntheticToken_redeemOnOriginSide Amount of synth token in wei.\\n  /// @param isShiftFromLong Whether the token shift is from long to short (true), or short to long (false).\\n  /// @param priceSnapshotIndex Index which identifies which synth prices to use.\\n  /// @return amountSyntheticTokensToMintOnTargetSide The amount in wei of tokens for the other side that the shift was worth.\\n  function getAmountSyntheticTokenToMintOnTargetSide(\\n    uint32 marketIndex,\\n    uint256 amountSyntheticToken_redeemOnOriginSide,\\n    bool isShiftFromLong,\\n    uint256 priceSnapshotIndex\\n  ) public view virtual override returns (uint256 amountSyntheticTokensToMintOnTargetSide) {\\n    uint256 syntheticTokenPriceOnOriginSide;\\n    uint256 syntheticTokenPriceOnTargetSide;\\n    if (isShiftFromLong) {\\n      (\\n        syntheticTokenPriceOnOriginSide,\\n        syntheticTokenPriceOnTargetSide\\n      ) = get_syntheticToken_priceSnapshot(marketIndex, priceSnapshotIndex);\\n    } else {\\n      (\\n        syntheticTokenPriceOnTargetSide,\\n        syntheticTokenPriceOnOriginSide\\n      ) = get_syntheticToken_priceSnapshot(marketIndex, priceSnapshotIndex);\\n    }\\n\\n    amountSyntheticTokensToMintOnTargetSide = _getEquivalentAmountSyntheticTokensOnTargetSide(\\n      amountSyntheticToken_redeemOnOriginSide,\\n      syntheticTokenPriceOnOriginSide,\\n      syntheticTokenPriceOnTargetSide\\n    );\\n  }\\n\\n  /**\\n  @notice The amount of a synth token a user is owed following a batch execution.\\n    4 possible states for next price actions:\\n        - \\\"Pending\\\" - means the next price update hasn't happened or been enacted on by the updateSystemState function.\\n        - \\\"Confirmed\\\" - means the next price has been updated by the updateSystemState function. There is still\\n        -               outstanding (lazy) computation that needs to be executed per user in the batch.\\n        - \\\"Settled\\\" - there is no more computation left for the user.\\n        - \\\"Non-existent\\\" - user has no next price actions.\\n    This function returns a calculated value only in the case of 'confirmed' next price actions.\\n    It should return zero for all other types of next price actions.\\n  @dev Used in SyntheticToken.sol balanceOf to allow for automatic reflection of next price actions.\\n  @param user The address of the user for whom to execute the function for.\\n  @param marketIndex An uint32 which uniquely identifies a market.\\n  @param isLong Whether it is for the long synthetic asset or the short synthetic asset.\\n  @return confirmedButNotSettledBalance The amount in wei of tokens that the user is owed.\\n  */\\n  function getUsersConfirmedButNotSettledSynthBalance(\\n    address user,\\n    uint32 marketIndex,\\n    bool isLong\\n  )\\n    external\\n    view\\n    virtual\\n    override\\n    requireMarketExists(marketIndex)\\n    returns (uint256 confirmedButNotSettledBalance)\\n  {\\n    uint256 currentMarketUpdateIndex = marketUpdateIndex[marketIndex];\\n    uint256 userNextPrice_currentUpdateIndex_forMarket = userNextPrice_currentUpdateIndex[\\n      marketIndex\\n    ][user];\\n    if (\\n      userNextPrice_currentUpdateIndex_forMarket != 0 &&\\n      userNextPrice_currentUpdateIndex_forMarket <= currentMarketUpdateIndex\\n    ) {\\n      uint256 amountPaymentTokenDeposited = userNextPrice_paymentToken_depositAmount[marketIndex][\\n        isLong\\n      ][user];\\n\\n      uint256 syntheticTokenPrice;\\n      uint256 syntheticTokenPriceOnOriginSideOfShift;\\n\\n      if (isLong) {\\n        (\\n          syntheticTokenPrice,\\n          syntheticTokenPriceOnOriginSideOfShift\\n        ) = get_syntheticToken_priceSnapshot(\\n          marketIndex,\\n          userNextPrice_currentUpdateIndex_forMarket\\n        );\\n      } else {\\n        (\\n          syntheticTokenPriceOnOriginSideOfShift,\\n          syntheticTokenPrice\\n        ) = get_syntheticToken_priceSnapshot(\\n          marketIndex,\\n          userNextPrice_currentUpdateIndex_forMarket\\n        );\\n      }\\n\\n      if (amountPaymentTokenDeposited > 0) {\\n        confirmedButNotSettledBalance = _getAmountSyntheticToken(\\n          amountPaymentTokenDeposited,\\n          syntheticTokenPrice\\n        );\\n      }\\n\\n      uint256 amountSyntheticTokensToBeShiftedAwayFromOriginSide = userNextPrice_syntheticToken_toShiftAwayFrom_marketSide[\\n          marketIndex\\n        ][!isLong][user];\\n\\n      if (amountSyntheticTokensToBeShiftedAwayFromOriginSide > 0) {\\n        confirmedButNotSettledBalance += _getEquivalentAmountSyntheticTokensOnTargetSide(\\n          amountSyntheticTokensToBeShiftedAwayFromOriginSide,\\n          syntheticTokenPriceOnOriginSideOfShift,\\n          syntheticTokenPrice\\n        );\\n      }\\n    }\\n  }\\n\\n  /**\\n   @notice Calculates the percentage in base 1e18 of how much of the accrued yield\\n   for a market should be allocated to treasury.\\n   @dev For gas considerations also returns whether the long side is imbalanced.\\n   @dev For gas considerations totalValueLockedInMarket is passed as a parameter as the function\\n   calling this function has pre calculated the value\\n   @param longValue The current total payment token value of the long side of the market.\\n   @param shortValue The current total payment token value of the short side of the market.\\n   @param totalValueLockedInMarket Total payment token value of both sides of the market.\\n   @return isLongSideUnderbalanced Whether the long side initially had less value than the short side.\\n   @return treasuryYieldPercent_e18 The percentage in base 1e18 of how much of the accrued yield\\n   for a market should be allocated to treasury.\\n   */\\n  function _getYieldSplit(\\n    uint32 marketIndex,\\n    uint256 longValue,\\n    uint256 shortValue,\\n    uint256 totalValueLockedInMarket\\n  ) internal view virtual returns (bool isLongSideUnderbalanced, uint256 treasuryYieldPercent_e18) {\\n    isLongSideUnderbalanced = longValue < shortValue;\\n    uint256 imbalance;\\n\\n    unchecked {\\n      if (isLongSideUnderbalanced) {\\n        imbalance = shortValue - longValue;\\n      } else {\\n        imbalance = longValue - shortValue;\\n      }\\n    }\\n\\n    // marketTreasurySplitGradient_e18 may be adjusted to ensure yield is given\\n    // to the market at a desired rate e.g. if a market tends to become imbalanced\\n    // frequently then the gradient can be increased to funnel yield to the market\\n    // quicker.\\n    // See this equation in latex: https://ipfs.io/ipfs/QmXsW4cHtxpJ5BFwRcMSUw7s5G11Qkte13NTEfPLTKEx4x\\n    // Interact with this equation: https://www.desmos.com/calculator/pnl43tfv5b\\n    uint256 marketPercentCalculated_e18 = (imbalance *\\n      marketTreasurySplitGradient_e18[marketIndex]) / totalValueLockedInMarket;\\n\\n    uint256 marketPercent_e18 = Math.min(marketPercentCalculated_e18, 1e18);\\n\\n    unchecked {\\n      treasuryYieldPercent_e18 = 1e18 - marketPercent_e18;\\n    }\\n  }\\n\\n  /*\\u2554\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2557\\n    \\u2551       HELPER FUNCTIONS       \\u2551\\n    \\u255a\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u255d*/\\n\\n  /// @notice This calculates the value transfer from the overbalanced to underbalanced side (i.e. the funding rate)\\n  /// This is a further incentive measure to balanced markets. This may be present on some and not other synthetic markets.\\n  /// @param marketIndex The market for which to execute the function for.\\n  /// @param _fundingRateMultiplier_e18 A scalar base e18 for the funding rate.\\n  /// @param overbalancedValue Side with more liquidity.\\n  /// @param underbalancedValue Side with less liquidity.\\n  /// @return fundingAmount The amount the overbalanced side needs to pay the underbalanced.\\n  function _calculateFundingAmount(\\n    uint32 marketIndex,\\n    uint256 _fundingRateMultiplier_e18,\\n    uint256 overbalancedValue,\\n    uint256 underbalancedValue\\n  ) internal virtual returns (uint256 fundingAmount) {\\n    uint256 lastUpdateTimestamp = IStaker(staker).safe_getUpdateTimestamp(\\n      marketIndex,\\n      marketUpdateIndex[marketIndex]\\n    );\\n\\n    /* \\n    overBalanced * (1 - underBalanced/overBalanced)\\n      = overBalanced * (overBalanced - underBalanced)/overBalanced)\\n      = overBalanced - underBalanced\\n      = market imbalance\\n    \\n    funding amount = market imbalance * yearlyMaxFundingRate * (now - lastUpdate) / (365.25days in seconds base e18)\\n    */\\n    fundingAmount =\\n      ((overbalancedValue - underbalancedValue) *\\n        _fundingRateMultiplier_e18 *\\n        (block.timestamp - lastUpdateTimestamp)) /\\n      SECONDS_IN_A_YEAR_e18;\\n  }\\n\\n  /// @notice First gets yield from the yield manager and allocates it to market and treasury.\\n  /// It then allocates the full market yield portion to the underbalanced side of the market.\\n  /// NB this function also adjusts the value of the long and short side based on the latest\\n  /// price of the underlying asset received from the oracle. This function should ideally be\\n  /// called everytime there is an price update from the oracle. We have built a bot that does this.\\n  /// The system is still perectly safe if not called every price update, the synthetic will just\\n  /// less closely track the underlying asset.\\n  /// @dev In one function as yield should be allocated before rebalancing.\\n  /// This prevents an attack whereby the user imbalances a side to capture all accrued yield.\\n  /// @param marketIndex The market for which to execute the function for.\\n  /// @param newAssetPrice The new asset price.\\n  /// @return longValue The value of the long side after rebalancing.\\n  /// @return shortValue The value of the short side after rebalancing.\\n  function _claimAndDistributeYieldThenRebalanceMarket(uint32 marketIndex, int256 newAssetPrice)\\n    internal\\n    virtual\\n    returns (uint256 longValue, uint256 shortValue)\\n  {\\n    MarketSideValueInPaymentToken\\n      storage currentMarketSideValueInPaymentToken = marketSideValueInPaymentToken[marketIndex];\\n    // Claiming and distributing the yield\\n    longValue = currentMarketSideValueInPaymentToken.value_long;\\n    shortValue = currentMarketSideValueInPaymentToken.value_short;\\n    uint256 totalValueLockedInMarket = longValue + shortValue;\\n\\n    (bool isLongSideUnderbalanced, uint256 treasuryYieldPercent_e18) = _getYieldSplit(\\n      marketIndex,\\n      longValue,\\n      shortValue,\\n      totalValueLockedInMarket\\n    );\\n\\n    uint256 marketAmount = IYieldManager(yieldManagers[marketIndex])\\n      .distributeYieldForTreasuryAndReturnMarketAllocation(\\n        totalValueLockedInMarket,\\n        treasuryYieldPercent_e18\\n      );\\n\\n    // Take fee as simply 1% of notional over 1 year.\\n    // Value leaving long and short to treasury, this should be done carefully in yield manager!\\n    // order of where this is done is important.\\n    // This amount also potentially lumped together with funding rate fee + exposure fee ?\\n    // See what is simple and makes sense on the bottom line.\\n\\n    if (marketAmount > 0) {\\n      if (isLongSideUnderbalanced) {\\n        longValue += marketAmount;\\n      } else {\\n        shortValue += marketAmount;\\n      }\\n    }\\n\\n    int256 oldAssetPrice = assetPrice[marketIndex];\\n\\n    // Adjusting value of long and short pool based on price movement\\n    // The side/position with less liquidity has 100% percent exposure to the price movement.\\n    // The side/position with more liquidity will have exposure < 100% to the price movement.\\n    // I.e. Imagine $100 in longValue and $50 shortValue\\n    // long side would have $50/$100 = 50% exposure to price movements based on the liquidity imbalance.\\n    // min(longValue, shortValue) = $50 , therefore if the price change was -10% then\\n    // $50 * 10% = $5 gained for short side and conversely $5 lost for long side.\\n    int256 underbalancedSideValue = int256(Math.min(longValue, shortValue));\\n\\n    // send a piece of value change to the treasury?\\n    // Again this reduces the value of totalValueLockedInMarket which means yield manager needs to be alerted.\\n    // See this equation in latex: https://ipfs.io/ipfs/QmPeJ3SZdn1GfxqCD4GDYyWTJGPMSHkjPJaxrzk2qTTPSE\\n    // Interact with this equation: https://www.desmos.com/calculator/t8gr6j5vsq\\n    int256 valueChange = ((newAssetPrice - oldAssetPrice) *\\n      underbalancedSideValue *\\n      int256(marketLeverage_e18[marketIndex])) / (oldAssetPrice * 1e18);\\n\\n    uint256 fundingRateMultiplier = fundingRateMultiplier_e18[marketIndex];\\n    if (fundingRateMultiplier > 0) {\\n      //  slow drip interest funding payment here.\\n      //  recheck yield hasn't tipped the market.\\n      if (longValue < shortValue) {\\n        valueChange += int256(\\n          _calculateFundingAmount(marketIndex, fundingRateMultiplier, shortValue, longValue)\\n        );\\n      } else {\\n        valueChange -= int256(\\n          _calculateFundingAmount(marketIndex, fundingRateMultiplier, longValue, shortValue)\\n        );\\n      }\\n    }\\n\\n    if (valueChange < 0) {\\n      valueChange = -valueChange; // make value change positive\\n\\n      // handle 'impossible' edge case where underlying price feed changes more than 100% downwards gracefully.\\n      if (uint256(valueChange) > longValue) {\\n        valueChange = (int256(longValue) * 99999) / 100000;\\n      }\\n      longValue -= uint256(valueChange);\\n      shortValue += uint256(valueChange);\\n    } else {\\n      // handle 'impossible' edge case where underlying price feed changes more than 100% upwards gracefully.\\n      if (uint256(valueChange) > shortValue) {\\n        valueChange = (int256(shortValue) * 99999) / 100000;\\n      }\\n      longValue += uint256(valueChange);\\n      shortValue -= uint256(valueChange);\\n    }\\n  }\\n\\n  /*\\u2554\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2557\\n    \\u2551     UPDATING SYSTEM STATE     \\u2551\\n    \\u255a\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u255d*/\\n\\n  /// @notice Updates the value of the long and short sides to account for latest oracle price updates\\n  /// and batches all next price actions.\\n  /// @dev To prevent front-running only executes on price change from an oracle.\\n  /// We assume the function will be called for each market at least once per price update.\\n  /// Note Even if not called on every price update, this won't affect security, it will only affect how closely\\n  /// the synthetic asset actually tracks the underlying asset.\\n  /// @param marketIndex The market index for which to update.\\n  function _updateSystemStateInternal(uint32 marketIndex)\\n    internal\\n    virtual\\n    requireMarketExists(marketIndex)\\n  {\\n    // If a negative int is return this should fail.\\n    int256 newAssetPrice = IOracleManager(oracleManagers[marketIndex]).updatePrice();\\n\\n    uint256 currentMarketIndex = marketUpdateIndex[marketIndex];\\n\\n    bool assetPriceHasChanged = assetPrice[marketIndex] != newAssetPrice;\\n\\n    if (assetPriceHasChanged) {\\n      (\\n        uint256 newLongPoolValue,\\n        uint256 newShortPoolValue\\n      ) = _claimAndDistributeYieldThenRebalanceMarket(marketIndex, newAssetPrice);\\n\\n      uint256 syntheticTokenPrice_inPaymentTokens_long = _getSyntheticTokenPrice(\\n        newLongPoolValue,\\n        ISyntheticToken(syntheticTokens[marketIndex][true]).totalSupply()\\n      );\\n      uint256 syntheticTokenPrice_inPaymentTokens_short = _getSyntheticTokenPrice(\\n        newShortPoolValue,\\n        ISyntheticToken(syntheticTokens[marketIndex][false]).totalSupply()\\n      );\\n\\n      assetPrice[marketIndex] = newAssetPrice;\\n\\n      currentMarketIndex++;\\n      marketUpdateIndex[marketIndex] = currentMarketIndex;\\n\\n      syntheticToken_priceSnapshot[marketIndex][currentMarketIndex] = SynthPriceInPaymentToken(\\n        SafeCast.toUint128(syntheticTokenPrice_inPaymentTokens_long),\\n        SafeCast.toUint128(syntheticTokenPrice_inPaymentTokens_short)\\n      );\\n\\n      (\\n        int256 long_changeInMarketValue_inPaymentToken,\\n        int256 short_changeInMarketValue_inPaymentToken\\n      ) = _batchConfirmOutstandingPendingActions(\\n          marketIndex,\\n          syntheticTokenPrice_inPaymentTokens_long,\\n          syntheticTokenPrice_inPaymentTokens_short\\n        );\\n\\n      newLongPoolValue = uint256(\\n        int256(newLongPoolValue) + long_changeInMarketValue_inPaymentToken\\n      );\\n      newShortPoolValue = uint256(\\n        int256(newShortPoolValue) + short_changeInMarketValue_inPaymentToken\\n      );\\n      marketSideValueInPaymentToken[marketIndex] = MarketSideValueInPaymentToken(\\n        SafeCast.toUint128(newLongPoolValue),\\n        SafeCast.toUint128(newShortPoolValue)\\n      );\\n\\n      IStaker(staker).pushUpdatedMarketPricesToUpdateFloatIssuanceCalculations(\\n        marketIndex,\\n        currentMarketIndex,\\n        syntheticTokenPrice_inPaymentTokens_long,\\n        syntheticTokenPrice_inPaymentTokens_short,\\n        newLongPoolValue,\\n        newShortPoolValue\\n      );\\n\\n      emit SystemStateUpdated(\\n        marketIndex,\\n        currentMarketIndex,\\n        newAssetPrice,\\n        newLongPoolValue,\\n        newShortPoolValue,\\n        syntheticTokenPrice_inPaymentTokens_long,\\n        syntheticTokenPrice_inPaymentTokens_short\\n      );\\n    }\\n  }\\n\\n  /// @notice Updates the state of a market to account for the latest oracle price update.\\n  /// @param marketIndex An uint32 which uniquely identifies a market.\\n  function updateSystemState(uint32 marketIndex) external override {\\n    _updateSystemStateInternal(marketIndex);\\n  }\\n\\n  /// @notice Updates the state of multiples markets to account for their latest oracle price updates.\\n  /// @param marketIndexes An array of int32s which uniquely identify markets.\\n  function updateSystemStateMulti(uint32[] calldata marketIndexes) external override {\\n    uint256 length = marketIndexes.length;\\n    for (uint256 i = 0; i < length; i++) {\\n      _updateSystemStateInternal(marketIndexes[i]);\\n    }\\n  }\\n\\n  /*\\u2554\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2557\\n    \\u2551          DEPOSIT          \\u2551\\n    \\u255a\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u255d*/\\n\\n  /// @notice Transfers payment tokens for a market from msg.sender to this contract.\\n  /// @dev Tokens are transferred directly to this contract to be deposited by the yield manager in the batch to earn yield.\\n  ///      Since we check the return value of the transferFrom method, all payment tokens we use must conform to the ERC20 standard.\\n  /// @param marketIndex An uint32 which uniquely identifies a market.\\n  /// @param amount Amount of payment tokens in that token's lowest denominationto deposit.\\n  function _transferPaymentTokensFromUserToYieldManager(uint32 marketIndex, uint256 amount)\\n    internal\\n    virtual\\n  {\\n    IERC20(paymentTokens[marketIndex]).safeTransferFrom(\\n      msg.sender,\\n      yieldManagers[marketIndex],\\n      amount\\n    );\\n  }\\n\\n  /*\\u2554\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2557\\n    \\u2551       MINT POSITION       \\u2551\\n    \\u255a\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u255d*/\\n\\n  /// @notice Allows users to mint synthetic assets for a market. To prevent front-running these mints are executed on the next price update from the oracle.\\n  /// @dev Called by external functions to mint either long or short. If a user mints multiple times before a price update, these are treated as a single mint.\\n  /// @param marketIndex An uint32 which uniquely identifies a market.\\n  /// @param amount Amount of payment tokens in that token's lowest denominationfor which to mint synthetic assets at next price.\\n  /// @param isLong Whether the mint is for a long or short synth.\\n  function _mintNextPrice(\\n    uint32 marketIndex,\\n    uint256 amount,\\n    bool isLong\\n  )\\n    internal\\n    virtual\\n    updateSystemStateMarketAndExecuteOutstandingNextPriceSettlements(msg.sender, marketIndex)\\n    gemCollecting\\n  {\\n    require(amount > 0, \\\"Mint amount == 0\\\");\\n    _setUserTradeTimer(marketIndex, isLong);\\n    _transferPaymentTokensFromUserToYieldManager(marketIndex, amount);\\n\\n    batched_amountPaymentToken_deposit[marketIndex][isLong] += amount;\\n    userNextPrice_paymentToken_depositAmount[marketIndex][isLong][msg.sender] += amount;\\n    uint256 nextUpdateIndex = marketUpdateIndex[marketIndex] + 1;\\n    userNextPrice_currentUpdateIndex[marketIndex][msg.sender] = nextUpdateIndex;\\n\\n    emit NextPriceDeposit(marketIndex, isLong, amount, msg.sender, nextUpdateIndex);\\n  }\\n\\n  function mintAndStakeNextPrice(\\n    uint32 marketIndex,\\n    uint256 amount,\\n    bool isLong\\n  )\\n    external\\n    virtual\\n    override\\n    updateSystemStateMarketAndExecuteOutstandingNextPriceSettlements(staker, marketIndex)\\n    gemCollecting\\n  {\\n    require(amount > 0, \\\"Mint amount must be greater than 0\\\");\\n    _setUserTradeTimer(marketIndex, isLong);\\n    _transferPaymentTokensFromUserToYieldManager(marketIndex, amount);\\n\\n    batched_amountPaymentToken_deposit[marketIndex][isLong] += amount;\\n    userNextPrice_paymentToken_depositAmount[marketIndex][isLong][staker] += amount;\\n    uint256 nextUpdateIndex = marketUpdateIndex[marketIndex] + 1;\\n    userNextPrice_currentUpdateIndex[marketIndex][staker] = nextUpdateIndex;\\n\\n    IStaker(staker).mintAndStakeNextPrice(marketIndex, amount, isLong, msg.sender);\\n\\n    emit NextPriceDepositAndStake(marketIndex, isLong, amount, msg.sender, nextUpdateIndex);\\n  }\\n\\n  /// @notice Allows users to mint long synthetic assets for a market. To prevent front-running these mints are executed on the next price update from the oracle.\\n  /// @param marketIndex An uint32 which uniquely identifies a market.\\n  /// @param amount Amount of payment tokens in that token's lowest denominationfor which to mint synthetic assets at next price.\\n  function mintLongNextPrice(uint32 marketIndex, uint256 amount) external override {\\n    _mintNextPrice(marketIndex, amount, true);\\n  }\\n\\n  /// @notice Allows users to mint short synthetic assets for a market. To prevent front-running these mints are executed on the next price update from the oracle.\\n  /// @param marketIndex An uint32 which uniquely identifies a market.\\n  /// @param amount Amount of payment tokens in that token's lowest denominationfor which to mint synthetic assets at next price.\\n  function mintShortNextPrice(uint32 marketIndex, uint256 amount) external override {\\n    _mintNextPrice(marketIndex, amount, false);\\n  }\\n\\n  /*\\u2554\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2557\\n    \\u2551      REDEEM POSITION      \\u2551\\n    \\u255a\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u255d*/\\n\\n  /// @notice Allows users to redeem their synthetic tokens for payment tokens. To prevent front-running these redeems are executed on the next price update from the oracle.\\n  /// @dev Called by external functions to redeem either long or short. Payment tokens are actually transferred to the user when executeOutstandingNextPriceSettlements is called from a function call by the user.\\n  /// @param marketIndex An uint32 which uniquely identifies a market.\\n  /// @param tokens_redeem Amount in wei of synth tokens to redeem.\\n  /// @param isLong Whether this redeem is for a long or short synth.\\n  function _redeemNextPrice(\\n    uint32 marketIndex,\\n    uint256 tokens_redeem,\\n    bool isLong\\n  )\\n    internal\\n    virtual\\n    updateSystemStateMarketAndExecuteOutstandingNextPriceSettlements(msg.sender, marketIndex)\\n    gemCollecting\\n  {\\n    require(tokens_redeem > 0, \\\"Redeem amount == 0\\\");\\n    _checkIfUserIsEligibleToTrade(msg.sender, marketIndex, isLong);\\n    ISyntheticToken(syntheticTokens[marketIndex][isLong]).transferFrom(\\n      msg.sender,\\n      address(this),\\n      tokens_redeem\\n    );\\n\\n    userNextPrice_syntheticToken_redeemAmount[marketIndex][isLong][msg.sender] += tokens_redeem;\\n    uint256 nextUpdateIndex = marketUpdateIndex[marketIndex] + 1;\\n    userNextPrice_currentUpdateIndex[marketIndex][msg.sender] = nextUpdateIndex;\\n\\n    batched_amountSyntheticToken_redeem[marketIndex][isLong] += tokens_redeem;\\n\\n    emit NextPriceRedeem(marketIndex, isLong, tokens_redeem, msg.sender, nextUpdateIndex);\\n  }\\n\\n  /// @notice  Allows users to redeem long synthetic assets for a market. To prevent front-running these redeems are executed on the next price update from the oracle.\\n  /// @param marketIndex An uint32 which uniquely identifies a market.\\n  /// @param tokens_redeem Amount in wei of synth tokens to redeem at the next oracle price.\\n  function redeemLongNextPrice(uint32 marketIndex, uint256 tokens_redeem) external override {\\n    _redeemNextPrice(marketIndex, tokens_redeem, true);\\n  }\\n\\n  /// @notice  Allows users to redeem short synthetic assets for a market. To prevent front-running these redeems are executed on the next price update from the oracle.\\n  /// @param marketIndex An uint32 which uniquely identifies a market.\\n  /// @param tokens_redeem Amount in wei of synth tokens to redeem at the next oracle price.\\n  function redeemShortNextPrice(uint32 marketIndex, uint256 tokens_redeem) external override {\\n    _redeemNextPrice(marketIndex, tokens_redeem, false);\\n  }\\n\\n  /*\\u2554\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2557\\n    \\u2551       SHIFT POSITION      \\u2551\\n    \\u255a\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u255d*/\\n\\n  /// @notice  Allows users to shift their position from one side of the market to the other in a single transaction. To prevent front-running these shifts are executed on the next price update from the oracle.\\n  /// @dev Called by external functions to shift either way. Intended for primary use by Staker.sol\\n  /// @param marketIndex An uint32 which uniquely identifies a market.\\n  /// @param amountSyntheticTokensToShift Amount in wei of synthetic tokens to shift from the one side to the other at the next oracle price update.\\n  /// @param isShiftFromLong Whether the token shift is from long to short (true), or short to long (false).\\n  function shiftPositionNextPrice(\\n    uint32 marketIndex,\\n    uint256 amountSyntheticTokensToShift,\\n    bool isShiftFromLong\\n  )\\n    public\\n    virtual\\n    override\\n    updateSystemStateMarketAndExecuteOutstandingNextPriceSettlements(msg.sender, marketIndex)\\n    gemCollecting\\n  {\\n    require(amountSyntheticTokensToShift > 0, \\\"Shift amount == 0\\\");\\n\\n    if (msg.sender != staker) {\\n      _checkIfUserIsEligibleToTrade(msg.sender, marketIndex, isShiftFromLong);\\n      _setUserTradeTimer(marketIndex, !isShiftFromLong);\\n    }\\n\\n    ISyntheticToken(syntheticTokens[marketIndex][isShiftFromLong]).transferFrom(\\n      msg.sender,\\n      address(this),\\n      amountSyntheticTokensToShift\\n    );\\n\\n    userNextPrice_syntheticToken_toShiftAwayFrom_marketSide[marketIndex][isShiftFromLong][\\n      msg.sender\\n    ] += amountSyntheticTokensToShift;\\n    uint256 nextUpdateIndex = marketUpdateIndex[marketIndex] + 1;\\n    userNextPrice_currentUpdateIndex[marketIndex][msg.sender] = nextUpdateIndex;\\n\\n    batched_amountSyntheticToken_toShiftAwayFrom_marketSide[marketIndex][\\n      isShiftFromLong\\n    ] += amountSyntheticTokensToShift;\\n\\n    emit NextPriceSyntheticPositionShift(\\n      marketIndex,\\n      isShiftFromLong,\\n      amountSyntheticTokensToShift,\\n      msg.sender,\\n      nextUpdateIndex\\n    );\\n  }\\n\\n  /// @notice Allows users to shift their position from long to short in a single transaction. To prevent front-running these shifts are executed on the next price update from the oracle.\\n  /// @param marketIndex An uint32 which uniquely identifies a market.\\n  /// @param amountSyntheticTokensToShift Amount in wei of synthetic tokens to shift from long to short the next oracle price update.\\n  function shiftPositionFromLongNextPrice(uint32 marketIndex, uint256 amountSyntheticTokensToShift)\\n    external\\n    override\\n  {\\n    shiftPositionNextPrice(marketIndex, amountSyntheticTokensToShift, true);\\n  }\\n\\n  /// @notice Allows users to shift their position from short to long in a single transaction. To prevent front-running these shifts are executed on the next price update from the oracle.\\n  /// @param marketIndex An uint32 which uniquely identifies a market.\\n  /// @param amountSyntheticTokensToShift Amount in wei of synthetic tokens to shift from the short to long at the next oracle price update.\\n  function shiftPositionFromShortNextPrice(uint32 marketIndex, uint256 amountSyntheticTokensToShift)\\n    external\\n    override\\n  {\\n    shiftPositionNextPrice(marketIndex, amountSyntheticTokensToShift, false);\\n  }\\n\\n  /*\\u2554\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2557\\n    \\u2551     NEXT PRICE SETTLEMENTS     \\u2551\\n    \\u255a\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u255d*/\\n\\n  /// @notice Transfers outstanding synth tokens from a next price mint to the user.\\n  /// @dev The outstanding synths should already be reflected for the user due to balanceOf in SyntheticToken.sol, this just does the accounting.\\n  /// @param marketIndex An uint32 which uniquely identifies a market.\\n  /// @param user The address of the user for whom to execute the function for.\\n  /// @param isLong Whether this is for the long or short synth for the market.\\n  function _executeOutstandingNextPriceMints(\\n    uint32 marketIndex,\\n    address user,\\n    bool isLong\\n  ) internal virtual {\\n    uint256 currentPaymentTokenDepositAmount = userNextPrice_paymentToken_depositAmount[\\n      marketIndex\\n    ][isLong][user];\\n    if (currentPaymentTokenDepositAmount > 0) {\\n      userNextPrice_paymentToken_depositAmount[marketIndex][isLong][user] = 0;\\n      uint256 amountSyntheticTokensToTransferToUser = _getAmountSyntheticToken(\\n        currentPaymentTokenDepositAmount,\\n        get_syntheticToken_priceSnapshot_side(\\n          marketIndex,\\n          isLong,\\n          userNextPrice_currentUpdateIndex[marketIndex][user]\\n        )\\n      );\\n      ISyntheticToken(syntheticTokens[marketIndex][isLong]).transfer(\\n        user,\\n        amountSyntheticTokensToTransferToUser\\n      );\\n    }\\n  }\\n\\n  /// @notice Transfers outstanding payment tokens from a next price redemption to the user.\\n  /// @param marketIndex An uint32 which uniquely identifies a market.\\n  /// @param user The address of the user for whom to execute the function for.\\n  /// @param isLong Whether this is for the long or short synth for the market.\\n  function _executeOutstandingNextPriceRedeems(\\n    uint32 marketIndex,\\n    address user,\\n    bool isLong\\n  ) internal virtual {\\n    uint256 currentSyntheticTokenRedemptions = userNextPrice_syntheticToken_redeemAmount[\\n      marketIndex\\n    ][isLong][user];\\n    if (currentSyntheticTokenRedemptions > 0) {\\n      userNextPrice_syntheticToken_redeemAmount[marketIndex][isLong][user] = 0;\\n      uint256 amountPaymentToken_toRedeem = _getAmountPaymentToken(\\n        currentSyntheticTokenRedemptions,\\n        get_syntheticToken_priceSnapshot_side(\\n          marketIndex,\\n          isLong,\\n          userNextPrice_currentUpdateIndex[marketIndex][user]\\n        )\\n      );\\n\\n      IYieldManager(yieldManagers[marketIndex]).transferPaymentTokensToUser(\\n        user,\\n        amountPaymentToken_toRedeem\\n      );\\n    }\\n  }\\n\\n  /// @notice Transfers outstanding synth tokens from a next price position shift to the user.\\n  /// @dev The outstanding synths should already be reflected for the user due to balanceOf in SyntheticToken.sol, this just does the accounting.\\n  /// @param marketIndex An uint32 which uniquely identifies a market.\\n  /// @param user The address of the user for whom to execute the function for.\\n  /// @param isShiftFromLong Whether the token shift was from long to short (true), or short to long (false).\\n  function _executeOutstandingNextPriceTokenShifts(\\n    uint32 marketIndex,\\n    address user,\\n    bool isShiftFromLong\\n  ) internal virtual {\\n    uint256 syntheticToken_toShiftAwayFrom_marketSide = userNextPrice_syntheticToken_toShiftAwayFrom_marketSide[\\n        marketIndex\\n      ][isShiftFromLong][user];\\n    if (syntheticToken_toShiftAwayFrom_marketSide > 0) {\\n      uint256 syntheticToken_toShiftTowardsTargetSide = getAmountSyntheticTokenToMintOnTargetSide(\\n        marketIndex,\\n        syntheticToken_toShiftAwayFrom_marketSide,\\n        isShiftFromLong,\\n        userNextPrice_currentUpdateIndex[marketIndex][user]\\n      );\\n\\n      userNextPrice_syntheticToken_toShiftAwayFrom_marketSide[marketIndex][isShiftFromLong][\\n        user\\n      ] = 0;\\n\\n      require(\\n        ISyntheticToken(syntheticTokens[marketIndex][!isShiftFromLong]).transfer(\\n          user,\\n          syntheticToken_toShiftTowardsTargetSide\\n        )\\n      );\\n    }\\n  }\\n\\n  /// @notice After markets have been batched updated on a new oracle price, transfers any owed tokens to a user from their next price actions for that update to that user.\\n  /// @dev Once the market has updated for the next price, should be guaranteed (through modifiers) to execute for a user before user initiation of new next price actions.\\n  /// @param user The address of the user for whom to execute the function.\\n  /// @param marketIndex An uint32 which uniquely identifies a market.\\n  function _executeOutstandingNextPriceSettlements(address user, uint32 marketIndex)\\n    internal\\n    virtual\\n  {\\n    uint256 userCurrentUpdateIndex = userNextPrice_currentUpdateIndex[marketIndex][user];\\n    if (userCurrentUpdateIndex != 0 && userCurrentUpdateIndex <= marketUpdateIndex[marketIndex]) {\\n      _executeOutstandingNextPriceMints(marketIndex, user, true);\\n      _executeOutstandingNextPriceMints(marketIndex, user, false);\\n      _executeOutstandingNextPriceRedeems(marketIndex, user, true);\\n      _executeOutstandingNextPriceRedeems(marketIndex, user, false);\\n      _executeOutstandingNextPriceTokenShifts(marketIndex, user, true);\\n      _executeOutstandingNextPriceTokenShifts(marketIndex, user, false);\\n\\n      userNextPrice_currentUpdateIndex[marketIndex][user] = 0;\\n\\n      emit ExecuteNextPriceSettlementsUser(user, marketIndex);\\n    }\\n  }\\n\\n  /// @notice After markets have been batched updated on a new oracle price, transfers any owed tokens to a user from their next price actions for that update to that user.\\n  /// @param user The address of the user for whom to execute the function.\\n  /// @param marketIndex An uint32 which uniquely identifies a market.\\n  function executeOutstandingNextPriceSettlementsUser(address user, uint32 marketIndex)\\n    external\\n    override\\n  {\\n    _executeOutstandingNextPriceSettlements(user, marketIndex);\\n  }\\n\\n  /// @notice Executes outstanding next price settlements for a user for multiple markets.\\n  /// @param user The address of the user for whom to execute the function.\\n  /// @param marketIndexes An array of int32s which each uniquely identify a market.\\n  function executeOutstandingNextPriceSettlementsUserMulti(\\n    address user,\\n    uint32[] calldata marketIndexes\\n  ) external {\\n    uint256 length = marketIndexes.length;\\n    for (uint256 i = 0; i < length; i++) {\\n      _executeOutstandingNextPriceSettlements(user, marketIndexes[i]);\\n    }\\n  }\\n\\n  /*\\u2554\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2557\\n    \\u2551   BATCHED NEXT PRICE SETTLEMENT ACTIONS   \\u2551\\n    \\u255a\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u255d*/\\n\\n  /// @notice Either transfers funds from the yield manager to this contract if redeems > deposits,\\n  /// and vice versa. The yield manager handles depositing and withdrawing the funds from a yield market.\\n  /// @dev When all batched next price actions are handled the total value in the market can either increase or decrease based on the value of mints and redeems.\\n  /// @param marketIndex An uint32 which uniquely identifies a market.\\n  /// @param totalPaymentTokenValueChangeForMarket An int256 which indicates the magnitude and direction of the change in market value.\\n  function _handleTotalPaymentTokenValueChangeForMarketWithYieldManager(\\n    uint32 marketIndex,\\n    int256 totalPaymentTokenValueChangeForMarket\\n  ) internal virtual {\\n    if (totalPaymentTokenValueChangeForMarket > 0) {\\n      IYieldManager(yieldManagers[marketIndex]).depositPaymentToken(\\n        uint256(totalPaymentTokenValueChangeForMarket)\\n      );\\n    } else if (totalPaymentTokenValueChangeForMarket < 0) {\\n      // NB there will be issues here if not enough liquidity exists to withdraw\\n      // Boolean should be returned from yield manager and think how to appropriately handle this\\n      IYieldManager(yieldManagers[marketIndex]).removePaymentTokenFromMarket(\\n        uint256(-totalPaymentTokenValueChangeForMarket)\\n      );\\n    }\\n  }\\n\\n  /// @notice Given a desired change in synth token supply, either mints or burns tokens to achieve that desired change.\\n  /// @dev When all batched next price actions are executed total supply for a synth can either increase or decrease.\\n  /// @param marketIndex An uint32 which uniquely identifies a market.\\n  /// @param isLong Whether this function should execute for the long or short synth for the market.\\n  /// @param changeInSyntheticTokensTotalSupply The amount in wei by which synth token supply should change.\\n  function _handleChangeInSyntheticTokensTotalSupply(\\n    uint32 marketIndex,\\n    bool isLong,\\n    int256 changeInSyntheticTokensTotalSupply\\n  ) internal virtual {\\n    if (changeInSyntheticTokensTotalSupply > 0) {\\n      ISyntheticToken(syntheticTokens[marketIndex][isLong]).mint(\\n        address(this),\\n        uint256(changeInSyntheticTokensTotalSupply)\\n      );\\n    } else if (changeInSyntheticTokensTotalSupply < 0) {\\n      ISyntheticToken(syntheticTokens[marketIndex][isLong]).burn(\\n        uint256(-changeInSyntheticTokensTotalSupply)\\n      );\\n    }\\n  }\\n\\n  /**\\n  @notice Performs all batched next price actions on an oracle price update.\\n  @dev Mints or burns all synthetic tokens for this contract.\\n\\n    After this function is executed all user actions in that batch are confirmed and can be settled individually by\\n      calling _executeOutstandingNexPriceSettlements for a given user.\\n\\n    The maths here is safe from rounding errors since it always over estimates on the batch with division.\\n      (as an example (5/3) + (5/3) = 2 but (5+5)/3 = 10/3 = 3, so the batched action would mint one more)\\n  @param marketIndex An uint32 which uniquely identifies a market.\\n  @param syntheticTokenPrice_inPaymentTokens_long The long synthetic token price for this oracle price update.\\n  @param syntheticTokenPrice_inPaymentTokens_short The short synthetic token price for this oracle price update.\\n  @return long_changeInMarketValue_inPaymentToken The total value change for the long side after all batched actions are executed.\\n  @return short_changeInMarketValue_inPaymentToken The total value change for the short side after all batched actions are executed.\\n  */\\n  function _batchConfirmOutstandingPendingActions(\\n    uint32 marketIndex,\\n    uint256 syntheticTokenPrice_inPaymentTokens_long,\\n    uint256 syntheticTokenPrice_inPaymentTokens_short\\n  )\\n    internal\\n    virtual\\n    returns (\\n      int256 long_changeInMarketValue_inPaymentToken,\\n      int256 short_changeInMarketValue_inPaymentToken\\n    )\\n  {\\n    int256 changeInSupply_syntheticToken_long;\\n    int256 changeInSupply_syntheticToken_short;\\n\\n    // NOTE: the only reason we are reusing amountForCurrentAction_workingVariable for all actions (redeemLong, redeemShort, mintLong, mintShort, shiftFromLong, shiftFromShort) is to reduce stack usage\\n    uint256 amountForCurrentAction_workingVariable = batched_amountPaymentToken_deposit[\\n      marketIndex\\n    ][true];\\n\\n    // Handle batched deposits LONG\\n    if (amountForCurrentAction_workingVariable > 0) {\\n      long_changeInMarketValue_inPaymentToken = int256(amountForCurrentAction_workingVariable);\\n\\n      batched_amountPaymentToken_deposit[marketIndex][true] = 0;\\n\\n      changeInSupply_syntheticToken_long = int256(\\n        _getAmountSyntheticToken(\\n          amountForCurrentAction_workingVariable,\\n          syntheticTokenPrice_inPaymentTokens_long\\n        )\\n      );\\n    }\\n\\n    // Handle batched deposits SHORT\\n    amountForCurrentAction_workingVariable = batched_amountPaymentToken_deposit[marketIndex][false];\\n    if (amountForCurrentAction_workingVariable > 0) {\\n      short_changeInMarketValue_inPaymentToken = int256(amountForCurrentAction_workingVariable);\\n\\n      batched_amountPaymentToken_deposit[marketIndex][false] = 0;\\n\\n      changeInSupply_syntheticToken_short = int256(\\n        _getAmountSyntheticToken(\\n          amountForCurrentAction_workingVariable,\\n          syntheticTokenPrice_inPaymentTokens_short\\n        )\\n      );\\n    }\\n\\n    // Handle shift tokens from LONG to SHORT\\n    amountForCurrentAction_workingVariable = batched_amountSyntheticToken_toShiftAwayFrom_marketSide[\\n      marketIndex\\n    ][true];\\n\\n    if (amountForCurrentAction_workingVariable > 0) {\\n      int256 paymentTokenValueChangeForShiftToShort = int256(\\n        _getAmountPaymentToken(\\n          amountForCurrentAction_workingVariable,\\n          syntheticTokenPrice_inPaymentTokens_long\\n        )\\n      );\\n\\n      long_changeInMarketValue_inPaymentToken -= paymentTokenValueChangeForShiftToShort;\\n      short_changeInMarketValue_inPaymentToken += paymentTokenValueChangeForShiftToShort;\\n\\n      changeInSupply_syntheticToken_long -= int256(amountForCurrentAction_workingVariable);\\n      changeInSupply_syntheticToken_short += int256(\\n        _getEquivalentAmountSyntheticTokensOnTargetSide(\\n          amountForCurrentAction_workingVariable,\\n          syntheticTokenPrice_inPaymentTokens_long,\\n          syntheticTokenPrice_inPaymentTokens_short\\n        )\\n      );\\n\\n      batched_amountSyntheticToken_toShiftAwayFrom_marketSide[marketIndex][true] = 0;\\n    }\\n\\n    // Handle shift tokens from SHORT to LONG\\n    amountForCurrentAction_workingVariable = batched_amountSyntheticToken_toShiftAwayFrom_marketSide[\\n      marketIndex\\n    ][false];\\n    if (amountForCurrentAction_workingVariable > 0) {\\n      int256 paymentTokenValueChangeForShiftToLong = int256(\\n        _getAmountPaymentToken(\\n          amountForCurrentAction_workingVariable,\\n          syntheticTokenPrice_inPaymentTokens_short\\n        )\\n      );\\n\\n      short_changeInMarketValue_inPaymentToken -= paymentTokenValueChangeForShiftToLong;\\n      long_changeInMarketValue_inPaymentToken += paymentTokenValueChangeForShiftToLong;\\n\\n      changeInSupply_syntheticToken_short -= int256(amountForCurrentAction_workingVariable);\\n      changeInSupply_syntheticToken_long += int256(\\n        _getEquivalentAmountSyntheticTokensOnTargetSide(\\n          amountForCurrentAction_workingVariable,\\n          syntheticTokenPrice_inPaymentTokens_short,\\n          syntheticTokenPrice_inPaymentTokens_long\\n        )\\n      );\\n\\n      batched_amountSyntheticToken_toShiftAwayFrom_marketSide[marketIndex][false] = 0;\\n    }\\n\\n    // Handle batched redeems LONG\\n    amountForCurrentAction_workingVariable = batched_amountSyntheticToken_redeem[marketIndex][true];\\n    if (amountForCurrentAction_workingVariable > 0) {\\n      long_changeInMarketValue_inPaymentToken -= int256(\\n        _getAmountPaymentToken(\\n          amountForCurrentAction_workingVariable,\\n          syntheticTokenPrice_inPaymentTokens_long\\n        )\\n      );\\n      changeInSupply_syntheticToken_long -= int256(amountForCurrentAction_workingVariable);\\n\\n      batched_amountSyntheticToken_redeem[marketIndex][true] = 0;\\n    }\\n\\n    // Handle batched redeems SHORT\\n    amountForCurrentAction_workingVariable = batched_amountSyntheticToken_redeem[marketIndex][\\n      false\\n    ];\\n    if (amountForCurrentAction_workingVariable > 0) {\\n      short_changeInMarketValue_inPaymentToken -= int256(\\n        _getAmountPaymentToken(\\n          amountForCurrentAction_workingVariable,\\n          syntheticTokenPrice_inPaymentTokens_short\\n        )\\n      );\\n      changeInSupply_syntheticToken_short -= int256(amountForCurrentAction_workingVariable);\\n\\n      batched_amountSyntheticToken_redeem[marketIndex][false] = 0;\\n    }\\n\\n    // Batch settle payment tokens\\n    _handleTotalPaymentTokenValueChangeForMarketWithYieldManager(\\n      marketIndex,\\n      long_changeInMarketValue_inPaymentToken + short_changeInMarketValue_inPaymentToken\\n    );\\n    // Batch settle synthetic tokens\\n    _handleChangeInSyntheticTokensTotalSupply(\\n      marketIndex,\\n      true,\\n      changeInSupply_syntheticToken_long\\n    );\\n    _handleChangeInSyntheticTokensTotalSupply(\\n      marketIndex,\\n      false,\\n      changeInSupply_syntheticToken_short\\n    );\\n  }\\n\\n  // Upgrade helper:\\n  function upgradeToUsingCompactValueAndPriceSnapshots() public {\\n    // If this function has alreday been called this value will not be 0!\\n    if (marketSideValueInPaymentToken[1].value_long == 0) {\\n      for (uint32 market = 1; market <= latestMarket; market++) {\\n        marketSideValueInPaymentToken[market] = MarketSideValueInPaymentToken(\\n          SafeCast.toUint128(marketSideValueInPaymentTokenLEGACY[market][true]),\\n          SafeCast.toUint128(marketSideValueInPaymentTokenLEGACY[market][false])\\n        );\\n      }\\n    }\\n    emit Upgrade(1);\\n  }\\n}\\n\",\"keccak256\":\"0x167f2d1013ce97a9d5938336aee8beb965f62d93f96405cd2e81f76a360e6126\",\"license\":\"BUSL-1.1\"},\"hardhat/console.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >= 0.4.22 <0.9.0;\\n\\nlibrary console {\\n\\taddress constant CONSOLE_ADDRESS = address(0x000000000000000000636F6e736F6c652e6c6f67);\\n\\n\\tfunction _sendLogPayload(bytes memory payload) private view {\\n\\t\\tuint256 payloadLength = payload.length;\\n\\t\\taddress consoleAddress = CONSOLE_ADDRESS;\\n\\t\\tassembly {\\n\\t\\t\\tlet payloadStart := add(payload, 32)\\n\\t\\t\\tlet r := staticcall(gas(), consoleAddress, payloadStart, payloadLength, 0, 0)\\n\\t\\t}\\n\\t}\\n\\n\\tfunction log() internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log()\\\"));\\n\\t}\\n\\n\\tfunction logInt(int p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(int)\\\", p0));\\n\\t}\\n\\n\\tfunction logUint(uint p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint)\\\", p0));\\n\\t}\\n\\n\\tfunction logString(string memory p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string)\\\", p0));\\n\\t}\\n\\n\\tfunction logBool(bool p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool)\\\", p0));\\n\\t}\\n\\n\\tfunction logAddress(address p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes(bytes memory p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes1(bytes1 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes1)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes2(bytes2 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes2)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes3(bytes3 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes3)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes4(bytes4 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes4)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes5(bytes5 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes5)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes6(bytes6 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes6)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes7(bytes7 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes7)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes8(bytes8 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes8)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes9(bytes9 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes9)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes10(bytes10 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes10)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes11(bytes11 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes11)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes12(bytes12 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes12)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes13(bytes13 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes13)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes14(bytes14 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes14)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes15(bytes15 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes15)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes16(bytes16 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes16)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes17(bytes17 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes17)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes18(bytes18 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes18)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes19(bytes19 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes19)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes20(bytes20 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes20)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes21(bytes21 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes21)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes22(bytes22 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes22)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes23(bytes23 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes23)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes24(bytes24 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes24)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes25(bytes25 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes25)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes26(bytes26 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes26)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes27(bytes27 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes27)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes28(bytes28 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes28)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes29(bytes29 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes29)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes30(bytes30 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes30)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes31(bytes31 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes31)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes32(bytes32 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes32)\\\", p0));\\n\\t}\\n\\n\\tfunction log(uint p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint)\\\", p0));\\n\\t}\\n\\n\\tfunction log(string memory p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string)\\\", p0));\\n\\t}\\n\\n\\tfunction log(bool p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool)\\\", p0));\\n\\t}\\n\\n\\tfunction log(address p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address)\\\", p0));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(address p0, address p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n}\\n\",\"keccak256\":\"0x72b6a1d297cd3b033d7c2e4a7e7864934bb767db6453623f1c3082c6534547f4\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x60a0604052306080523480156200001557600080fd5b50600054610100900460ff16620000335760005460ff16156200003d565b6200003d620000e2565b620000a55760405162461bcd60e51b815260206004820152602e60248201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160448201526d191e481a5b9a5d1a585b1a5e995960921b606482015260840160405180910390fd5b600054610100900460ff16158015620000c8576000805461ffff19166101011790555b8015620000db576000805461ff00191690555b5062000106565b6000620000fa306200010060201b620028911760201c565b15905090565b3b151590565b608051615ad3620001376000396000818161102401528181611064015281816113a901526113e90152615ad36000f3fe6080604052600436106103c35760003560e01c80637a0e94f0116101f2578063c2e124711161010d578063f3de8b93116100a0578063f7cbb6871161006f578063f7cbb68714610e07578063f80c9b9214610e27578063f8c8765e14610e60578063ffe9a5c814610e8057600080fd5b8063f3de8b9314610d01578063f41cb19514610d7c578063f68a327f14610db3578063f72c0d8b14610dd357600080fd5b8063e6b604e0116100dc578063e6b604e014610c80578063e77772fe14610ca0578063ecd170e114610cc1578063eeb0235214610ce157600080fd5b8063c2e1247114610c00578063d547741f14610c20578063d88905c914610c40578063da04ce1414610c6057600080fd5b80639c5b0ee311610185578063aca36d7b11610154578063aca36d7b14610aec578063b054c4a114610b4e578063b36f537414610b90578063c2b8007214610bc157600080fd5b80639c5b0ee314610a475780639cb7172514610a7e5780639dc39e0f14610a9e578063a217fddf14610ad757600080fd5b8063897a0786116101c1578063897a0786146109c757806391a9fa61146109e757806391d1485414610a0757806392f6fe8014610a2757600080fd5b80637a0e94f014610920578063867dfc6d1461094057806388cc635c146109605780638900bdfa1461099957600080fd5b80633d6a2b3f116102e257806364d16f53116102755780636c8d2b97116102445780636c8d2b971461089757806371fd9623146108b757806375b238fc146108d757806377bf4b8b1461090b57600080fd5b806364d16f53146107fd57806364e4a81d1461081d578063682ad286146108565780636c3050551461087657600080fd5b80635ebaf1db116102b15780635ebaf1db1461073f578063602aabab146107675780636137e33314610795578063636190c8146107ca57600080fd5b80633d6a2b3f146106cc5780634f1ef286146106ec57806353ffd91c146106ff578063566f03ea1461071f57600080fd5b80632e2d80e81161035a57806334daaa251161032957806334daaa251461063357806336568abe1461066c5780633659cfe61461068c57806337bf1cf7146106ac57600080fd5b80632e2d80e8146105675780632f2ff15d1461059557806331a43909146105b557806334898684146105f457600080fd5b806314c88ffa1161039657806314c88ffa1461048c5780631badf5c0146104ba57806321658e4814610509578063248a9ca31461053757600080fd5b806301ffc9a7146103c857806305c8146f146103fd5780630e5140dc1461041f578063113997df1461046c575b600080fd5b3480156103d457600080fd5b506103e86103e3366004614d2b565b610ecd565b60405190151581526020015b60405180910390f35b34801561040957600080fd5b5061041d610418366004614d6e565b610f04565b005b34801561042b57600080fd5b5061045e61043a366004614dac565b6101c360209081526000938452604080852082529284528284209052825290205481565b6040519081526020016103f4565b34801561047857600080fd5b5061041d610487366004614df5565b610f10565b34801561049857600080fd5b5061045e6104a7366004614d6e565b61015a6020526000908152604090205481565b3480156104c657600080fd5b506104f16104d5366004614d6e565b61015f602052600090815260409020546001600160a01b031681565b6040516001600160a01b0390911681526020016103f4565b34801561051557600080fd5b5061045e610524366004614d6e565b61015b6020526000908152604090205481565b34801561054357600080fd5b5061045e610552366004614e33565b60009081526065602052604090206001015490565b34801561057357600080fd5b5061045e610582366004614d6e565b6101606020526000908152604090205481565b3480156105a157600080fd5b5061041d6105b0366004614e4c565b610f75565b3480156105c157600080fd5b5061045e6105d0366004614e7c565b61018f60209081526000938452604080852082529284528284209052825290205481565b34801561060057600080fd5b5061045e61060f366004614dac565b6101c260209081526000938452604080852082529284528284209052825290205481565b34801561063f57600080fd5b5061045e61064e366004614ebb565b61019160209081526000928352604080842090915290825290205481565b34801561067857600080fd5b5061041d610687366004614e4c565b610f9b565b34801561069857600080fd5b5061041d6106a7366004614ee7565b611019565b3480156106b857600080fd5b5061045e6106c7366004614e7c565b6110df565b3480156106d857600080fd5b5061041d6106e7366004614f46565b611186565b61041d6106fa366004615029565b61139e565b34801561070b57600080fd5b5061041d61071a3660046150ed565b611454565b34801561072b57600080fd5b5061041d61073a366004615122565b611695565b34801561074b57600080fd5b50610128546104f190600160201b90046001600160a01b031681565b34801561077357600080fd5b5061045e610782366004614d6e565b61015c6020526000908152604090205481565b3480156107a157600080fd5b506107b56107b0366004615122565b611758565b604080519283526020830191909152016103f4565b3480156107d657600080fd5b50610128546107e89063ffffffff1681565b60405163ffffffff90911681526020016103f4565b34801561080957600080fd5b5061041d61081836600461514c565b6117dc565b34801561082957600080fd5b5061045e610838366004614ebb565b61019060209081526000928352604080842090915290825290205481565b34801561086257600080fd5b5061041d610871366004615122565b611862565b34801561088257600080fd5b5061012a546104f1906001600160a01b031681565b3480156108a357600080fd5b5061041d6108b23660046151bd565b61186e565b3480156108c357600080fd5b5061041d6108d23660046150ed565b6118c1565b3480156108e357600080fd5b5061045e7fa49807205ce4d355092ef5a8a18f56e8913cf4a201fbe287825b095693c2177581565b34801561091757600080fd5b5061041d611add565b34801561092c57600080fd5b5061041d61093b3660046151ff565b611c27565b34801561094c57600080fd5b5061041d61095b366004615122565b611c7c565b34801561096c57600080fd5b5061045e61097b366004614ebb565b61018e60209081526000928352604080842090915290825290205481565b3480156109a557600080fd5b5061045e6109b4366004614d6e565b6101596020526000908152604090205481565b3480156109d357600080fd5b5061041d6109e2366004615254565b611c88565b3480156109f357600080fd5b5061041d610a02366004615122565b611c92565b348015610a1357600080fd5b506103e8610a22366004614e4c565b611c9e565b348015610a3357600080fd5b5061045e610a42366004615289565b611cc9565b348015610a5357600080fd5b506104f1610a62366004614d6e565b61015e602052600090815260409020546001600160a01b031681565b348015610a8a57600080fd5b5061041d610a99366004614df5565b611d0d565b348015610aaa57600080fd5b5061045e610ab936600461514c565b6101c060209081526000928352604080842090915290825290205481565b348015610ae357600080fd5b5061045e600081565b348015610af857600080fd5b50610b2e610b07366004614d6e565b610193602052600090815260409020546001600160801b0380821691600160801b90041682565b604080516001600160801b039384168152929091166020830152016103f4565b348015610b5a57600080fd5b506104f1610b69366004614ebb565b61018d6020908152600092835260408084209091529082529020546001600160a01b031681565b348015610b9c57600080fd5b506103e8610bab366004614d6e565b6101586020526000908152604090205460ff1681565b348015610bcd57600080fd5b5061045e610bdc366004614dac565b6101c160209081526000938452604080852082529284528284209052825290205481565b348015610c0c57600080fd5b5061041d610c1b366004615122565b611dac565b348015610c2c57600080fd5b5061041d610c3b366004614e4c565b611db8565b348015610c4c57600080fd5b5061041d610c5b3660046152cf565b611dde565b348015610c6c57600080fd5b5061041d610c7b366004615122565b61227f565b348015610c8c57600080fd5b5061041d610c9b366004615122565b6122a1565b348015610cac57600080fd5b50610129546104f1906001600160a01b031681565b348015610ccd57600080fd5b5061041d610cdc366004614df5565b6122ad565b348015610ced57600080fd5b5061041d610cfc366004615122565b612329565b348015610d0d57600080fd5b50610d58610d1c366004614dac565b6101c460209081526000938452604080852082529284528284209052825290205463ffffffff811690600160201b90046001600160e01b031682565b6040805163ffffffff90931683526001600160e01b039091166020830152016103f4565b348015610d8857600080fd5b506104f1610d97366004614d6e565b61015d602052600090815260409020546001600160a01b031681565b348015610dbf57600080fd5b5061045e610dce366004614df5565b612335565b348015610ddf57600080fd5b5061045e7f189ab7a9244df0848122154315af71fe140f3db0fe014031783b0946b8c9d2e381565b348015610e1357600080fd5b5061041d610e22366004615378565b612460565b348015610e3357600080fd5b5061045e610e42366004614ebb565b61019260209081526000928352604080842090915290825290205481565b348015610e6c57600080fd5b5061041d610e7b3660046153de565b61279a565b348015610e8c57600080fd5b50610b2e610e9b366004615122565b6101946020908152600092835260408084209091529082529020546001600160801b0380821691600160801b90041682565b60006001600160e01b03198216637965db0b60e01b1480610efe57506301ffc9a760e01b6001600160e01b03198316145b92915050565b610f0d81612897565b50565b61012854600160201b90046001600160a01b03163314610f655760405162461bcd60e51b815260206004820152600b60248201526a7374616b6572206f6e6c7960a81b60448201526064015b60405180910390fd5b610f70838383612cad565b505050565b600082815260656020526040902060010154610f918133612d51565b610f708383612db5565b6001600160a01b038116331461100b5760405162461bcd60e51b815260206004820152602f60248201527f416363657373436f6e74726f6c3a2063616e206f6e6c792072656e6f756e636560448201526e103937b632b9903337b91039b2b63360891b6064820152608401610f5c565b6110158282612e3b565b5050565b306001600160a01b037f00000000000000000000000000000000000000000000000000000000000000001614156110625760405162461bcd60e51b8152600401610f5c9061543a565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316611094612ea2565b6001600160a01b0316146110ba5760405162461bcd60e51b8152600401610f5c90615486565b6110c381612ed0565b60408051600080825260208201909252610f0d91839190612efb565b60008215611118575063ffffffff83166000908152610194602090815260408083208484529091529020546001600160801b031661114c565b5063ffffffff8316600090815261019460209081526040808320848452909152902054600160801b90046001600160801b03165b8061117f575063ffffffff8316600090815261018f60209081526040808320851515845282528083208484529091529020545b9392505050565b61118e61303f565b61012880546000919082906111a89063ffffffff166154e8565b91906101000a81548163ffffffff021916908363ffffffff16021790559050816001600160a01b031663edf565cc6040518163ffffffff1660e01b8152600401600060405180830381600087803b15801561120257600080fd5b505af1158015611216573d6000803e3d6000fd5b5050505063ffffffff8116600081815261018d6020908152604080832060018452825280832080546001600160a01b03199081166001600160a01b038d811691909117909255848052828520805482168c841617905594845261015d8352818420805486168a831617905561015e83528184208054861688831617905561015f835281842080549095169088169081179094558051630ce74fc560e31b8152905163673a7e28936004808401949383900301908290875af11580156112df573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611303919061550c565b61015960008363ffffffff1663ffffffff168152602001908152602001600020819055507f901e73890694712ca72bdc627d356f05f11be45e7ccf490a8d4924c393bcb5658187878761015960008763ffffffff1663ffffffff168152602001908152602001600020548f8f8f8f8c8c60405161138a9b9a9998979695949392919061554e565b60405180910390a150505050505050505050565b306001600160a01b037f00000000000000000000000000000000000000000000000000000000000000001614156113e75760405162461bcd60e51b8152600401610f5c9061543a565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316611419612ea2565b6001600160a01b03161461143f5760405162461bcd60e51b8152600401610f5c90615486565b61144882612ed0565b61101582826001612efb565b61012854600160201b90046001600160a01b03168361147281612897565b61147c828261306b565b61148461316c565b600084116114df5760405162461bcd60e51b815260206004820152602260248201527f4d696e7420616d6f756e74206d7573742062652067726561746572207468616e604482015261020360f41b6064820152608401610f5c565b6114e985846131e0565b6114f38585613220565b63ffffffff85166000908152610190602090815260408083208615158452909152812080548692906115269084906155d2565b909155505063ffffffff851660009081526101c1602090815260408083208615158452825280832061012854600160201b90046001600160a01b03168452909152812080548692906115799084906155d2565b909155505063ffffffff8516600090815261015a60205260408120546115a09060016155d2565b63ffffffff871660008181526101c06020908152604080832061012880546001600160a01b03600160201b918290048116875292909452938290208690559254905163f5a2c77b60e01b81526004810194909452602484018a905288151560448501523360648501529394509092049091169063f5a2c77b90608401600060405180830381600087803b15801561163657600080fd5b505af115801561164a573d6000803e3d6000fd5b505050507f896066fd32b6c29de689cd030c450df34262d3c06a88b3452771ab3fdf4bfcb386858733856040516116859594939291906155ea565b60405180910390a1505050505050565b61169d61303f565b6802b5e3af16b18800008111156117025760405162461bcd60e51b815260206004820152602360248201527f6e6f7420696e2072616e67653a2066756e64696e672072617465203c3d20353060448201526230302560e81b6064820152608401610f5c565b63ffffffff821660008181526101606020908152604091829020849055815192835282018390527ffb610896b356d431dc44942eb10e42369d870163522ed41621aec1c2ca731d26910160405180910390a15050565b63ffffffff82166000908152610194602090815260408083208484529091529020546001600160801b0380821691600160801b900416816117d557505063ffffffff8216600090815261018f6020908152604080832060018452808352818420858552835281842054848052908352818420858552909252909120545b9250929050565b6117e461303f565b63ffffffff8216600081815261015f602090815260409182902080546001600160a01b038681166001600160a01b03198316811790935584519586521691840182905291830191909152907ffc4d69f373858d480cfc3f12e7cc7f9b12201291753ffc3babef0e7a8041979f906060015b60405180910390a1505050565b611015828260006118c1565b8060005b818110156118bb576118a984848381811061188f5761188f61561e565b90506020020160208101906118a49190614d6e565b612897565b806118b381615634565b915050611872565b50505050565b33836118cc81612897565b6118d6828261306b565b6118de61316c565b600084116119225760405162461bcd60e51b81526020600482015260116024820152700536869667420616d6f756e74203d3d203607c1b6044820152606401610f5c565b61012854600160201b90046001600160a01b0316331461195257611947338685612cad565b6119528584156131e0565b63ffffffff8516600090815261018d602090815260408083208615158452909152908190205490516323b872dd60e01b8152336004820152306024820152604481018690526001600160a01b03909116906323b872dd906064016020604051808303816000875af11580156119cb573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906119ef919061564f565b5063ffffffff851660009081526101c3602090815260408083208615158452825280832033845290915281208054869290611a2b9084906155d2565b909155505063ffffffff8516600090815261015a6020526040812054611a529060016155d2565b63ffffffff871660008181526101c060209081526040808320338452825280832085905592825261019281528282208815158352905290812080549293508792909190611aa09084906155d2565b90915550506040517fd850f5d8405edb0730cd72e6bb9e228043c91fd591562543ea553efda14970b69061168590889087908990339087906155ea565b60016000526101936020527f486ff8510ed3a8bd8fa99e6b19b446e53008986cfe7e8b76d7459f84f14d2474546001600160801b0316611bf15760015b6101285463ffffffff90811690821611611bef5760408051808201825263ffffffff8316600090815261018e602090815283822060018352905291909120548190611b6490613261565b6001600160801b0316815263ffffffff8316600090815261018e60209081526040808320838052825290912054910190611b9d90613261565b6001600160801b0390811690915263ffffffff8316600090815261019360209081526040909120835193909101518216600160801b029290911691909117905580611be7816154e8565b915050611b1a565b505b604051600181527f7f8b9abe2c2fb85d0402e1c78c31e287c70cac837029836df3d5c6351033829b9060200160405180910390a1565b8060005b81811015611c7557611c6385858584818110611c4957611c4961561e565b9050602002016020810190611c5e9190614d6e565b61306b565b80611c6d81615634565b915050611c2b565b5050505050565b611015828260016132ce565b611015828261306b565b611015828260006132ce565b60009182526065602090815260408084206001600160a01b0393909316845291905290205460ff1690565b60008060008415611ce857611cde8785611758565b9092509050611cf7565b611cf28785611758565b925090505b611d0286838361343a565b979650505050505050565b61012854600160201b90046001600160a01b03163314611d5d5760405162461bcd60e51b815260206004820152600b60248201526a7374616b6572206f6e6c7960a81b6044820152606401610f5c565b63ffffffff91821660009081526101c46020908152604080832093151583529281528282206001600160a01b0395909516825293909352909120805463ffffffff191642909216919091179055565b61101582826001613459565b600082815260656020526040902060010154611dd48133612d51565b610f708383612e3b565b611de661303f565b6001600160a01b03831615801590611e0657506001600160a01b03821615155b8015611e1a57506001600160a01b03811615155b611e2357600080fd5b6101288054600091908290611e3d9063ffffffff166154e8565b91906101000a81548163ffffffff021916908363ffffffff16021790559050600061012860049054906101000a90046001600160a01b03169050826001600160a01b031663edf565cc6040518163ffffffff1660e01b8152600401600060405180830381600087803b158015611eb257600080fd5b505af1158015611ec6573d6000803e3d6000fd5b5050610129546040516001600160a01b03909116925063e6d304679150611ef3908c908c9060200161566c565b6040516020818303038152906040528989604051602001611f15929190615693565b604051602081830303815290604052848660016040518663ffffffff1660e01b8152600401611f48959493929190615709565b6020604051808303816000875af1158015611f67573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611f8b919061575d565b63ffffffff8316600090815261018d602090815260408083206001845282529182902080546001600160a01b0319166001600160a01b03948516179055610129549151919092169163e6d3046791611fe7918d918d910161577a565b60405160208183030381529060405289896040516020016120099291906157a2565b604051602081830303815290604052848660006040518663ffffffff1660e01b815260040161203c959493929190615709565b6020604051808303816000875af115801561205b573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061207f919061575d565b63ffffffff8316600081815261018d60209081526040808320838052825280832080546001600160a01b03199081166001600160a01b039788161790915593835261015d8252808320805485168b871617905561015e82528083208054851689871617905561015f825280832080549094169489169485179093558251630ce74fc560e31b8152925163673a7e28936004808201949183900301908290875af1158015612130573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612154919061550c565b61015960008463ffffffff1663ffffffff168152602001908152602001600020819055507f901e73890694712ca72bdc627d356f05f11be45e7ccf490a8d4924c393bcb5658261018d60008563ffffffff1663ffffffff1681526020019081526020016000206000600115151515815260200190815260200160002060009054906101000a90046001600160a01b031661018d60008663ffffffff1663ffffffff16815260200190815260200160002060008015151515815260200190815260200160002060009054906101000a90046001600160a01b03168861015960008863ffffffff1663ffffffff168152602001908152602001600020548e8e8e8e8d8d60405161226c9b9a9998979695949392919061554e565b60405180910390a1505050505050505050565b61228761303f565b63ffffffff909116600090815261015b6020526040902055565b61101582826000613459565b63ffffffff8216600090815261018d602090815260408083208415158452909152902054829082906001600160a01b0316331461231e5760405162461bcd60e51b815260206004820152600f60248201526e0dcdee840ecc2d8d2c840e6f2dce8d608b1b6044820152606401610f5c565b611c75858585612cad565b611015828260016118c1565b60008261234181613651565b63ffffffff8416600090815261015a60209081526040808320546101c083528184206001600160a01b038a1685529092529091205480158015906123855750818111155b156124565763ffffffff861660009081526101c1602090815260408083208815801585529083528184206001600160a01b038c168552909252822054919081906123dd576123d38985611758565b90925090506123ec565b6123e78985611758565b925090505b82156123ff576123fc83836136ae565b96505b63ffffffff891660009081526101c3602090815260408083208b15845282528083206001600160a01b038e16845290915290205480156124515761244481838561343a565b61244e90896155d2565b97505b505050505b5050509392505050565b61246861303f565b871580159061247657508515155b801561248157508415155b801561248c57508315155b801561249757508115155b6124a057600080fd5b63ffffffff89166000908152610158602052604090205460ff16156124fd5760405162461bcd60e51b8152602060048201526013602482015272185b1c9958591e481a5b9a5d1a585b1a5e9959606a1b6044820152606401610f5c565b6101285463ffffffff908116908a16111561254b5760405162461bcd60e51b815260206004820152600e60248201526d0d2dcc8caf040e8dede40d0d2ced60931b6044820152606401610f5c565b63ffffffff8916600090815261015860209081526040808320805460ff1916600190811790915561015b835281842086905561015a90925290912055612591858a6136cd565b6802b5e3af16b188000081111580156125b2575067016345785d8a00008110155b6125f35760405162461bcd60e51b8152602060048201526012602482015271496e636f7272656374206c6576657261676560701b6044820152606401610f5c565b63ffffffff8916600081815261015c602090815260408083208590556101285461018d835281842060018552909252808320548380529281902054905163b0956b5f60e01b815260048101949094526001600160a01b03928316602485015282166044840152606483018b9052608483018a905260a4830189905260c4830187905260e48301869052600160201b9004169063b0956b5f9061010401600060405180830381600087803b1580156126a957600080fd5b505af11580156126bd573d6000803e3d6000fd5b5050610128546040516317b4d3fb60e31b815263ffffffff8d16600482015260016024820152670de0b6b3a76400006044820181905260648201526084810189905260a48101899052600160201b9091046001600160a01b0316925063bda69fd8915060c401600060405180830381600087803b15801561273d57600080fd5b505af1158015612751573d6000803e3d6000fd5b50506040805163ffffffff8d168152602081018990529081018490527f95eeb1c33a758f56bd880588063c2f122e39c8885929e5fbbbd57418b97e58d09250606001905061226c565b6001600160a01b038416158015906127ba57506001600160a01b03831615155b80156127ce57506001600160a01b03821615155b80156127e257506001600160a01b03811615155b6127eb57600080fd5b6127f484613950565b61012980546001600160a01b03199081166001600160a01b038681169182179093556101288054640100000000600160c01b031916600160201b8786169081029190911790915561012a80549093168585161790925560408051938816845260208401919091528201527f48aa6e6153c5dedbe00925ab3c8e28c6ce0c1a80652b3369f176065e797b45079060600160405180910390a150505050565b3b151590565b806128a181613651565b63ffffffff8216600090815261015f60209081526040808320548151630ce74fc560e31b815291516001600160a01b039091169263673a7e289260048082019391829003018187875af11580156128fc573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612920919061550c565b63ffffffff8416600090815261015a602090815260408083205461015990925290912054919250908214801590611c755760008061295e8786613a22565b63ffffffff8916600090815261018d602090815260408083206001845282528083205481516318160ddd60e01b8152915195975093955091936129f89387936001600160a01b03909116926318160ddd92600480840193829003018189875af11580156129cf573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906129f3919061550c565b6136ae565b63ffffffff8916600090815261018d6020908152604080832083805282528083205481516318160ddd60e01b815291519495509293612a669387936001600160a01b03909116926318160ddd9260048083019392829003018189875af11580156129cf573d6000803e3d6000fd5b63ffffffff8a16600090815261015960205260409020889055905085612a8b81615634565b63ffffffff8b16600090815261015a6020526040908190208290558051808201909152909750905080612abd84613261565b6001600160801b03168152602001612ad483613261565b6001600160801b0390811690915263ffffffff8b166000908152610194602090815260408083208b845282528220845194909101518316600160801b029390921692909217905580612b278b8585613ca5565b9092509050612b3682876157c0565b9550612b4281866157c0565b94506040518060400160405280612b5888613261565b6001600160801b03168152602001612b6f87613261565b6001600160801b0390811690915263ffffffff8d166000818152610193602090815260409182902085519590910151948416600160801b9590941694909402929092179092556101285490516317b4d3fb60e31b81526004810192909252602482018a905260448201869052606482018590526084820188905260a48201879052600160201b90046001600160a01b03169063bda69fd89060c401600060405180830381600087803b158015612c2457600080fd5b505af1158015612c38573d6000803e3d6000fd5b50506040805163ffffffff8f168152602081018c90529081018c9052606081018990526080810188905260a0810187905260c081018690527f69e662f95898affac086a5bc1177755bdaf7f4a40a3880364c48012170ee57fe925060e001905060405180910390a15050505050505050505050565b63ffffffff82811660009081526101c460209081526040808320851515845282528083206001600160a01b038816845290915290205416611c20612cf18242615801565b10156118bb5760405162461bcd60e51b815260206004820152602960248201527f52617069642074726164696e672064697361626c65642c20756e6465722077616044820152681a5d081c195c9a5bd960ba1b6064820152608401610f5c565b612d5b8282611c9e565b61101557612d73816001600160a01b03166014613fa4565b612d7e836020613fa4565b604051602001612d8f929190615818565b60408051601f198184030181529082905262461bcd60e51b8252610f5c9160040161588d565b612dbf8282611c9e565b6110155760008281526065602090815260408083206001600160a01b03851684529091529020805460ff19166001179055612df73390565b6001600160a01b0316816001600160a01b0316837f2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d60405160405180910390a45050565b612e458282611c9e565b156110155760008281526065602090815260408083206001600160a01b0385168085529252808320805460ff1916905551339285917ff6391f5c32d9c69d2a47ea670b442974b53935d1edc7fd64eb21e047a839171b9190a45050565b7f360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc546001600160a01b031690565b7f189ab7a9244df0848122154315af71fe140f3db0fe014031783b0946b8c9d2e36110158133612d51565b6000612f05612ea2565b9050612f1084614140565b600083511180612f1d5750815b15612f2e57612f2c84846141e5565b505b7f4910fdfa16fed3260ed0e7147f7cc6da11a60208b5b9406d12a635614ffd9143805460ff16611c7557805460ff191660011781556040516001600160a01b0383166024820152612fad90869060440160408051601f198184030181529190526020810180516001600160e01b0316631b2ce7f360e11b1790526141e5565b50805460ff19168155612fbe612ea2565b6001600160a01b0316826001600160a01b0316146130365760405162461bcd60e51b815260206004820152602f60248201527f45524331393637557067726164653a207570677261646520627265616b73206660448201526e75727468657220757067726164657360881b6064820152608401610f5c565b611c75856142d0565b6130697fa49807205ce4d355092ef5a8a18f56e8913cf4a201fbe287825b095693c2177533612d51565b565b63ffffffff811660009081526101c0602090815260408083206001600160a01b038616845290915290205480158015906130bb575063ffffffff8216600090815261015a60205260409020548111155b15610f70576130cc82846001614310565b6130d882846000614310565b6130e48284600161444f565b6130f08284600061444f565b6130fc82846001614574565b61310882846000614574565b63ffffffff821660008181526101c0602090815260408083206001600160a01b038816808552908352818420939093558051928352908201929092527fe03aa867e2345cc967d98e4c81f6b0707b5ef082d9d20bac3dcf95540acdeae49101611855565b61012854600160201b90046001600160a01b031633146130695761012a546040516324b4085360e21b81523360048201526001600160a01b03909116906392d0214c90602401600060405180830381600087803b1580156131cc57600080fd5b505af11580156118bb573d6000803e3d6000fd5b63ffffffff91821660009081526101c4602090815260408083209315158352928152828220338352905220805463ffffffff191642909216919091179055565b63ffffffff808316600090815261015e602090815260408083205461015d90925290912054611015926001600160a01b03918216923392169085906146af16565b60006001600160801b038211156132ca5760405162461bcd60e51b815260206004820152602760248201527f53616665436173743a2076616c756520646f65736e27742066697420696e20316044820152663238206269747360c81b6064820152608401610f5c565b5090565b33836132d981612897565b6132e3828261306b565b6132eb61316c565b6000841161332e5760405162461bcd60e51b815260206004820152601060248201526f04d696e7420616d6f756e74203d3d20360841b6044820152606401610f5c565b61333885846131e0565b6133428585613220565b63ffffffff85166000908152610190602090815260408083208615158452909152812080548692906133759084906155d2565b909155505063ffffffff851660009081526101c16020908152604080832086151584528252808320338452909152812080548692906133b59084906155d2565b909155505063ffffffff8516600090815261015a60205260408120546133dc9060016155d2565b63ffffffff871660009081526101c0602090815260408083203380855292529182902083905590519192507f50b8727b538cf16daeb79894e8bde5c1e975985071be8a8d7620675a5dddfc6b9161168591899188918a9187906155ea565b60008161344784866158a0565b61345191906158d5565b949350505050565b338361346481612897565b61346e828261306b565b61347661316c565b600084116134bb5760405162461bcd60e51b8152602060048201526012602482015271052656465656d20616d6f756e74203d3d20360741b6044820152606401610f5c565b6134c6338685612cad565b63ffffffff8516600090815261018d602090815260408083208615158452909152908190205490516323b872dd60e01b8152336004820152306024820152604481018690526001600160a01b03909116906323b872dd906064016020604051808303816000875af115801561353f573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190613563919061564f565b5063ffffffff851660009081526101c260209081526040808320861515845282528083203384529091528120805486929061359f9084906155d2565b909155505063ffffffff8516600090815261015a60205260408120546135c69060016155d2565b63ffffffff871660008181526101c0602090815260408083203384528252808320859055928252610191815282822088151583529052908120805492935087929091906136149084906155d2565b90915550506040517f191d5f0d51691cdc223884e5321013c9663c6b337a07d550c538d9dcbbd662039061168590889087908990339087906155ea565b63ffffffff81166000908152610158602052604090205460ff16610f0d5760405162461bcd60e51b81526020600482015260146024820152731b585c9ad95d08191bd95cdb89dd08195e1a5cdd60621b6044820152606401610f5c565b6000816136c384670de0b6b3a76400006158a0565b61117f91906158d5565b670de0b6b3a76400008210156137255760405162461bcd60e51b815260206004820152601860248201527f496e73756666696369656e74206d61726b6574207365656400000000000000006044820152606401610f5c565b60006137328360026158a0565b905061373e8282613220565b63ffffffff8216600090815261015e6020526040908190205490516304831f7160e51b8152600481018390526001600160a01b0390911690639063ee2090602401600060405180830381600087803b15801561379957600080fd5b505af11580156137ad573d6000803e3d6000fd5b5050505063ffffffff8216600090815261018d6020908152604080832060018452909152908190205490516340c10f1960e01b815273f10a7f10a7f10a7f10a7f10a7f10a7f10a7f10a76004820152602481018590526001600160a01b03909116906340c10f1990604401600060405180830381600087803b15801561383257600080fd5b505af1158015613846573d6000803e3d6000fd5b5050505063ffffffff8216600090815261018d60209081526040808320838052909152908190205490516340c10f1960e01b815273f10a7f10a7f10a7f10a7f10a7f10a7f10a7f10a76004820152602481018590526001600160a01b03909116906340c10f1990604401600060405180830381600087803b1580156138ca57600080fd5b505af11580156138de573d6000803e3d6000fd5b5050505060405180604001604052806138f685613261565b6001600160801b0316815260200161390d85613261565b6001600160801b0390811690915263ffffffff909316600090815261019360209081526040909120825192909101518416600160801b0291909316179091555050565b600054610100900460ff1661396b5760005460ff161561396f565b303b155b6139d25760405162461bcd60e51b815260206004820152602e60248201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160448201526d191e481a5b9a5d1a585b1a5e995960921b6064820152608401610f5c565b600054610100900460ff161580156139f4576000805461ffff19166101011790555b6139fc614709565b613a04614748565b613a0d8261476f565b8015611015576000805461ff00191690555050565b63ffffffff821660009081526101936020526040812080546001600160801b0380821693600160801b909204169190613a5b83856155d2565b9050600080613a6c888787866147e1565b63ffffffff8a16600090815261015e602052604080822054905163452accd960e11b81526004810188905260248101849052939550919350916001600160a01b0390911690638a5599b2906044016020604051808303816000875af1158015613ad9573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190613afd919061550c565b90508015613b29578215613b1c57613b1581886155d2565b9650613b29565b613b2681876155d2565b95505b63ffffffff89166000908152610159602052604081205490613b4b8989614859565b90506000613b6183670de0b6b3a76400006158e9565b63ffffffff8d16600090815261015c602052604090205483613b83868f61596e565b613b8d91906158e9565b613b9791906158e9565b613ba191906159ad565b63ffffffff8d16600090815261016060205260409020549091508015613bff57898b1015613be657613bd58d828c8e61486f565b613bdf90836157c0565b9150613bff565b613bf28d828d8d61486f565b613bfc908361596e565b91505b6000821215613c5657613c11826159db565b91508a821115613c3957620186a0613c2c8c6201869f6158e9565b613c3691906159ad565b91505b613c43828c615801565b9a50613c4f828b6155d2565b9950613c95565b89821115613c7c57620186a0613c6f8b6201869f6158e9565b613c7991906159ad565b91505b613c86828c6155d2565b9a50613c92828b615801565b99505b5050505050505050509250929050565b63ffffffff8316600090815261019060209081526040808320600184529091528120548190819081908015613d075763ffffffff881660009081526101906020908152604080832060018452909152812055935083613d0481886136ae565b92505b5063ffffffff87166000908152610190602090815260408083208380529091529020548015613d625763ffffffff8816600090815261019060209081526040808320838052909152812055925082613d5f81876136ae565b91505b5063ffffffff8716600090815261019260209081526040808320600184529091529020548015613dfa576000613d98828961494e565b9050613da4818761596e565b9550613db081866157c0565b9450613dbc828561596e565b9350613dc982898961343a565b613dd390846157c0565b63ffffffff8a16600090815261019260209081526040808320600184529091528120559250505b5063ffffffff87166000908152610192602090815260408083208380529091529020548015613e90576000613e2f828861494e565b9050613e3b818661596e565b9450613e4781876157c0565b9550613e53828461596e565b9250613e6082888a61343a565b613e6a90856157c0565b63ffffffff8a166000908152610192602090815260408083208380529091528120559350505b5063ffffffff8716600090815261019160209081526040808320600184529091529020548015613f0057613ec4818861494e565b613ece908661596e565b9450613eda818461596e565b63ffffffff89166000908152610191602090815260408083206001845290915281205592505b5063ffffffff87166000908152610191602090815260408083208380529091529020548015613f6e57613f33818761494e565b613f3d908561596e565b9350613f49818361596e565b63ffffffff891660009081526101916020908152604080832083805290915281205591505b613f8188613f7c86886157c0565b614963565b613f8d88600185614a31565b613f9988600084614a31565b505050935093915050565b60606000613fb38360026158a0565b613fbe9060026155d2565b67ffffffffffffffff811115613fd657613fd6615013565b6040519080825280601f01601f191660200182016040528015614000576020820181803683370190505b509050600360fc1b8160008151811061401b5761401b61561e565b60200101906001600160f81b031916908160001a905350600f60fb1b8160018151811061404a5761404a61561e565b60200101906001600160f81b031916908160001a905350600061406e8460026158a0565b6140799060016155d2565b90505b60018111156140f1576f181899199a1a9b1b9c1cb0b131b232b360811b85600f16601081106140ad576140ad61561e565b1a60f81b8282815181106140c3576140c361561e565b60200101906001600160f81b031916908160001a90535060049490941c936140ea816159f8565b905061407c565b50831561117f5760405162461bcd60e51b815260206004820181905260248201527f537472696e67733a20686578206c656e67746820696e73756666696369656e746044820152606401610f5c565b803b6141a45760405162461bcd60e51b815260206004820152602d60248201527f455243313936373a206e657720696d706c656d656e746174696f6e206973206e60448201526c1bdd08184818dbdb9d1c9858dd609a1b6064820152608401610f5c565b7f360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc80546001600160a01b0319166001600160a01b0392909216919091179055565b6060823b6142445760405162461bcd60e51b815260206004820152602660248201527f416464726573733a2064656c65676174652063616c6c20746f206e6f6e2d636f6044820152651b9d1c9858dd60d21b6064820152608401610f5c565b600080846001600160a01b03168460405161425f9190615a0f565b600060405180830381855af49150503d806000811461429a576040519150601f19603f3d011682016040523d82523d6000602084013e61429f565b606091505b50915091506142c78282604051806060016040528060278152602001615a7760279139614b28565b95945050505050565b6142d981614140565b6040516001600160a01b038216907fbc7cd75a20ee27fd9adebab32041f755214dbc6bffa90cc0225b39da2e5c2d3b90600090a250565b63ffffffff831660009081526101c160209081526040808320841515845282528083206001600160a01b038616845290915290205480156118bb5763ffffffff841660008181526101c160209081526040808320861515845282528083206001600160a01b0388168085529083528184208490559383526101c08252808320938352929052908120546143ac9083906129f390889087906110df565b63ffffffff8616600090815261018d6020908152604080832087151584529091529081902054905163a9059cbb60e01b81526001600160a01b0387811660048301526024820184905292935091169063a9059cbb906044016020604051808303816000875af1158015614423573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190614447919061564f565b505050505050565b63ffffffff831660009081526101c260209081526040808320841515845282528083206001600160a01b038616845290915290205480156118bb5763ffffffff841660008181526101c260209081526040808320861515845282528083206001600160a01b0388168085529083528184208490559383526101c08252808320938352929052908120546144f09083906144eb90889087906110df565b61494e565b63ffffffff8616600090815261015e6020526040908190205490516375b5ffd160e11b81526001600160a01b0387811660048301526024820184905292935091169063eb6bffa290604401600060405180830381600087803b15801561455557600080fd5b505af1158015614569573d6000803e3d6000fd5b505050505050505050565b63ffffffff831660009081526101c360209081526040808320841515845282528083206001600160a01b038616845290915290205480156118bb5763ffffffff841660009081526101c0602090815260408083206001600160a01b03871684529091528120546145e990869084908690611cc9565b63ffffffff861660008181526101c3602090815260408083208815801585529083528184206001600160a01b038b811680875291855283862086905595855261018d845282852091855292529182902054915163a9059cbb60e01b8152600481019190915260248101849052929350169063a9059cbb906044016020604051808303816000875af1158015614682573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906146a6919061564f565b611c7557600080fd5b604080516001600160a01b0385811660248301528416604482015260648082018490528251808303909101815260849091019091526020810180516001600160e01b03166323b872dd60e01b1790526118bb908590614b61565b600054610100900460ff166147305760405162461bcd60e51b8152600401610f5c90615a2b565b614738614c33565b614740614c33565b613069614c33565b600054610100900460ff166147385760405162461bcd60e51b8152600401610f5c90615a2b565b6001600160a01b03811661478257600080fd5b61478d600082614c5a565b6147b77fa49807205ce4d355092ef5a8a18f56e8913cf4a201fbe287825b095693c2177582614c5a565b610f0d7f189ab7a9244df0848122154315af71fe140f3db0fe014031783b0946b8c9d2e382614c5a565b81831060008082156147f657508484036147fb565b508385035b63ffffffff8716600090815261015b6020526040812054859061481e90846158a0565b61482891906158d5565b9050600061483e82670de0b6b3a7640000614859565b905080670de0b6b3a764000003935050505094509492505050565b6000818310614868578161117f565b5090919050565b6101285463ffffffff8516600081815261015a6020526040808220549051633d016d9b60e11b815260048101939093526024830152918291600160201b9091046001600160a01b031690637a02db3690604401602060405180830381865afa1580156148df573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190614903919061550c565b90506a1a1a94ec861d5c3380000061491b8242615801565b866149268688615801565b61493091906158a0565b61493a91906158a0565b61494491906158d5565b9695505050505050565b6000670de0b6b3a76400006136c383856158a0565b60008113156149dc5763ffffffff8216600090815261015e6020526040908190205490516304831f7160e51b8152600481018390526001600160a01b0390911690639063ee20906024015b600060405180830381600087803b1580156149c857600080fd5b505af1158015614447573d6000803e3d6000fd5b60008112156110155763ffffffff8216600090815261015e60205260409020546001600160a01b0316631c499b55614a13836159db565b6040518263ffffffff1660e01b81526004016149ae91815260200190565b6000811315614ac65763ffffffff8316600090815261018d602090815260408083208515158452909152908190205490516340c10f1960e01b8152306004820152602481018390526001600160a01b03909116906340c10f19906044015b600060405180830381600087803b158015614aa957600080fd5b505af1158015614abd573d6000803e3d6000fd5b50505050505050565b6000811215610f705763ffffffff8316600090815261018d6020908152604080832085151584529091529020546001600160a01b03166342966c68614b0a836159db565b6040518263ffffffff1660e01b8152600401614a8f91815260200190565b60608315614b3757508161117f565b825115614b475782518084602001fd5b8160405162461bcd60e51b8152600401610f5c919061588d565b6000614bb6826040518060400160405280602081526020017f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c6564815250856001600160a01b0316614c649092919063ffffffff16565b805190915015610f705780806020019051810190614bd4919061564f565b610f705760405162461bcd60e51b815260206004820152602a60248201527f5361666545524332303a204552433230206f7065726174696f6e20646964206e6044820152691bdd081cdd58d8d9595960b21b6064820152608401610f5c565b600054610100900460ff166130695760405162461bcd60e51b8152600401610f5c90615a2b565b6110158282612db5565b6060613451848460008585843b614cbd5760405162461bcd60e51b815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e74726163740000006044820152606401610f5c565b600080866001600160a01b03168587604051614cd99190615a0f565b60006040518083038185875af1925050503d8060008114614d16576040519150601f19603f3d011682016040523d82523d6000602084013e614d1b565b606091505b5091509150611d02828286614b28565b600060208284031215614d3d57600080fd5b81356001600160e01b03198116811461117f57600080fd5b803563ffffffff81168114614d6957600080fd5b919050565b600060208284031215614d8057600080fd5b61117f82614d55565b8015158114610f0d57600080fd5b6001600160a01b0381168114610f0d57600080fd5b600080600060608486031215614dc157600080fd5b614dca84614d55565b92506020840135614dda81614d89565b91506040840135614dea81614d97565b809150509250925092565b600080600060608486031215614e0a57600080fd5b8335614e1581614d97565b9250614e2360208501614d55565b91506040840135614dea81614d89565b600060208284031215614e4557600080fd5b5035919050565b60008060408385031215614e5f57600080fd5b823591506020830135614e7181614d97565b809150509250929050565b600080600060608486031215614e9157600080fd5b614e9a84614d55565b92506020840135614eaa81614d89565b929592945050506040919091013590565b60008060408385031215614ece57600080fd5b614ed783614d55565b91506020830135614e7181614d89565b600060208284031215614ef957600080fd5b813561117f81614d97565b60008083601f840112614f1657600080fd5b50813567ffffffffffffffff811115614f2e57600080fd5b6020830191508360208285010111156117d557600080fd5b600080600080600080600080600060e08a8c031215614f6457600080fd5b893567ffffffffffffffff80821115614f7c57600080fd5b614f888d838e01614f04565b909b50995060208c0135915080821115614fa157600080fd5b50614fae8c828d01614f04565b90985096505060408a0135614fc281614d97565b945060608a0135614fd281614d97565b935060808a0135614fe281614d97565b925060a08a0135614ff281614d97565b915060c08a013561500281614d97565b809150509295985092959850929598565b634e487b7160e01b600052604160045260246000fd5b6000806040838503121561503c57600080fd5b823561504781614d97565b9150602083013567ffffffffffffffff8082111561506457600080fd5b818501915085601f83011261507857600080fd5b81358181111561508a5761508a615013565b604051601f8201601f19908116603f011681019083821181831017156150b2576150b2615013565b816040528281528860208487010111156150cb57600080fd5b8260208601602083013760006020848301015280955050505050509250929050565b60008060006060848603121561510257600080fd5b61510b84614d55565b9250602084013591506040840135614dea81614d89565b6000806040838503121561513557600080fd5b61513e83614d55565b946020939093013593505050565b6000806040838503121561515f57600080fd5b61516883614d55565b91506020830135614e7181614d97565b60008083601f84011261518a57600080fd5b50813567ffffffffffffffff8111156151a257600080fd5b6020830191508360208260051b85010111156117d557600080fd5b600080602083850312156151d057600080fd5b823567ffffffffffffffff8111156151e757600080fd5b6151f385828601615178565b90969095509350505050565b60008060006040848603121561521457600080fd5b833561521f81614d97565b9250602084013567ffffffffffffffff81111561523b57600080fd5b61524786828701615178565b9497909650939450505050565b6000806040838503121561526757600080fd5b823561527281614d97565b915061528060208401614d55565b90509250929050565b6000806000806080858703121561529f57600080fd5b6152a885614d55565b93506020850135925060408501356152bf81614d89565b9396929550929360600135925050565b600080600080600080600060a0888a0312156152ea57600080fd5b873567ffffffffffffffff8082111561530257600080fd5b61530e8b838c01614f04565b909950975060208a013591508082111561532757600080fd5b506153348a828b01614f04565b909650945050604088013561534881614d97565b9250606088013561535881614d97565b9150608088013561536881614d97565b8091505092959891949750929550565b60008060008060008060008060006101208a8c03121561539757600080fd5b6153a08a614d55565b9b60208b01359b5060408b01359a60608101359a506080810135995060a0810135985060c0810135975060e081013596506101000135945092505050565b600080600080608085870312156153f457600080fd5b84356153ff81614d97565b9350602085013561540f81614d97565b9250604085013561541f81614d97565b9150606085013561542f81614d97565b939692955090935050565b6020808252602c908201527f46756e6374696f6e206d7573742062652063616c6c6564207468726f7567682060408201526b19195b1959d85d1958d85b1b60a21b606082015260800190565b6020808252602c908201527f46756e6374696f6e206d7573742062652063616c6c6564207468726f7567682060408201526b6163746976652070726f787960a01b606082015260800190565b634e487b7160e01b600052601160045260246000fd5b600063ffffffff80831681811415615502576155026154d2565b6001019392505050565b60006020828403121561551e57600080fd5b5051919050565b81835281816020850137506000828201602090810191909152601f909101601f19169091010190565b63ffffffff8c1681526001600160a01b038b811660208301528a8116604083015289811660608301526080820189905261012060a083018190526000916155988483018a8c615525565b915083820360c08501526155ad82888a615525565b925080861660e085015280851661010085015250509c9b505050505050505050505050565b600082198211156155e5576155e56154d2565b500190565b63ffffffff959095168552921515602085015260408401919091526001600160a01b03166060830152608082015260a00190565b634e487b7160e01b600052603260045260246000fd5b6000600019821415615648576156486154d2565b5060010190565b60006020828403121561566157600080fd5b815161117f81614d89565b6a0233637b0ba102637b733960ad1b81528183600b83013760009101600b01908152919050565b61199b60f21b81528183600283013760009101600201908152919050565b60005b838110156156cc5781810151838201526020016156b4565b838111156118bb5750506000910152565b600081518084526156f58160208601602086016156b1565b601f01601f19169290920160200192915050565b60a08152600061571c60a08301886156dd565b828103602084015261572e81886156dd565b6001600160a01b03969096166040840152505063ffffffff929092166060830152151560809091015292915050565b60006020828403121561576f57600080fd5b815161117f81614d97565b6b0233637b0ba1029b437b93a160a51b81528183600c83013760009101600c01908152919050565b61667360f01b81528183600283013760009101600201908152919050565b600080821280156001600160ff1b03849003851316156157e2576157e26154d2565b600160ff1b83900384128116156157fb576157fb6154d2565b50500190565b600082821015615813576158136154d2565b500390565b7f416363657373436f6e74726f6c3a206163636f756e74200000000000000000008152600083516158508160178501602088016156b1565b7001034b99036b4b9b9b4b733903937b6329607d1b60179184019182015283516158818160288401602088016156b1565b01602801949350505050565b60208152600061117f60208301846156dd565b60008160001904831182151516156158ba576158ba6154d2565b500290565b634e487b7160e01b600052601260045260246000fd5b6000826158e4576158e46158bf565b500490565b60006001600160ff1b038184138284138082168684048611161561590f5761590f6154d2565b600160ff1b600087128281168783058912161561592e5761592e6154d2565b6000871292508782058712848416161561594a5761594a6154d2565b87850587128184161615615960576159606154d2565b505050929093029392505050565b60008083128015600160ff1b85018412161561598c5761598c6154d2565b6001600160ff1b03840183138116156159a7576159a76154d2565b50500390565b6000826159bc576159bc6158bf565b600160ff1b8214600019841416156159d6576159d66154d2565b500590565b6000600160ff1b8214156159f1576159f16154d2565b5060000390565b600081615a0757615a076154d2565b506000190190565b60008251615a218184602087016156b1565b9190910192915050565b6020808252602b908201527f496e697469616c697a61626c653a20636f6e7472616374206973206e6f74206960408201526a6e697469616c697a696e6760a81b60608201526080019056fe416464726573733a206c6f772d6c6576656c2064656c65676174652063616c6c206661696c6564a26469706673582212204e218c1976bb205f2bdc67da2a9461c68a4ad417d110119fb109608ea97bf43b64736f6c634300080a0033",
  "deployedBytecode": "",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "createNewSyntheticMarket(string,string,address,address,address)": {
        "details": "This does not make the market active. The `initializeMarket` function was split out separately to this function to reduce costs.",
        "params": {
          "_oracleManager": "The address of the oracle manager that provides the price feed for this market",
          "_paymentToken": "The address of the erc20 token used to buy this synthetic asset this will likely always be DAI",
          "_yieldManager": "The contract that manages depositing the paymentToken into a yield bearing protocol",
          "syntheticName": "Name of the synthetic asset",
          "syntheticSymbol": "Symbol for the synthetic asset"
        }
      },
      "createNewSyntheticMarketExternalSyntheticTokens(string,string,address,address,address,address,address)": {
        "details": "This does not make the market active. The `initializeMarket` function was split out separately to this function to reduce costs.",
        "params": {
          "_longToken": "Address for the long token.",
          "_oracleManager": "The address of the oracle manager that provides the price feed for this market",
          "_paymentToken": "The address of the erc20 token used to buy this synthetic asset this will likely always be DAI",
          "_shortToken": "Address for the short token.",
          "_yieldManager": "The contract that manages depositing the paymentToken into a yield bearing protocol",
          "syntheticName": "Name of the synthetic asset",
          "syntheticSymbol": "Symbol for the synthetic asset"
        }
      },
      "executeOutstandingNextPriceSettlementsUser(address,uint32)": {
        "params": {
          "marketIndex": "An uint32 which uniquely identifies a market.",
          "user": "The address of the user for whom to execute the function."
        }
      },
      "executeOutstandingNextPriceSettlementsUserMulti(address,uint32[])": {
        "params": {
          "marketIndexes": "An array of int32s which each uniquely identify a market.",
          "user": "The address of the user for whom to execute the function."
        }
      },
      "getAmountSyntheticTokenToMintOnTargetSide(uint32,uint256,bool,uint256)": {
        "details": "Intended for use primarily by Staker.sol",
        "params": {
          "amountSyntheticToken_redeemOnOriginSide": "Amount of synth token in wei.",
          "isShiftFromLong": "Whether the token shift is from long to short (true), or short to long (false).",
          "marketIndex": "An uint32 which uniquely identifies a market.",
          "priceSnapshotIndex": "Index which identifies which synth prices to use."
        },
        "returns": {
          "amountSyntheticTokensToMintOnTargetSide": "The amount in wei of tokens for the other side that the shift was worth."
        }
      },
      "getRoleAdmin(bytes32)": {
        "details": "Returns the admin role that controls `role`. See {grantRole} and {revokeRole}. To change a role's admin, use {_setRoleAdmin}."
      },
      "getUsersConfirmedButNotSettledSynthBalance(address,uint32,bool)": {
        "details": "Used in SyntheticToken.sol balanceOf to allow for automatic reflection of next price actions.",
        "params": {
          "isLong": "Whether it is for the long synthetic asset or the short synthetic asset.",
          "marketIndex": "An uint32 which uniquely identifies a market.",
          "user": "The address of the user for whom to execute the function for."
        },
        "returns": {
          "confirmedButNotSettledBalance": "The amount in wei of tokens that the user is owed."
        }
      },
      "grantRole(bytes32,address)": {
        "details": "Grants `role` to `account`. If `account` had not been already granted `role`, emits a {RoleGranted} event. Requirements: - the caller must have ``role``'s admin role."
      },
      "hasRole(bytes32,address)": {
        "details": "Returns `true` if `account` has been granted `role`."
      },
      "initialize(address,address,address,address)": {
        "details": "Calls OpenZeppelin's initializer modifier.",
        "params": {
          "_admin": "Address of the admin role.",
          "_staker": "Address of the contract which handles synthetic asset stakes.",
          "_tokenFactory": "Address of the contract which creates synthetic asset tokens."
        }
      },
      "initializeMarket(uint32,uint256,uint256,uint256,uint256,uint256,int256,uint256,uint256)": {
        "details": "Seperated from createNewSyntheticMarket due to gas considerations.",
        "params": {
          "balanceIncentiveCurve_equilibriumOffset": "An offset to account for naturally imbalanced markets when Float token issuance should differ for market sides. See Staker.sol",
          "balanceIncentiveCurve_exponent": "Sets the degree to which Float token issuance differs for market sides in unbalanced markets. See Staker.sol",
          "initialMarketSeedForEachMarketSide": "Amount of payment token that will be deposited in each market side to seed the market.",
          "kInitialMultiplier": "Linearly decreasing multiplier for Float token issuance for the market when staking synths.",
          "kPeriod": "Time which kInitialMultiplier will last",
          "marketIndex": "An int32 which uniquely identifies the market.",
          "unstakeFee_e18": "Base 1e18 percentage fee levied when unstaking for the market."
        }
      },
      "mintLongNextPrice(uint32,uint256)": {
        "params": {
          "amount": "Amount of payment tokens in that token's lowest denominationfor which to mint synthetic assets at next price.",
          "marketIndex": "An uint32 which uniquely identifies a market."
        }
      },
      "mintShortNextPrice(uint32,uint256)": {
        "params": {
          "amount": "Amount of payment tokens in that token's lowest denominationfor which to mint synthetic assets at next price.",
          "marketIndex": "An uint32 which uniquely identifies a market."
        }
      },
      "redeemLongNextPrice(uint32,uint256)": {
        "params": {
          "marketIndex": "An uint32 which uniquely identifies a market.",
          "tokens_redeem": "Amount in wei of synth tokens to redeem at the next oracle price."
        }
      },
      "redeemShortNextPrice(uint32,uint256)": {
        "params": {
          "marketIndex": "An uint32 which uniquely identifies a market.",
          "tokens_redeem": "Amount in wei of synth tokens to redeem at the next oracle price."
        }
      },
      "renounceRole(bytes32,address)": {
        "details": "Revokes `role` from the calling account. Roles are often managed via {grantRole} and {revokeRole}: this function's purpose is to provide a mechanism for accounts to lose their privileges if they are compromised (such as when a trusted device is misplaced). If the calling account had been revoked `role`, emits a {RoleRevoked} event. Requirements: - the caller must be `account`."
      },
      "revokeRole(bytes32,address)": {
        "details": "Revokes `role` from `account`. If `account` had been granted `role`, emits a {RoleRevoked} event. Requirements: - the caller must have ``role``'s admin role."
      },
      "shiftPositionFromLongNextPrice(uint32,uint256)": {
        "params": {
          "amountSyntheticTokensToShift": "Amount in wei of synthetic tokens to shift from long to short the next oracle price update.",
          "marketIndex": "An uint32 which uniquely identifies a market."
        }
      },
      "shiftPositionFromShortNextPrice(uint32,uint256)": {
        "params": {
          "amountSyntheticTokensToShift": "Amount in wei of synthetic tokens to shift from the short to long at the next oracle price update.",
          "marketIndex": "An uint32 which uniquely identifies a market."
        }
      },
      "shiftPositionNextPrice(uint32,uint256,bool)": {
        "details": "Called by external functions to shift either way. Intended for primary use by Staker.sol",
        "params": {
          "amountSyntheticTokensToShift": "Amount in wei of synthetic tokens to shift from the one side to the other at the next oracle price update.",
          "isShiftFromLong": "Whether the token shift is from long to short (true), or short to long (false).",
          "marketIndex": "An uint32 which uniquely identifies a market."
        }
      },
      "supportsInterface(bytes4)": {
        "details": "See {IERC165-supportsInterface}."
      },
      "updateMarketOracle(uint32,address)": {
        "details": "Can only be called by the current admin.",
        "params": {
          "_newOracleManager": "Address of the replacement oracle manager.",
          "marketIndex": "An uint32 which uniquely identifies a market."
        }
      },
      "updateSystemState(uint32)": {
        "params": {
          "marketIndex": "An uint32 which uniquely identifies a market."
        }
      },
      "updateSystemStateMulti(uint32[])": {
        "params": {
          "marketIndexes": "An array of int32s which uniquely identify markets."
        }
      },
      "upgradeTo(address)": {
        "details": "Upgrade the implementation of the proxy to `newImplementation`. Calls {_authorizeUpgrade}. Emits an {Upgraded} event."
      },
      "upgradeToAndCall(address,bytes)": {
        "details": "Upgrade the implementation of the proxy to `newImplementation`, and subsequently execute the function call encoded in `data`. Calls {_authorizeUpgrade}. Emits an {Upgraded} event."
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "changeMarketTreasurySplitGradient(uint32,uint256)": {
        "notice": "changes the gradient of the line for determining the yield split between market and treasury."
      },
      "createNewSyntheticMarket(string,string,address,address,address)": {
        "notice": "Creates an entirely new long/short market tracking an underlying oracle price.  Make sure the synthetic names/symbols are unique."
      },
      "createNewSyntheticMarketExternalSyntheticTokens(string,string,address,address,address,address,address)": {
        "notice": "Creates an entirely new long/short market tracking an underlying oracle price.  Uses already created synthetic tokens."
      },
      "executeOutstandingNextPriceSettlementsUser(address,uint32)": {
        "notice": "After markets have been batched updated on a new oracle price, transfers any owed tokens to a user from their next price actions for that update to that user."
      },
      "executeOutstandingNextPriceSettlementsUserMulti(address,uint32[])": {
        "notice": "Executes outstanding next price settlements for a user for multiple markets."
      },
      "getAmountSyntheticTokenToMintOnTargetSide(uint32,uint256,bool,uint256)": {
        "notice": "Given an executed next price shift from tokens on one market side to the other, determines how many other side tokens the shift was worth."
      },
      "getUsersConfirmedButNotSettledSynthBalance(address,uint32,bool)": {
        "notice": "The amount of a synth token a user is owed following a batch execution. 4 possible states for next price actions: - \"Pending\" - means the next price update hasn't happened or been enacted on by the updateSystemState function. - \"Confirmed\" - means the next price has been updated by the updateSystemState function. There is still -               outstanding (lazy) computation that needs to be executed per user in the batch. - \"Settled\" - there is no more computation left for the user. - \"Non-existent\" - user has no next price actions. This function returns a calculated value only in the case of 'confirmed' next price actions. It should return zero for all other types of next price actions."
      },
      "initialize(address,address,address,address)": {
        "notice": "Initializes the contract."
      },
      "initializeMarket(uint32,uint256,uint256,uint256,uint256,uint256,int256,uint256,uint256)": {
        "notice": "Sets a market as active once it has already been setup by createNewSyntheticMarket."
      },
      "mintLongNextPrice(uint32,uint256)": {
        "notice": "Allows users to mint long synthetic assets for a market. To prevent front-running these mints are executed on the next price update from the oracle."
      },
      "mintShortNextPrice(uint32,uint256)": {
        "notice": "Allows users to mint short synthetic assets for a market. To prevent front-running these mints are executed on the next price update from the oracle."
      },
      "redeemLongNextPrice(uint32,uint256)": {
        "notice": "Allows users to redeem long synthetic assets for a market. To prevent front-running these redeems are executed on the next price update from the oracle."
      },
      "redeemShortNextPrice(uint32,uint256)": {
        "notice": "Allows users to redeem short synthetic assets for a market. To prevent front-running these redeems are executed on the next price update from the oracle."
      },
      "shiftPositionFromLongNextPrice(uint32,uint256)": {
        "notice": "Allows users to shift their position from long to short in a single transaction. To prevent front-running these shifts are executed on the next price update from the oracle."
      },
      "shiftPositionFromShortNextPrice(uint32,uint256)": {
        "notice": "Allows users to shift their position from short to long in a single transaction. To prevent front-running these shifts are executed on the next price update from the oracle."
      },
      "shiftPositionNextPrice(uint32,uint256,bool)": {
        "notice": "Allows users to shift their position from one side of the market to the other in a single transaction. To prevent front-running these shifts are executed on the next price update from the oracle."
      },
      "syntheticToken_priceSnapshotLEGACY(uint32,bool,uint256)": {
        "notice": "synthetic token prices of a given market of a (long/short) at every previous price update"
      },
      "updateMarketOracle(uint32,address)": {
        "notice": "Update oracle for a market"
      },
      "updateSystemState(uint32)": {
        "notice": "Updates the state of a market to account for the latest oracle price update."
      },
      "updateSystemStateMulti(uint32[])": {
        "notice": "Updates the state of multiples markets to account for their latest oracle price updates."
      }
    },
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 1051,
        "contract": "contracts/longShort/LongShortPolygon.sol:LongShortPolygon",
        "label": "_initialized",
        "offset": 0,
        "slot": "0",
        "type": "t_bool"
      },
      {
        "astId": 1054,
        "contract": "contracts/longShort/LongShortPolygon.sol:LongShortPolygon",
        "label": "_initializing",
        "offset": 1,
        "slot": "0",
        "type": "t_bool"
      },
      {
        "astId": 5350,
        "contract": "contracts/longShort/LongShortPolygon.sol:LongShortPolygon",
        "label": "__gap",
        "offset": 0,
        "slot": "1",
        "type": "t_array(t_uint256)50_storage"
      },
      {
        "astId": 6272,
        "contract": "contracts/longShort/LongShortPolygon.sol:LongShortPolygon",
        "label": "__gap",
        "offset": 0,
        "slot": "51",
        "type": "t_array(t_uint256)50_storage"
      },
      {
        "astId": 250,
        "contract": "contracts/longShort/LongShortPolygon.sol:LongShortPolygon",
        "label": "_roles",
        "offset": 0,
        "slot": "101",
        "type": "t_mapping(t_bytes32,t_struct(RoleData)245_storage)"
      },
      {
        "astId": 537,
        "contract": "contracts/longShort/LongShortPolygon.sol:LongShortPolygon",
        "label": "__gap",
        "offset": 0,
        "slot": "102",
        "type": "t_array(t_uint256)49_storage"
      },
      {
        "astId": 1033,
        "contract": "contracts/longShort/LongShortPolygon.sol:LongShortPolygon",
        "label": "__gap",
        "offset": 0,
        "slot": "151",
        "type": "t_array(t_uint256)50_storage"
      },
      {
        "astId": 1228,
        "contract": "contracts/longShort/LongShortPolygon.sol:LongShortPolygon",
        "label": "__gap",
        "offset": 0,
        "slot": "201",
        "type": "t_array(t_uint256)50_storage"
      },
      {
        "astId": 19753,
        "contract": "contracts/longShort/LongShortPolygon.sol:LongShortPolygon",
        "label": "__constantsGap",
        "offset": 0,
        "slot": "251",
        "type": "t_array(t_uint256)45_storage"
      },
      {
        "astId": 19756,
        "contract": "contracts/longShort/LongShortPolygon.sol:LongShortPolygon",
        "label": "latestMarket",
        "offset": 0,
        "slot": "296",
        "type": "t_uint32"
      },
      {
        "astId": 19758,
        "contract": "contracts/longShort/LongShortPolygon.sol:LongShortPolygon",
        "label": "staker",
        "offset": 4,
        "slot": "296",
        "type": "t_address"
      },
      {
        "astId": 19760,
        "contract": "contracts/longShort/LongShortPolygon.sol:LongShortPolygon",
        "label": "tokenFactory",
        "offset": 0,
        "slot": "297",
        "type": "t_address"
      },
      {
        "astId": 19762,
        "contract": "contracts/longShort/LongShortPolygon.sol:LongShortPolygon",
        "label": "gems",
        "offset": 0,
        "slot": "298",
        "type": "t_address"
      },
      {
        "astId": 19766,
        "contract": "contracts/longShort/LongShortPolygon.sol:LongShortPolygon",
        "label": "__globalStateGap",
        "offset": 0,
        "slot": "299",
        "type": "t_array(t_uint256)45_storage"
      },
      {
        "astId": 19770,
        "contract": "contracts/longShort/LongShortPolygon.sol:LongShortPolygon",
        "label": "marketExists",
        "offset": 0,
        "slot": "344",
        "type": "t_mapping(t_uint32,t_bool)"
      },
      {
        "astId": 19775,
        "contract": "contracts/longShort/LongShortPolygon.sol:LongShortPolygon",
        "label": "assetPrice",
        "offset": 0,
        "slot": "345",
        "type": "t_mapping(t_uint32,t_int256)"
      },
      {
        "astId": 19780,
        "contract": "contracts/longShort/LongShortPolygon.sol:LongShortPolygon",
        "label": "marketUpdateIndex",
        "offset": 0,
        "slot": "346",
        "type": "t_mapping(t_uint32,t_uint256)"
      },
      {
        "astId": 19784,
        "contract": "contracts/longShort/LongShortPolygon.sol:LongShortPolygon",
        "label": "marketTreasurySplitGradient_e18",
        "offset": 0,
        "slot": "347",
        "type": "t_mapping(t_uint32,t_uint256)"
      },
      {
        "astId": 19788,
        "contract": "contracts/longShort/LongShortPolygon.sol:LongShortPolygon",
        "label": "marketLeverage_e18",
        "offset": 0,
        "slot": "348",
        "type": "t_mapping(t_uint32,t_uint256)"
      },
      {
        "astId": 19792,
        "contract": "contracts/longShort/LongShortPolygon.sol:LongShortPolygon",
        "label": "paymentTokens",
        "offset": 0,
        "slot": "349",
        "type": "t_mapping(t_uint32,t_address)"
      },
      {
        "astId": 19796,
        "contract": "contracts/longShort/LongShortPolygon.sol:LongShortPolygon",
        "label": "yieldManagers",
        "offset": 0,
        "slot": "350",
        "type": "t_mapping(t_uint32,t_address)"
      },
      {
        "astId": 19801,
        "contract": "contracts/longShort/LongShortPolygon.sol:LongShortPolygon",
        "label": "oracleManagers",
        "offset": 0,
        "slot": "351",
        "type": "t_mapping(t_uint32,t_address)"
      },
      {
        "astId": 19805,
        "contract": "contracts/longShort/LongShortPolygon.sol:LongShortPolygon",
        "label": "fundingRateMultiplier_e18",
        "offset": 0,
        "slot": "352",
        "type": "t_mapping(t_uint32,t_uint256)"
      },
      {
        "astId": 19809,
        "contract": "contracts/longShort/LongShortPolygon.sol:LongShortPolygon",
        "label": "__marketStateGap",
        "offset": 0,
        "slot": "353",
        "type": "t_array(t_uint256)44_storage"
      },
      {
        "astId": 19816,
        "contract": "contracts/longShort/LongShortPolygon.sol:LongShortPolygon",
        "label": "syntheticTokens",
        "offset": 0,
        "slot": "397",
        "type": "t_mapping(t_uint32,t_mapping(t_bool,t_address))"
      },
      {
        "astId": 19822,
        "contract": "contracts/longShort/LongShortPolygon.sol:LongShortPolygon",
        "label": "marketSideValueInPaymentTokenLEGACY",
        "offset": 0,
        "slot": "398",
        "type": "t_mapping(t_uint32,t_mapping(t_bool,t_uint256))"
      },
      {
        "astId": 19831,
        "contract": "contracts/longShort/LongShortPolygon.sol:LongShortPolygon",
        "label": "syntheticToken_priceSnapshotLEGACY",
        "offset": 0,
        "slot": "399",
        "type": "t_mapping(t_uint32,t_mapping(t_bool,t_mapping(t_uint256,t_uint256)))"
      },
      {
        "astId": 19838,
        "contract": "contracts/longShort/LongShortPolygon.sol:LongShortPolygon",
        "label": "batched_amountPaymentToken_deposit",
        "offset": 0,
        "slot": "400",
        "type": "t_mapping(t_uint32,t_mapping(t_bool,t_uint256))"
      },
      {
        "astId": 19845,
        "contract": "contracts/longShort/LongShortPolygon.sol:LongShortPolygon",
        "label": "batched_amountSyntheticToken_redeem",
        "offset": 0,
        "slot": "401",
        "type": "t_mapping(t_uint32,t_mapping(t_bool,t_uint256))"
      },
      {
        "astId": 19852,
        "contract": "contracts/longShort/LongShortPolygon.sol:LongShortPolygon",
        "label": "batched_amountSyntheticToken_toShiftAwayFrom_marketSide",
        "offset": 0,
        "slot": "402",
        "type": "t_mapping(t_uint32,t_mapping(t_bool,t_uint256))"
      },
      {
        "astId": 19863,
        "contract": "contracts/longShort/LongShortPolygon.sol:LongShortPolygon",
        "label": "marketSideValueInPaymentToken",
        "offset": 0,
        "slot": "403",
        "type": "t_mapping(t_uint32,t_struct(MarketSideValueInPaymentToken)19857_storage)"
      },
      {
        "astId": 19875,
        "contract": "contracts/longShort/LongShortPolygon.sol:LongShortPolygon",
        "label": "syntheticToken_priceSnapshot",
        "offset": 0,
        "slot": "404",
        "type": "t_mapping(t_uint32,t_mapping(t_uint256,t_struct(SynthPriceInPaymentToken)19868_storage))"
      },
      {
        "astId": 19879,
        "contract": "contracts/longShort/LongShortPolygon.sol:LongShortPolygon",
        "label": "__marketPositonStateGap",
        "offset": 0,
        "slot": "405",
        "type": "t_array(t_uint256)43_storage"
      },
      {
        "astId": 19885,
        "contract": "contracts/longShort/LongShortPolygon.sol:LongShortPolygon",
        "label": "userNextPrice_currentUpdateIndex",
        "offset": 0,
        "slot": "448",
        "type": "t_mapping(t_uint32,t_mapping(t_address,t_uint256))"
      },
      {
        "astId": 19893,
        "contract": "contracts/longShort/LongShortPolygon.sol:LongShortPolygon",
        "label": "userNextPrice_paymentToken_depositAmount",
        "offset": 0,
        "slot": "449",
        "type": "t_mapping(t_uint32,t_mapping(t_bool,t_mapping(t_address,t_uint256)))"
      },
      {
        "astId": 19901,
        "contract": "contracts/longShort/LongShortPolygon.sol:LongShortPolygon",
        "label": "userNextPrice_syntheticToken_redeemAmount",
        "offset": 0,
        "slot": "450",
        "type": "t_mapping(t_uint32,t_mapping(t_bool,t_mapping(t_address,t_uint256)))"
      },
      {
        "astId": 19909,
        "contract": "contracts/longShort/LongShortPolygon.sol:LongShortPolygon",
        "label": "userNextPrice_syntheticToken_toShiftAwayFrom_marketSide",
        "offset": 0,
        "slot": "451",
        "type": "t_mapping(t_uint32,t_mapping(t_bool,t_mapping(t_address,t_uint256)))"
      },
      {
        "astId": 19923,
        "contract": "contracts/longShort/LongShortPolygon.sol:LongShortPolygon",
        "label": "userLastInteractionTimestamp",
        "offset": 0,
        "slot": "452",
        "type": "t_mapping(t_uint32,t_mapping(t_bool,t_mapping(t_address,t_struct(UserInteractionInfo)19914_storage)))"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_uint256)43_storage": {
        "base": "t_uint256",
        "encoding": "inplace",
        "label": "uint256[43]",
        "numberOfBytes": "1376"
      },
      "t_array(t_uint256)44_storage": {
        "base": "t_uint256",
        "encoding": "inplace",
        "label": "uint256[44]",
        "numberOfBytes": "1408"
      },
      "t_array(t_uint256)45_storage": {
        "base": "t_uint256",
        "encoding": "inplace",
        "label": "uint256[45]",
        "numberOfBytes": "1440"
      },
      "t_array(t_uint256)49_storage": {
        "base": "t_uint256",
        "encoding": "inplace",
        "label": "uint256[49]",
        "numberOfBytes": "1568"
      },
      "t_array(t_uint256)50_storage": {
        "base": "t_uint256",
        "encoding": "inplace",
        "label": "uint256[50]",
        "numberOfBytes": "1600"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_bytes32": {
        "encoding": "inplace",
        "label": "bytes32",
        "numberOfBytes": "32"
      },
      "t_int256": {
        "encoding": "inplace",
        "label": "int256",
        "numberOfBytes": "32"
      },
      "t_mapping(t_address,t_bool)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_mapping(t_address,t_struct(UserInteractionInfo)19914_storage)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => struct LongShort.UserInteractionInfo)",
        "numberOfBytes": "32",
        "value": "t_struct(UserInteractionInfo)19914_storage"
      },
      "t_mapping(t_address,t_uint256)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_mapping(t_bool,t_address)": {
        "encoding": "mapping",
        "key": "t_bool",
        "label": "mapping(bool => address)",
        "numberOfBytes": "32",
        "value": "t_address"
      },
      "t_mapping(t_bool,t_mapping(t_address,t_struct(UserInteractionInfo)19914_storage))": {
        "encoding": "mapping",
        "key": "t_bool",
        "label": "mapping(bool => mapping(address => struct LongShort.UserInteractionInfo))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_address,t_struct(UserInteractionInfo)19914_storage)"
      },
      "t_mapping(t_bool,t_mapping(t_address,t_uint256))": {
        "encoding": "mapping",
        "key": "t_bool",
        "label": "mapping(bool => mapping(address => uint256))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_address,t_uint256)"
      },
      "t_mapping(t_bool,t_mapping(t_uint256,t_uint256))": {
        "encoding": "mapping",
        "key": "t_bool",
        "label": "mapping(bool => mapping(uint256 => uint256))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_uint256,t_uint256)"
      },
      "t_mapping(t_bool,t_uint256)": {
        "encoding": "mapping",
        "key": "t_bool",
        "label": "mapping(bool => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_mapping(t_bytes32,t_struct(RoleData)245_storage)": {
        "encoding": "mapping",
        "key": "t_bytes32",
        "label": "mapping(bytes32 => struct AccessControlUpgradeable.RoleData)",
        "numberOfBytes": "32",
        "value": "t_struct(RoleData)245_storage"
      },
      "t_mapping(t_uint256,t_struct(SynthPriceInPaymentToken)19868_storage)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => struct LongShort.SynthPriceInPaymentToken)",
        "numberOfBytes": "32",
        "value": "t_struct(SynthPriceInPaymentToken)19868_storage"
      },
      "t_mapping(t_uint256,t_uint256)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_mapping(t_uint32,t_address)": {
        "encoding": "mapping",
        "key": "t_uint32",
        "label": "mapping(uint32 => address)",
        "numberOfBytes": "32",
        "value": "t_address"
      },
      "t_mapping(t_uint32,t_bool)": {
        "encoding": "mapping",
        "key": "t_uint32",
        "label": "mapping(uint32 => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_mapping(t_uint32,t_int256)": {
        "encoding": "mapping",
        "key": "t_uint32",
        "label": "mapping(uint32 => int256)",
        "numberOfBytes": "32",
        "value": "t_int256"
      },
      "t_mapping(t_uint32,t_mapping(t_address,t_uint256))": {
        "encoding": "mapping",
        "key": "t_uint32",
        "label": "mapping(uint32 => mapping(address => uint256))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_address,t_uint256)"
      },
      "t_mapping(t_uint32,t_mapping(t_bool,t_address))": {
        "encoding": "mapping",
        "key": "t_uint32",
        "label": "mapping(uint32 => mapping(bool => address))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_bool,t_address)"
      },
      "t_mapping(t_uint32,t_mapping(t_bool,t_mapping(t_address,t_struct(UserInteractionInfo)19914_storage)))": {
        "encoding": "mapping",
        "key": "t_uint32",
        "label": "mapping(uint32 => mapping(bool => mapping(address => struct LongShort.UserInteractionInfo)))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_bool,t_mapping(t_address,t_struct(UserInteractionInfo)19914_storage))"
      },
      "t_mapping(t_uint32,t_mapping(t_bool,t_mapping(t_address,t_uint256)))": {
        "encoding": "mapping",
        "key": "t_uint32",
        "label": "mapping(uint32 => mapping(bool => mapping(address => uint256)))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_bool,t_mapping(t_address,t_uint256))"
      },
      "t_mapping(t_uint32,t_mapping(t_bool,t_mapping(t_uint256,t_uint256)))": {
        "encoding": "mapping",
        "key": "t_uint32",
        "label": "mapping(uint32 => mapping(bool => mapping(uint256 => uint256)))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_bool,t_mapping(t_uint256,t_uint256))"
      },
      "t_mapping(t_uint32,t_mapping(t_bool,t_uint256))": {
        "encoding": "mapping",
        "key": "t_uint32",
        "label": "mapping(uint32 => mapping(bool => uint256))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_bool,t_uint256)"
      },
      "t_mapping(t_uint32,t_mapping(t_uint256,t_struct(SynthPriceInPaymentToken)19868_storage))": {
        "encoding": "mapping",
        "key": "t_uint32",
        "label": "mapping(uint32 => mapping(uint256 => struct LongShort.SynthPriceInPaymentToken))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_uint256,t_struct(SynthPriceInPaymentToken)19868_storage)"
      },
      "t_mapping(t_uint32,t_struct(MarketSideValueInPaymentToken)19857_storage)": {
        "encoding": "mapping",
        "key": "t_uint32",
        "label": "mapping(uint32 => struct LongShort.MarketSideValueInPaymentToken)",
        "numberOfBytes": "32",
        "value": "t_struct(MarketSideValueInPaymentToken)19857_storage"
      },
      "t_mapping(t_uint32,t_uint256)": {
        "encoding": "mapping",
        "key": "t_uint32",
        "label": "mapping(uint32 => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_struct(MarketSideValueInPaymentToken)19857_storage": {
        "encoding": "inplace",
        "label": "struct LongShort.MarketSideValueInPaymentToken",
        "members": [
          {
            "astId": 19854,
            "contract": "contracts/longShort/LongShortPolygon.sol:LongShortPolygon",
            "label": "value_long",
            "offset": 0,
            "slot": "0",
            "type": "t_uint128"
          },
          {
            "astId": 19856,
            "contract": "contracts/longShort/LongShortPolygon.sol:LongShortPolygon",
            "label": "value_short",
            "offset": 16,
            "slot": "0",
            "type": "t_uint128"
          }
        ],
        "numberOfBytes": "32"
      },
      "t_struct(RoleData)245_storage": {
        "encoding": "inplace",
        "label": "struct AccessControlUpgradeable.RoleData",
        "members": [
          {
            "astId": 242,
            "contract": "contracts/longShort/LongShortPolygon.sol:LongShortPolygon",
            "label": "members",
            "offset": 0,
            "slot": "0",
            "type": "t_mapping(t_address,t_bool)"
          },
          {
            "astId": 244,
            "contract": "contracts/longShort/LongShortPolygon.sol:LongShortPolygon",
            "label": "adminRole",
            "offset": 0,
            "slot": "1",
            "type": "t_bytes32"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_struct(SynthPriceInPaymentToken)19868_storage": {
        "encoding": "inplace",
        "label": "struct LongShort.SynthPriceInPaymentToken",
        "members": [
          {
            "astId": 19865,
            "contract": "contracts/longShort/LongShortPolygon.sol:LongShortPolygon",
            "label": "price_long",
            "offset": 0,
            "slot": "0",
            "type": "t_uint128"
          },
          {
            "astId": 19867,
            "contract": "contracts/longShort/LongShortPolygon.sol:LongShortPolygon",
            "label": "price_short",
            "offset": 16,
            "slot": "0",
            "type": "t_uint128"
          }
        ],
        "numberOfBytes": "32"
      },
      "t_struct(UserInteractionInfo)19914_storage": {
        "encoding": "inplace",
        "label": "struct LongShort.UserInteractionInfo",
        "members": [
          {
            "astId": 19911,
            "contract": "contracts/longShort/LongShortPolygon.sol:LongShortPolygon",
            "label": "timestamp",
            "offset": 0,
            "slot": "0",
            "type": "t_uint32"
          },
          {
            "astId": 19913,
            "contract": "contracts/longShort/LongShortPolygon.sol:LongShortPolygon",
            "label": "effectiveAmountMinted",
            "offset": 4,
            "slot": "0",
            "type": "t_uint224"
          }
        ],
        "numberOfBytes": "32"
      },
      "t_uint128": {
        "encoding": "inplace",
        "label": "uint128",
        "numberOfBytes": "16"
      },
      "t_uint224": {
        "encoding": "inplace",
        "label": "uint224",
        "numberOfBytes": "28"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      },
      "t_uint32": {
        "encoding": "inplace",
        "label": "uint32",
        "numberOfBytes": "4"
      }
    }
  }
}